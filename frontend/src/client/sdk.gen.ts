// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { GetRegistrationStatsResponse, ListAnalysisAdaptersResponse, ExecuteAnalysisAdapterData, ExecuteAnalysisAdapterResponse, PromoteFragmentData, PromoteFragmentResponse, CreateRunData, CreateRunResponse, ListRunsData, ListRunsResponse, CreateRun1Data, CreateRun1Response, ListRuns1Data, ListRuns1Response, GetRunData, GetRunResponse, UpdateRunData, UpdateRunResponse, DeleteRunData, DeleteRunResponse, RetryFailedAnnotationsData, RetryFailedAnnotationsResponse, CreatePackageFromRunEndpointData, CreatePackageFromRunEndpointResponse, CreateAnnotationData, CreateAnnotationResponse, CreateAnnotation1Data, CreateAnnotation1Response, ListAnnotationsData, ListAnnotationsResponse, ListAnnotations1Data, ListAnnotations1Response, CreateAnnotation2Data, CreateAnnotation2Response, CreateAnnotation3Data, CreateAnnotation3Response, ListAnnotations2Data, ListAnnotations2Response, ListAnnotations3Data, ListAnnotations3Response, GetAnnotationData, GetAnnotationResponse, GetAnnotation1Data, GetAnnotation1Response, UpdateAnnotationData, UpdateAnnotationResponse, UpdateAnnotation1Data, UpdateAnnotation1Response, DeleteAnnotationData, DeleteAnnotationResponse, DeleteAnnotation1Data, DeleteAnnotation1Response, CreateBatchAnnotationsData, CreateBatchAnnotationsResponse, CreateBatchAnnotations1Data, CreateBatchAnnotations1Response, GetRunResultsData, GetRunResultsResponse, GetRunResults1Data, GetRunResults1Response, RetrySingleAnnotationData, RetrySingleAnnotationResponse, RetrySingleAnnotation1Data, RetrySingleAnnotation1Response, CreateAnnotationSchemaData, CreateAnnotationSchemaResponse, ListAnnotationSchemasData, ListAnnotationSchemasResponse, CreateAnnotationSchema1Data, CreateAnnotationSchema1Response, ListAnnotationSchemas1Data, ListAnnotationSchemas1Response, GetAnnotationSchemaData, GetAnnotationSchemaResponse, UpdateAnnotationSchemaData, UpdateAnnotationSchemaResponse, DeleteAnnotationSchemaData, DeleteAnnotationSchemaResponse, RestoreAnnotationSchemaData, RestoreAnnotationSchemaResponse, ReadyzResponse, LivenessResponse, HealthzResponse, CreateAssetData, CreateAssetResponse, CreateAsset1Data, CreateAsset1Response, ListAssetsData, ListAssetsResponse, ListAssets1Data, ListAssets1Response, CreateAsset2Data, CreateAsset2Response, CreateAsset3Data, CreateAsset3Response, ListAssets2Data, ListAssets2Response, ListAssets3Data, ListAssets3Response, UploadFileData, UploadFileResponse, UploadFile1Data, UploadFile1Response, IngestUrlData, IngestUrlResponse, IngestUrl1Data, IngestUrl1Response, IngestTextData, IngestTextResponse, IngestText1Data, IngestText1Response, ComposeArticleData, ComposeArticleResponse, ComposeArticle1Data, ComposeArticle1Response, BulkIngestUrlsData, BulkIngestUrlsResponse, BulkIngestUrls1Data, BulkIngestUrls1Response, ReprocessAssetData, ReprocessAssetResponse, ReprocessAsset1Data, ReprocessAsset1Response, DiscoverRssFeedsData, DiscoverRssFeedsResponse, DiscoverRssFeeds1Data, DiscoverRssFeeds1Response, PreviewRssFeedData, PreviewRssFeedResponse, PreviewRssFeed1Data, PreviewRssFeed1Response, CreateRssSourceData, CreateRssSourceResponse, CreateRssSource1Data, CreateRssSource1Response, IngestSelectedArticlesData, IngestSelectedArticlesResponse, IngestSelectedArticles1Data, IngestSelectedArticles1Response, GetAssetData, GetAssetResponse, GetAsset1Data, GetAsset1Response, UpdateAssetData, UpdateAssetResponse, UpdateAsset1Data, UpdateAsset1Response, DeleteAssetData, DeleteAssetResponse, DeleteAsset1Data, DeleteAsset1Response, GetAssetChildrenData, GetAssetChildrenResponse, GetAssetChildren1Data, GetAssetChildren1Response, GetSupportedContentTypesResponse, GetSupportedContentTypes1Response, CreateAssetsBackgroundBulkData, CreateAssetsBackgroundBulkResponse, CreateAssetsBackgroundBulk1Data, CreateAssetsBackgroundBulk1Response, CreateAssetsBackgroundUrlsData, CreateAssetsBackgroundUrlsResponse, CreateAssetsBackgroundUrls1Data, CreateAssetsBackgroundUrls1Response, AddFilesToBundleBackgroundData, AddFilesToBundleBackgroundResponse, AddFilesToBundleBackground1Data, AddFilesToBundleBackground1Response, GetTaskStatusData, GetTaskStatusResponse, GetTaskStatus1Data, GetTaskStatus1Response, IngestRssFeedsFromAwesomeData, IngestRssFeedsFromAwesomeResponse, IngestRssFeedsFromAwesome1Data, IngestRssFeedsFromAwesome1Response, CreateBackupData, CreateBackupResponse, ListBackupsData, ListBackupsResponse, ListAllUserBackupsData, ListAllUserBackupsResponse, GetBackupData, GetBackupResponse, UpdateBackupData, UpdateBackupResponse, DeleteBackupData, DeleteBackupResponse, RestoreBackupData, RestoreBackupResponse, CreateBackupShareLinkData, CreateBackupShareLinkResponse, DownloadSharedBackupData, DownloadSharedBackupResponse, CleanupExpiredBackupsResponse, GetInfospacesBackupOverviewData, GetInfospacesBackupOverviewResponse, TriggerBackupAllInfospacesData, TriggerBackupAllInfospacesResponse, TriggerBackupSpecificInfospacesData, TriggerBackupSpecificInfospacesResponse, CreateBundleData, CreateBundleResponse, GetBundlesData, GetBundlesResponse, GetBundleData, GetBundleResponse, UpdateBundleData, UpdateBundleResponse, DeleteBundleData, DeleteBundleResponse, AddAssetToBundleData, AddAssetToBundleResponse, RemoveAssetFromBundleData, RemoveAssetFromBundleResponse, GetAssetsInBundleData, GetAssetsInBundleResponse, TransferBundleData, TransferBundleResponse, ChunkSingleAssetData, ChunkSingleAssetResponse, ChunkMultipleAssetsData, ChunkMultipleAssetsResponse, GetAssetChunksData, GetAssetChunksResponse, RemoveAssetChunksData, RemoveAssetChunksResponse, GetChunkingStatisticsData, GetChunkingStatisticsResponse, CreateDatasetData, CreateDatasetResponse, ListDatasetsData, ListDatasetsResponse, CreateDataset1Data, CreateDataset1Response, ListDatasets1Data, ListDatasets1Response, GetDatasetData, GetDatasetResponse, UpdateDatasetData, UpdateDatasetResponse, DeleteDatasetData, DeleteDatasetResponse, ExportDatasetData, ExportDatasetResponse, ImportDatasetData, ImportDatasetResponse, ImportDatasetFromTokenData, ImportDatasetFromTokenResponse, ListEmbeddingModelsData, ListEmbeddingModelsResponse, CreateEmbeddingModelData, CreateEmbeddingModelResponse, GetAvailableModelsResponse, CheckEmbeddingProviderHealthResponse, GetEmbeddingModelStatsData, GetEmbeddingModelStatsResponse, GenerateEmbeddingsData, GenerateEmbeddingsResponse, SimilaritySearchData, SimilaritySearchResponse, EmbedTextData, EmbedTextResponse, TestEmbeddingProviderData, TestEmbeddingProviderResponse, DeactivateEmbeddingModelData, DeactivateEmbeddingModelResponse, GetLocationArticlesData, GetLocationArticlesResponse, GeojsonViewResponse, GetEntityArticlesData, GetEntityArticlesResponse, GetLeaderInfoData, GetLeaderInfoResponse, GetLegislationDataData, GetLegislationDataResponse, GetEconDataData, GetEconDataResponse, UpdateLeadersResponse, GetTavilyDataResponse, GetEntityScoreOverTimeData, GetEntityScoreOverTimeResponse, GetTopEntitiesByScoreData, GetTopEntitiesByScoreResponse, FileUploadData, FileUploadResponse2, FileDownloadData, FileDownloadResponse, ListFilesData, ListFilesResponse, DeleteFileData, DeleteFileResponse, StreamFileData, StreamFileResponse, SaveFilterData, SaveFilterResponse, ListFiltersResponse, GetFilterData, GetFilterResponse, DeleteFilterData, DeleteFilterResponse, TestFilterData, TestFilterResponse, GetBasicFilterExamplesResponse, GetAdvancedFilterExamplesResponse, CreateThresholdFilterData, CreateThresholdFilterResponse, CreateRangeFilterData, CreateRangeFilterResponse, CreateKeywordFilterData, CreateKeywordFilterResponse, CreateInfospaceData, CreateInfospaceResponse, ListInfospacesData, ListInfospacesResponse, CreateInfospace1Data, CreateInfospace1Response, ListInfospaces1Data, ListInfospaces1Response, GetInfospaceData, GetInfospaceResponse, UpdateInfospaceData, UpdateInfospaceResponse, DeleteInfospaceData, DeleteInfospaceResponse, GetInfospaceStatsData, GetInfospaceStatsResponse, ImportInfospaceData, ImportInfospaceResponse, IntelligenceChatData, IntelligenceChatResponse, ExecuteToolCallData, ExecuteToolCallResponse, ListAvailableModelsData, ListAvailableModelsResponse, ListUniversalToolsData, ListUniversalToolsResponse, GetInfospaceToolContextData, GetInfospaceToolContextResponse, GetLocationContentsData, GetLocationContentsResponse, GetLocationEntitiesContentsData, GetLocationEntitiesContentsResponse, LocationFromQueryData, LocationFromQueryResponse, GeojsonEventsViewData, GeojsonEventsViewResponse, DashboardViewResponse, GetLocationEntitiesData, GetLocationEntitiesResponse, GetCoordinatesData, GetCoordinatesResponse, GetGeojsonForArticleIdsData, GetGeojsonForArticleIdsResponse, GetLocationMetadataData, GetLocationMetadataResponse, ChannelRouteData, ChannelRouteResponse, LoginAccessTokenData, LoginAccessTokenResponse, TestTokenResponse, RecoverPasswordData, RecoverPasswordResponse, ResetPasswordData, ResetPasswordResponse, RecoverPasswordHtmlContentData, RecoverPasswordHtmlContentResponse, CreateMonitorData, CreateMonitorResponse, ListMonitorsData, ListMonitorsResponse, GetMonitorData, GetMonitorResponse, UpdateMonitorData, UpdateMonitorResponse, DeleteMonitorData, DeleteMonitorResponse, ExecuteMonitorManuallyData, ExecuteMonitorManuallyResponse, CreatePipelineData, CreatePipelineResponse, ListPipelinesData, ListPipelinesResponse, GetPipelineData, GetPipelineResponse, UpdatePipelineData, UpdatePipelineResponse, DeletePipelineData, DeletePipelineResponse, ExecutePipelineData, ExecutePipelineResponse, SearchContentData, SearchContentResponse, SearchContent1Data, SearchContent1Response, CreateShareableLinkData, CreateShareableLinkResponse, GetShareableLinksData, GetShareableLinksResponse, GetShareableLinkByTokenData, GetShareableLinkByTokenResponse, UpdateShareableLinkData, UpdateShareableLinkResponse, DeleteShareableLinkData, DeleteShareableLinkResponse, AccessSharedResourceData, AccessSharedResourceResponse, ViewSharedResourceData, ViewSharedResourceResponse, GetSharingStatsData, GetSharingStatsResponse, ExportResourceData, ExportResourceResponse, ImportResourceData, ImportResourceResponse, ExportResourcesBatchData, ExportResourcesBatchResponse, ExportMixedBatchData, ExportMixedBatchResponse, StreamSharedAssetFileData, StreamSharedAssetFileResponse, DownloadSharedBundleData, DownloadSharedBundleResponse, DownloadSharedAssetFileData, DownloadSharedAssetFileResponse, ViewDatasetPackageSummaryData, ViewDatasetPackageSummaryResponse, ImportResourceFromTokenData, ImportResourceFromTokenResponse, CreateSourceData, CreateSourceResponse, ListSourcesData, ListSourcesResponse, CreateSource1Data, CreateSource1Response, ListSources1Data, ListSources1Response, GetSourceData, GetSourceResponse, UpdateSourceData, UpdateSourceResponse, DeleteSourceData, DeleteSourceResponse, TransferSourcesData, TransferSourcesResponse, InitiateDiscourseLoginResponse, InitiateDiscourseLogin1Response, HandleDiscourseSsoData, HandleDiscourseSsoResponse, HandleDiscourseSso1Data, HandleDiscourseSso1Response, HandleDiscourseLogoutResponse, HandleDiscourseLogout1Response, GetDiscourseSsoInfoResponse, GetDiscourseSsoInfo1Response, SyncUserToDiscourseData, SyncUserToDiscourseResponse, SyncUserToDiscourse1Data, SyncUserToDiscourse1Response, CompleteDiscourseSsoData, CompleteDiscourseSsoResponse, CompleteDiscourseSso1Data, CompleteDiscourseSso1Response, CreateTaskData, CreateTaskResponse, CreateTask1Data, CreateTask1Response, ListTasksData, ListTasksResponse, ListTasks1Data, ListTasks1Response, CreateTask2Data, CreateTask2Response, CreateTask3Data, CreateTask3Response, ListTasks2Data, ListTasks2Response, ListTasks3Data, ListTasks3Response, GetTaskData, GetTaskResponse, GetTask1Data, GetTask1Response, UpdateTaskData, UpdateTaskResponse, UpdateTask1Data, UpdateTask1Response, DeleteTaskData, DeleteTaskResponse, DeleteTask1Data, DeleteTask1Response, ExecuteTaskManuallyData, ExecuteTaskManuallyResponse, ExecuteTaskManually1Data, ExecuteTaskManually1Response, CreateUserBackupData, CreateUserBackupResponse, ListUserBackupsData, ListUserBackupsResponse, GetUserBackupData, GetUserBackupResponse, UpdateUserBackupData, UpdateUserBackupResponse, DeleteUserBackupData, DeleteUserBackupResponse, RestoreUserBackupData, RestoreUserBackupResponse, CreateUserBackupShareLinkData, CreateUserBackupShareLinkResponse, DownloadSharedUserBackupData, DownloadSharedUserBackupResponse, CleanupExpiredUserBackupsResponse, GetUsersBackupOverviewData, GetUsersBackupOverviewResponse, TriggerBackupAllUsersData, TriggerBackupAllUsersResponse, TriggerBackupSpecificUsersData, TriggerBackupSpecificUsersResponse, ReadUsersData, ReadUsersResponse, CreateUserData, CreateUserResponse, ReadUsers1Data, ReadUsers1Response, CreateUser1Data, CreateUser1Response, ReadUserMeResponse, UpdateUserMeData, UpdateUserMeResponse, UpdatePasswordMeData, UpdatePasswordMeResponse, UploadProfilePictureData, UploadProfilePictureResponse, GetUserPublicProfileData, GetUserPublicProfileResponse, GetProfilePictureData, GetProfilePictureResponse, ListUserProfilesData, ListUserProfilesResponse, GetUserProfileStatsData, GetUserProfileStatsResponse, UpdateUserProfileData, UpdateUserProfileResponse, CreateUserOpenData, CreateUserOpenResponse, ReadUserByIdData, ReadUserByIdResponse, UpdateUserData, UpdateUserResponse, DeleteUserData, DeleteUserResponse, VerifyEmailData, VerifyEmailResponse, ResendVerificationData, ResendVerificationResponse, TestEmailData, TestEmailResponse, GetAvailableRssCountriesResponse, ExtractPdfTextData, ExtractPdfTextResponse, ExtractPdfMetadataData, ExtractPdfMetadataResponse, ScrapeArticleData, ScrapeArticleResponse, AnalyzeSourceData, AnalyzeSourceResponse, BrowseRssFeedData, BrowseRssFeedResponse, GetProvidersResponse, PullOllamaModelData, PullOllamaModelResponse, GetOllamaAvailableModelsData, GetOllamaAvailableModelsResponse, RemoveOllamaModelData, RemoveOllamaModelResponse, GeocodeLocationData, GeocodeLocationResponse, GetCountryDataData, GetCountryDataResponse } from './types.gen';

export class AdminService {
    /**
     * Get Registration Stats
     * Get registration statistics and status.
     * Admin only.
     * @returns RegistrationStats Successful Response
     * @throws ApiError
     */
    public static getRegistrationStats(): CancelablePromise<GetRegistrationStatsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/admin/registration/stats'
        });
    }
}

export class AnalysisAdaptersService {
    /**
     * List Analysis Adapters
     * List all active and available analysis adapters.
     * @returns AnalysisAdapterRead Successful Response
     * @throws ApiError
     */
    public static listAnalysisAdapters(): CancelablePromise<ListAnalysisAdaptersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/analysis/adapters'
        });
    }
    
    /**
     * Execute Analysis Adapter
     * @param data The data for the request.
     * @param data.adapterName The registered name of the adapter
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static executeAnalysisAdapter(data: ExecuteAnalysisAdapterData): CancelablePromise<ExecuteAnalysisAdapterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/analysis/adapters/{adapter_name}/execute',
            path: {
                adapter_name: data.adapterName
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class AnalysisServiceService {
    /**
     * Promote Fragment
     * Promote a fragment of information to a permanent feature of an asset.
     * This creates an auditable annotation and adds the fragment to the asset's metadata.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.assetId
     * @param data.requestBody
     * @returns AnnotationRead Successful Response
     * @throws ApiError
     */
    public static promoteFragment(data: PromoteFragmentData): CancelablePromise<PromoteFragmentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/infospaces/{infospace_id}/assets/{asset_id}/fragments',
            path: {
                infospace_id: data.infospaceId,
                asset_id: data.assetId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List Analysis Adapters
     * List all active and available analysis adapters.
     * @returns AnalysisAdapterRead Successful Response
     * @throws ApiError
     */
    public static listAnalysisAdapters(): CancelablePromise<ListAnalysisAdaptersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/analysis/adapters'
        });
    }
    
    /**
     * Execute Analysis Adapter
     * @param data The data for the request.
     * @param data.adapterName The registered name of the adapter
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static executeAnalysisAdapter(data: ExecuteAnalysisAdapterData): CancelablePromise<ExecuteAnalysisAdapterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/analysis/adapters/{adapter_name}/execute',
            path: {
                adapter_name: data.adapterName
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class AnnotationJobsService {
    /**
     * Create Run
     * Create a new Run.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.requestBody
     * @returns AnnotationRunRead Successful Response
     * @throws ApiError
     */
    public static createRun(data: CreateRunData): CancelablePromise<CreateRunResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/annotation_jobs/infospaces/{infospace_id}/runs/',
            path: {
                infospace_id: data.infospaceId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List Runs
     * Retrieve Runs for the infospace.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.skip
     * @param data.limit
     * @param data.includeCounts Include counts of annotations and assets
     * @returns AnnotationRunsOut Successful Response
     * @throws ApiError
     */
    public static listRuns(data: ListRunsData): CancelablePromise<ListRunsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/annotation_jobs/infospaces/{infospace_id}/runs/',
            path: {
                infospace_id: data.infospaceId
            },
            query: {
                skip: data.skip,
                limit: data.limit,
                include_counts: data.includeCounts
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Run
     * Create a new Run.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.requestBody
     * @returns AnnotationRunRead Successful Response
     * @throws ApiError
     */
    public static createRun1(data: CreateRun1Data): CancelablePromise<CreateRun1Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/annotation_jobs/infospaces/{infospace_id}/runs',
            path: {
                infospace_id: data.infospaceId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List Runs
     * Retrieve Runs for the infospace.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.skip
     * @param data.limit
     * @param data.includeCounts Include counts of annotations and assets
     * @returns AnnotationRunsOut Successful Response
     * @throws ApiError
     */
    public static listRuns1(data: ListRuns1Data): CancelablePromise<ListRuns1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/annotation_jobs/infospaces/{infospace_id}/runs',
            path: {
                infospace_id: data.infospaceId
            },
            query: {
                skip: data.skip,
                limit: data.limit,
                include_counts: data.includeCounts
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Run
     * Retrieve a specific Run by its ID.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.runId
     * @param data.includeCounts Include counts of annotations and assets
     * @returns AnnotationRunRead Successful Response
     * @throws ApiError
     */
    public static getRun(data: GetRunData): CancelablePromise<GetRunResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/annotation_jobs/infospaces/{infospace_id}/runs/{run_id}',
            path: {
                infospace_id: data.infospaceId,
                run_id: data.runId
            },
            query: {
                include_counts: data.includeCounts
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Run
     * Update a Run.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.runId
     * @param data.requestBody
     * @returns AnnotationRunRead Successful Response
     * @throws ApiError
     */
    public static updateRun(data: UpdateRunData): CancelablePromise<UpdateRunResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/annotation_jobs/infospaces/{infospace_id}/runs/{run_id}',
            path: {
                infospace_id: data.infospaceId,
                run_id: data.runId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Run
     * Delete a Run.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.runId
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deleteRun(data: DeleteRunData): CancelablePromise<DeleteRunResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/annotation_jobs/infospaces/{infospace_id}/runs/{run_id}',
            path: {
                infospace_id: data.infospaceId,
                run_id: data.runId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Retry Failed Annotations
     * Retry failed annotations in a run.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.runId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static retryFailedAnnotations(data: RetryFailedAnnotationsData): CancelablePromise<RetryFailedAnnotationsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/annotation_jobs/infospaces/{infospace_id}/runs/{run_id}/retry_failures',
            path: {
                infospace_id: data.infospaceId,
                run_id: data.runId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Package From Run Endpoint
     * Create a package from a run.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.runId
     * @param data.requestBody
     * @returns PackageRead Successful Response
     * @throws ApiError
     */
    public static createPackageFromRunEndpoint(data: CreatePackageFromRunEndpointData): CancelablePromise<CreatePackageFromRunEndpointResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/annotation_jobs/infospaces/{infospace_id}/runs/{run_id}/create_package',
            path: {
                infospace_id: data.infospaceId,
                run_id: data.runId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class AnnotationsService {
    /**
     * Create Annotation
     * Create a new annotation.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.requestBody
     * @returns AnnotationRead Successful Response
     * @throws ApiError
     */
    public static createAnnotation(data: CreateAnnotationData): CancelablePromise<CreateAnnotationResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/annotations/infospaces/{infospace_id}/annotations/',
            path: {
                infospace_id: data.infospaceId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Annotation
     * Create a new annotation.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.requestBody
     * @returns AnnotationRead Successful Response
     * @throws ApiError
     */
    public static createAnnotation1(data: CreateAnnotation1Data): CancelablePromise<CreateAnnotation1Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/annotations/infospaces/{infospace_id}/annotations/',
            path: {
                infospace_id: data.infospaceId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List Annotations
     * Retrieve Annotations for the infospace.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.skip
     * @param data.limit
     * @param data.sourceId
     * @param data.schemaId
     * @returns AnnotationsOut Successful Response
     * @throws ApiError
     */
    public static listAnnotations(data: ListAnnotationsData): CancelablePromise<ListAnnotationsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/annotations/infospaces/{infospace_id}/annotations/',
            path: {
                infospace_id: data.infospaceId
            },
            query: {
                skip: data.skip,
                limit: data.limit,
                source_id: data.sourceId,
                schema_id: data.schemaId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List Annotations
     * Retrieve Annotations for the infospace.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.skip
     * @param data.limit
     * @param data.sourceId
     * @param data.schemaId
     * @returns AnnotationsOut Successful Response
     * @throws ApiError
     */
    public static listAnnotations1(data: ListAnnotations1Data): CancelablePromise<ListAnnotations1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/annotations/infospaces/{infospace_id}/annotations/',
            path: {
                infospace_id: data.infospaceId
            },
            query: {
                skip: data.skip,
                limit: data.limit,
                source_id: data.sourceId,
                schema_id: data.schemaId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Annotation
     * Create a new annotation.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.requestBody
     * @returns AnnotationRead Successful Response
     * @throws ApiError
     */
    public static createAnnotation2(data: CreateAnnotation2Data): CancelablePromise<CreateAnnotation2Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/annotations/infospaces/{infospace_id}/annotations',
            path: {
                infospace_id: data.infospaceId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Annotation
     * Create a new annotation.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.requestBody
     * @returns AnnotationRead Successful Response
     * @throws ApiError
     */
    public static createAnnotation3(data: CreateAnnotation3Data): CancelablePromise<CreateAnnotation3Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/annotations/infospaces/{infospace_id}/annotations',
            path: {
                infospace_id: data.infospaceId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List Annotations
     * Retrieve Annotations for the infospace.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.skip
     * @param data.limit
     * @param data.sourceId
     * @param data.schemaId
     * @returns AnnotationsOut Successful Response
     * @throws ApiError
     */
    public static listAnnotations2(data: ListAnnotations2Data): CancelablePromise<ListAnnotations2Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/annotations/infospaces/{infospace_id}/annotations',
            path: {
                infospace_id: data.infospaceId
            },
            query: {
                skip: data.skip,
                limit: data.limit,
                source_id: data.sourceId,
                schema_id: data.schemaId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List Annotations
     * Retrieve Annotations for the infospace.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.skip
     * @param data.limit
     * @param data.sourceId
     * @param data.schemaId
     * @returns AnnotationsOut Successful Response
     * @throws ApiError
     */
    public static listAnnotations3(data: ListAnnotations3Data): CancelablePromise<ListAnnotations3Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/annotations/infospaces/{infospace_id}/annotations',
            path: {
                infospace_id: data.infospaceId
            },
            query: {
                skip: data.skip,
                limit: data.limit,
                source_id: data.sourceId,
                schema_id: data.schemaId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Annotation
     * Retrieve a specific Annotation by its ID.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.annotationId
     * @returns AnnotationRead Successful Response
     * @throws ApiError
     */
    public static getAnnotation(data: GetAnnotationData): CancelablePromise<GetAnnotationResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/annotations/infospaces/{infospace_id}/annotations/{annotation_id}',
            path: {
                infospace_id: data.infospaceId,
                annotation_id: data.annotationId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Annotation
     * Retrieve a specific Annotation by its ID.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.annotationId
     * @returns AnnotationRead Successful Response
     * @throws ApiError
     */
    public static getAnnotation1(data: GetAnnotation1Data): CancelablePromise<GetAnnotation1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/annotations/infospaces/{infospace_id}/annotations/{annotation_id}',
            path: {
                infospace_id: data.infospaceId,
                annotation_id: data.annotationId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Annotation
     * Update an Annotation.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.annotationId
     * @param data.requestBody
     * @returns AnnotationRead Successful Response
     * @throws ApiError
     */
    public static updateAnnotation(data: UpdateAnnotationData): CancelablePromise<UpdateAnnotationResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/annotations/infospaces/{infospace_id}/annotations/{annotation_id}',
            path: {
                infospace_id: data.infospaceId,
                annotation_id: data.annotationId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Annotation
     * Update an Annotation.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.annotationId
     * @param data.requestBody
     * @returns AnnotationRead Successful Response
     * @throws ApiError
     */
    public static updateAnnotation1(data: UpdateAnnotation1Data): CancelablePromise<UpdateAnnotation1Response> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/annotations/infospaces/{infospace_id}/annotations/{annotation_id}',
            path: {
                infospace_id: data.infospaceId,
                annotation_id: data.annotationId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Annotation
     * Delete an Annotation.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.annotationId
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deleteAnnotation(data: DeleteAnnotationData): CancelablePromise<DeleteAnnotationResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/annotations/infospaces/{infospace_id}/annotations/{annotation_id}',
            path: {
                infospace_id: data.infospaceId,
                annotation_id: data.annotationId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Annotation
     * Delete an Annotation.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.annotationId
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deleteAnnotation1(data: DeleteAnnotation1Data): CancelablePromise<DeleteAnnotation1Response> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/annotations/infospaces/{infospace_id}/annotations/{annotation_id}',
            path: {
                infospace_id: data.infospaceId,
                annotation_id: data.annotationId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Batch Annotations
     * Create multiple annotations in a batch.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static createBatchAnnotations(data: CreateBatchAnnotationsData): CancelablePromise<CreateBatchAnnotationsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/annotations/infospaces/{infospace_id}/annotations/batch',
            path: {
                infospace_id: data.infospaceId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Batch Annotations
     * Create multiple annotations in a batch.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static createBatchAnnotations1(data: CreateBatchAnnotations1Data): CancelablePromise<CreateBatchAnnotations1Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/annotations/infospaces/{infospace_id}/annotations/batch',
            path: {
                infospace_id: data.infospaceId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Run Results
     * Retrieve all annotations for a specific AnnotationRun.
     * The service handles run ownership and infospace context verification.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.runId
     * @param data.skip
     * @param data.limit
     * @returns AnnotationRead Successful Response
     * @throws ApiError
     */
    public static getRunResults(data: GetRunResultsData): CancelablePromise<GetRunResultsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/annotations/infospaces/{infospace_id}/annotations/run/{run_id}/results',
            path: {
                infospace_id: data.infospaceId,
                run_id: data.runId
            },
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Run Results
     * Retrieve all annotations for a specific AnnotationRun.
     * The service handles run ownership and infospace context verification.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.runId
     * @param data.skip
     * @param data.limit
     * @returns AnnotationRead Successful Response
     * @throws ApiError
     */
    public static getRunResults1(data: GetRunResults1Data): CancelablePromise<GetRunResults1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/annotations/infospaces/{infospace_id}/annotations/run/{run_id}/results',
            path: {
                infospace_id: data.infospaceId,
                run_id: data.runId
            },
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Retry Single Annotation
     * Retries a single failed annotation synchronously.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.annotationId
     * @param data.requestBody
     * @returns AnnotationRead Successful Response
     * @throws ApiError
     */
    public static retrySingleAnnotation(data: RetrySingleAnnotationData): CancelablePromise<RetrySingleAnnotationResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/annotations/infospaces/{infospace_id}/annotations/{annotation_id}/retry',
            path: {
                infospace_id: data.infospaceId,
                annotation_id: data.annotationId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Retry Single Annotation
     * Retries a single failed annotation synchronously.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.annotationId
     * @param data.requestBody
     * @returns AnnotationRead Successful Response
     * @throws ApiError
     */
    public static retrySingleAnnotation1(data: RetrySingleAnnotation1Data): CancelablePromise<RetrySingleAnnotation1Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/annotations/infospaces/{infospace_id}/annotations/{annotation_id}/retry',
            path: {
                infospace_id: data.infospaceId,
                annotation_id: data.annotationId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class AnnotationSchemasService {
    /**
     * Create Annotation Schema
     * Create a new Annotation Schema.
     * @param data The data for the request.
     * @param data.infospaceId The ID of the infospace
     * @param data.requestBody
     * @returns AnnotationSchemaRead Successful Response
     * @throws ApiError
     */
    public static createAnnotationSchema(data: CreateAnnotationSchemaData): CancelablePromise<CreateAnnotationSchemaResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/infospaces/{infospace_id}/annotation_schemas/',
            path: {
                infospace_id: data.infospaceId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List Annotation Schemas
     * Retrieve Annotation Schemas for the infospace.
     * @param data The data for the request.
     * @param data.infospaceId The ID of the infospace
     * @param data.skip
     * @param data.limit
     * @param data.includeCounts Include counts of annotations using this schema
     * @param data.includeArchived Include archived (inactive) schemas
     * @returns AnnotationSchemasOut Successful Response
     * @throws ApiError
     */
    public static listAnnotationSchemas(data: ListAnnotationSchemasData): CancelablePromise<ListAnnotationSchemasResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/infospaces/{infospace_id}/annotation_schemas/',
            path: {
                infospace_id: data.infospaceId
            },
            query: {
                skip: data.skip,
                limit: data.limit,
                include_counts: data.includeCounts,
                include_archived: data.includeArchived
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Annotation Schema
     * Create a new Annotation Schema.
     * @param data The data for the request.
     * @param data.infospaceId The ID of the infospace
     * @param data.requestBody
     * @returns AnnotationSchemaRead Successful Response
     * @throws ApiError
     */
    public static createAnnotationSchema1(data: CreateAnnotationSchema1Data): CancelablePromise<CreateAnnotationSchema1Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/infospaces/{infospace_id}/annotation_schemas',
            path: {
                infospace_id: data.infospaceId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List Annotation Schemas
     * Retrieve Annotation Schemas for the infospace.
     * @param data The data for the request.
     * @param data.infospaceId The ID of the infospace
     * @param data.skip
     * @param data.limit
     * @param data.includeCounts Include counts of annotations using this schema
     * @param data.includeArchived Include archived (inactive) schemas
     * @returns AnnotationSchemasOut Successful Response
     * @throws ApiError
     */
    public static listAnnotationSchemas1(data: ListAnnotationSchemas1Data): CancelablePromise<ListAnnotationSchemas1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/infospaces/{infospace_id}/annotation_schemas',
            path: {
                infospace_id: data.infospaceId
            },
            query: {
                skip: data.skip,
                limit: data.limit,
                include_counts: data.includeCounts,
                include_archived: data.includeArchived
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Annotation Schema
     * Retrieve a specific Annotation Schema by its ID.
     * @param data The data for the request.
     * @param data.infospaceId The ID of the infospace
     * @param data.schemaId
     * @param data.includeCounts Include counts of annotations using this schema
     * @returns AnnotationSchemaRead Successful Response
     * @throws ApiError
     */
    public static getAnnotationSchema(data: GetAnnotationSchemaData): CancelablePromise<GetAnnotationSchemaResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/infospaces/{infospace_id}/annotation_schemas/{schema_id}',
            path: {
                infospace_id: data.infospaceId,
                schema_id: data.schemaId
            },
            query: {
                include_counts: data.includeCounts
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Annotation Schema
     * Update an Annotation Schema.
     * @param data The data for the request.
     * @param data.infospaceId The ID of the infospace
     * @param data.schemaId
     * @param data.requestBody
     * @returns AnnotationSchemaRead Successful Response
     * @throws ApiError
     */
    public static updateAnnotationSchema(data: UpdateAnnotationSchemaData): CancelablePromise<UpdateAnnotationSchemaResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/infospaces/{infospace_id}/annotation_schemas/{schema_id}',
            path: {
                infospace_id: data.infospaceId,
                schema_id: data.schemaId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Annotation Schema
     * Archive an annotation schema by setting it to inactive (soft delete).
     * This is a non-destructive operation.
     * @param data The data for the request.
     * @param data.infospaceId The ID of the infospace
     * @param data.schemaId
     * @returns AnnotationSchemaRead Successful Response
     * @throws ApiError
     */
    public static deleteAnnotationSchema(data: DeleteAnnotationSchemaData): CancelablePromise<DeleteAnnotationSchemaResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/infospaces/{infospace_id}/annotation_schemas/{schema_id}',
            path: {
                infospace_id: data.infospaceId,
                schema_id: data.schemaId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Restore Annotation Schema
     * Restores an archived (soft-deleted) annotation schema.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.schemaId
     * @returns AnnotationSchemaRead Successful Response
     * @throws ApiError
     */
    public static restoreAnnotationSchema(data: RestoreAnnotationSchemaData): CancelablePromise<RestoreAnnotationSchemaResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/infospaces/{infospace_id}/annotation_schemas/{schema_id}/restore',
            path: {
                infospace_id: data.infospaceId,
                schema_id: data.schemaId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class AppService {
    /**
     * Readyz
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static readyz(): CancelablePromise<ReadyzResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/healthz/readiness'
        });
    }
    
    /**
     * Liveness
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static liveness(): CancelablePromise<LivenessResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/healthz/liveness'
        });
    }
    
    /**
     * Healthz
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static healthz(): CancelablePromise<HealthzResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/healthz/healthz'
        });
    }
}

export class AssetsService {
    /**
     * Create Asset
     * Generic asset creation endpoint that routes to appropriate specific endpoint.
     *
     * This endpoint maintains backward compatibility while using the new ContentService.
     * Based on the asset data provided, it routes to the appropriate ingestion method:
     * - If source_identifier (URL) is provided: ingest as web content
     * - If text_content is provided: ingest as text
     * - Otherwise: create a basic asset record
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.requestBody
     * @returns AssetRead Successful Response
     * @throws ApiError
     */
    public static createAsset(data: CreateAssetData): CancelablePromise<CreateAssetResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/infospaces/{infospace_id}/assets/',
            path: {
                infospace_id: data.infospaceId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Asset
     * Generic asset creation endpoint that routes to appropriate specific endpoint.
     *
     * This endpoint maintains backward compatibility while using the new ContentService.
     * Based on the asset data provided, it routes to the appropriate ingestion method:
     * - If source_identifier (URL) is provided: ingest as web content
     * - If text_content is provided: ingest as text
     * - Otherwise: create a basic asset record
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.requestBody
     * @returns AssetRead Successful Response
     * @throws ApiError
     */
    public static createAsset1(data: CreateAsset1Data): CancelablePromise<CreateAsset1Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/infospaces/{infospace_id}/assets/',
            path: {
                infospace_id: data.infospaceId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List Assets
     * Retrieve assets for an infospace.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.skip
     * @param data.limit
     * @param data.parentAssetId
     * @returns AssetsOut Successful Response
     * @throws ApiError
     */
    public static listAssets(data: ListAssetsData): CancelablePromise<ListAssetsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/infospaces/{infospace_id}/assets/',
            path: {
                infospace_id: data.infospaceId
            },
            query: {
                skip: data.skip,
                limit: data.limit,
                parent_asset_id: data.parentAssetId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List Assets
     * Retrieve assets for an infospace.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.skip
     * @param data.limit
     * @param data.parentAssetId
     * @returns AssetsOut Successful Response
     * @throws ApiError
     */
    public static listAssets1(data: ListAssets1Data): CancelablePromise<ListAssets1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/infospaces/{infospace_id}/assets/',
            path: {
                infospace_id: data.infospaceId
            },
            query: {
                skip: data.skip,
                limit: data.limit,
                parent_asset_id: data.parentAssetId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Asset
     * Generic asset creation endpoint that routes to appropriate specific endpoint.
     *
     * This endpoint maintains backward compatibility while using the new ContentService.
     * Based on the asset data provided, it routes to the appropriate ingestion method:
     * - If source_identifier (URL) is provided: ingest as web content
     * - If text_content is provided: ingest as text
     * - Otherwise: create a basic asset record
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.requestBody
     * @returns AssetRead Successful Response
     * @throws ApiError
     */
    public static createAsset2(data: CreateAsset2Data): CancelablePromise<CreateAsset2Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/infospaces/{infospace_id}/assets',
            path: {
                infospace_id: data.infospaceId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Asset
     * Generic asset creation endpoint that routes to appropriate specific endpoint.
     *
     * This endpoint maintains backward compatibility while using the new ContentService.
     * Based on the asset data provided, it routes to the appropriate ingestion method:
     * - If source_identifier (URL) is provided: ingest as web content
     * - If text_content is provided: ingest as text
     * - Otherwise: create a basic asset record
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.requestBody
     * @returns AssetRead Successful Response
     * @throws ApiError
     */
    public static createAsset3(data: CreateAsset3Data): CancelablePromise<CreateAsset3Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/infospaces/{infospace_id}/assets',
            path: {
                infospace_id: data.infospaceId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List Assets
     * Retrieve assets for an infospace.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.skip
     * @param data.limit
     * @param data.parentAssetId
     * @returns AssetsOut Successful Response
     * @throws ApiError
     */
    public static listAssets2(data: ListAssets2Data): CancelablePromise<ListAssets2Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/infospaces/{infospace_id}/assets',
            path: {
                infospace_id: data.infospaceId
            },
            query: {
                skip: data.skip,
                limit: data.limit,
                parent_asset_id: data.parentAssetId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List Assets
     * Retrieve assets for an infospace.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.skip
     * @param data.limit
     * @param data.parentAssetId
     * @returns AssetsOut Successful Response
     * @throws ApiError
     */
    public static listAssets3(data: ListAssets3Data): CancelablePromise<ListAssets3Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/infospaces/{infospace_id}/assets',
            path: {
                infospace_id: data.infospaceId
            },
            query: {
                skip: data.skip,
                limit: data.limit,
                parent_asset_id: data.parentAssetId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Upload File
     * Upload a file and create an asset.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.formData
     * @returns AssetRead Successful Response
     * @throws ApiError
     */
    public static uploadFile(data: UploadFileData): CancelablePromise<UploadFileResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/infospaces/{infospace_id}/assets/upload',
            path: {
                infospace_id: data.infospaceId
            },
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Upload File
     * Upload a file and create an asset.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.formData
     * @returns AssetRead Successful Response
     * @throws ApiError
     */
    public static uploadFile1(data: UploadFile1Data): CancelablePromise<UploadFile1Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/infospaces/{infospace_id}/assets/upload',
            path: {
                infospace_id: data.infospaceId
            },
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Ingest Url
     * Ingest content from a URL.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.url
     * @param data.title
     * @param data.scrapeImmediately
     * @returns AssetRead Successful Response
     * @throws ApiError
     */
    public static ingestUrl(data: IngestUrlData): CancelablePromise<IngestUrlResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/infospaces/{infospace_id}/assets/ingest-url',
            path: {
                infospace_id: data.infospaceId
            },
            query: {
                url: data.url,
                title: data.title,
                scrape_immediately: data.scrapeImmediately
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Ingest Url
     * Ingest content from a URL.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.url
     * @param data.title
     * @param data.scrapeImmediately
     * @returns AssetRead Successful Response
     * @throws ApiError
     */
    public static ingestUrl1(data: IngestUrl1Data): CancelablePromise<IngestUrl1Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/infospaces/{infospace_id}/assets/ingest-url',
            path: {
                infospace_id: data.infospaceId
            },
            query: {
                url: data.url,
                title: data.title,
                scrape_immediately: data.scrapeImmediately
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Ingest Text
     * Ingest direct text content.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.textContent
     * @param data.title
     * @param data.eventTimestamp
     * @returns AssetRead Successful Response
     * @throws ApiError
     */
    public static ingestText(data: IngestTextData): CancelablePromise<IngestTextResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/infospaces/{infospace_id}/assets/ingest-text',
            path: {
                infospace_id: data.infospaceId
            },
            query: {
                text_content: data.textContent,
                title: data.title,
                event_timestamp: data.eventTimestamp
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Ingest Text
     * Ingest direct text content.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.textContent
     * @param data.title
     * @param data.eventTimestamp
     * @returns AssetRead Successful Response
     * @throws ApiError
     */
    public static ingestText1(data: IngestText1Data): CancelablePromise<IngestText1Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/infospaces/{infospace_id}/assets/ingest-text',
            path: {
                infospace_id: data.infospaceId
            },
            query: {
                text_content: data.textContent,
                title: data.title,
                event_timestamp: data.eventTimestamp
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Compose Article
     * Compose a free-form article with embedded assets and bundle references.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.requestBody
     * @returns AssetRead Successful Response
     * @throws ApiError
     */
    public static composeArticle(data: ComposeArticleData): CancelablePromise<ComposeArticleResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/infospaces/{infospace_id}/assets/compose-article',
            path: {
                infospace_id: data.infospaceId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Compose Article
     * Compose a free-form article with embedded assets and bundle references.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.requestBody
     * @returns AssetRead Successful Response
     * @throws ApiError
     */
    public static composeArticle1(data: ComposeArticle1Data): CancelablePromise<ComposeArticle1Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/infospaces/{infospace_id}/assets/compose-article',
            path: {
                infospace_id: data.infospaceId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Bulk Ingest Urls
     * Ingest multiple URLs as separate assets.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.requestBody
     * @returns AssetRead Successful Response
     * @throws ApiError
     */
    public static bulkIngestUrls(data: BulkIngestUrlsData): CancelablePromise<BulkIngestUrlsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/infospaces/{infospace_id}/assets/bulk-ingest-urls',
            path: {
                infospace_id: data.infospaceId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Bulk Ingest Urls
     * Ingest multiple URLs as separate assets.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.requestBody
     * @returns AssetRead Successful Response
     * @throws ApiError
     */
    public static bulkIngestUrls1(data: BulkIngestUrls1Data): CancelablePromise<BulkIngestUrls1Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/infospaces/{infospace_id}/assets/bulk-ingest-urls',
            path: {
                infospace_id: data.infospaceId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Reprocess Asset
     * Reprocess an asset with new options.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.assetId
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static reprocessAsset(data: ReprocessAssetData): CancelablePromise<ReprocessAssetResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/infospaces/{infospace_id}/assets/{asset_id}/reprocess',
            path: {
                infospace_id: data.infospaceId,
                asset_id: data.assetId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Reprocess Asset
     * Reprocess an asset with new options.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.assetId
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static reprocessAsset1(data: ReprocessAsset1Data): CancelablePromise<ReprocessAsset1Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/infospaces/{infospace_id}/assets/{asset_id}/reprocess',
            path: {
                infospace_id: data.infospaceId,
                asset_id: data.assetId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Discover Rss Feeds
     * Discover RSS feeds from the awesome-rss-feeds repository.
     *
     * Args:
     * country: Country name (e.g., "Australia", "United States") - if None, returns all countries
     * category: Category filter (e.g., "News", "Technology") - if None, returns all categories
     * limit: Maximum number of feeds to return
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.country
     * @param data.category
     * @param data.limit
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static discoverRssFeeds(data: DiscoverRssFeedsData): CancelablePromise<DiscoverRssFeedsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/infospaces/{infospace_id}/assets/discover-rss-feeds',
            path: {
                infospace_id: data.infospaceId
            },
            query: {
                country: data.country,
                category: data.category,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Discover Rss Feeds
     * Discover RSS feeds from the awesome-rss-feeds repository.
     *
     * Args:
     * country: Country name (e.g., "Australia", "United States") - if None, returns all countries
     * category: Category filter (e.g., "News", "Technology") - if None, returns all categories
     * limit: Maximum number of feeds to return
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.country
     * @param data.category
     * @param data.limit
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static discoverRssFeeds1(data: DiscoverRssFeeds1Data): CancelablePromise<DiscoverRssFeeds1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/infospaces/{infospace_id}/assets/discover-rss-feeds',
            path: {
                infospace_id: data.infospaceId
            },
            query: {
                country: data.country,
                category: data.category,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Preview Rss Feed
     * Preview the content of an RSS feed.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.feedUrl
     * @param data.maxItems
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static previewRssFeed(data: PreviewRssFeedData): CancelablePromise<PreviewRssFeedResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/infospaces/{infospace_id}/assets/preview-rss-feed',
            path: {
                infospace_id: data.infospaceId
            },
            query: {
                feed_url: data.feedUrl,
                max_items: data.maxItems
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Preview Rss Feed
     * Preview the content of an RSS feed.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.feedUrl
     * @param data.maxItems
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static previewRssFeed1(data: PreviewRssFeed1Data): CancelablePromise<PreviewRssFeed1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/infospaces/{infospace_id}/assets/preview-rss-feed',
            path: {
                infospace_id: data.infospaceId
            },
            query: {
                feed_url: data.feedUrl,
                max_items: data.maxItems
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Rss Source
     * Create a new Source of kind 'rss' and optionally set up a monitor for it.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.requestBody
     * @returns SourceRead Successful Response
     * @throws ApiError
     */
    public static createRssSource(data: CreateRssSourceData): CancelablePromise<CreateRssSourceResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/infospaces/{infospace_id}/assets/create-rss-source',
            path: {
                infospace_id: data.infospaceId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Rss Source
     * Create a new Source of kind 'rss' and optionally set up a monitor for it.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.requestBody
     * @returns SourceRead Successful Response
     * @throws ApiError
     */
    public static createRssSource1(data: CreateRssSource1Data): CancelablePromise<CreateRssSource1Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/infospaces/{infospace_id}/assets/create-rss-source',
            path: {
                infospace_id: data.infospaceId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Ingest Selected Articles
     * Ingest selected articles from an RSS feed preview.
     *
     * Args:
     * feed_url: URL of the RSS feed
     * selected_articles: List of article objects with at least 'link' and 'title'
     * bundle_id: Optional bundle to add articles to
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.feedUrl
     * @param data.requestBody
     * @param data.bundleId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static ingestSelectedArticles(data: IngestSelectedArticlesData): CancelablePromise<IngestSelectedArticlesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/infospaces/{infospace_id}/assets/ingest-selected-articles',
            path: {
                infospace_id: data.infospaceId
            },
            query: {
                feed_url: data.feedUrl,
                bundle_id: data.bundleId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Ingest Selected Articles
     * Ingest selected articles from an RSS feed preview.
     *
     * Args:
     * feed_url: URL of the RSS feed
     * selected_articles: List of article objects with at least 'link' and 'title'
     * bundle_id: Optional bundle to add articles to
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.feedUrl
     * @param data.requestBody
     * @param data.bundleId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static ingestSelectedArticles1(data: IngestSelectedArticles1Data): CancelablePromise<IngestSelectedArticles1Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/infospaces/{infospace_id}/assets/ingest-selected-articles',
            path: {
                infospace_id: data.infospaceId
            },
            query: {
                feed_url: data.feedUrl,
                bundle_id: data.bundleId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Asset
     * Get a specific asset.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.assetId
     * @returns AssetRead Successful Response
     * @throws ApiError
     */
    public static getAsset(data: GetAssetData): CancelablePromise<GetAssetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/infospaces/{infospace_id}/assets/{asset_id}',
            path: {
                infospace_id: data.infospaceId,
                asset_id: data.assetId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Asset
     * Get a specific asset.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.assetId
     * @returns AssetRead Successful Response
     * @throws ApiError
     */
    public static getAsset1(data: GetAsset1Data): CancelablePromise<GetAsset1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/infospaces/{infospace_id}/assets/{asset_id}',
            path: {
                infospace_id: data.infospaceId,
                asset_id: data.assetId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Asset
     * Update an asset.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.assetId
     * @param data.requestBody
     * @returns AssetRead Successful Response
     * @throws ApiError
     */
    public static updateAsset(data: UpdateAssetData): CancelablePromise<UpdateAssetResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/infospaces/{infospace_id}/assets/{asset_id}',
            path: {
                infospace_id: data.infospaceId,
                asset_id: data.assetId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Asset
     * Update an asset.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.assetId
     * @param data.requestBody
     * @returns AssetRead Successful Response
     * @throws ApiError
     */
    public static updateAsset1(data: UpdateAsset1Data): CancelablePromise<UpdateAsset1Response> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/infospaces/{infospace_id}/assets/{asset_id}',
            path: {
                infospace_id: data.infospaceId,
                asset_id: data.assetId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Asset
     * Delete an asset and its children.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.assetId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteAsset(data: DeleteAssetData): CancelablePromise<DeleteAssetResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/infospaces/{infospace_id}/assets/{asset_id}',
            path: {
                infospace_id: data.infospaceId,
                asset_id: data.assetId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Asset
     * Delete an asset and its children.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.assetId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteAsset1(data: DeleteAsset1Data): CancelablePromise<DeleteAsset1Response> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/infospaces/{infospace_id}/assets/{asset_id}',
            path: {
                infospace_id: data.infospaceId,
                asset_id: data.assetId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Asset Children
     * Get child assets of a specific asset.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.assetId
     * @param data.skip
     * @param data.limit
     * @returns AssetRead Successful Response
     * @throws ApiError
     */
    public static getAssetChildren(data: GetAssetChildrenData): CancelablePromise<GetAssetChildrenResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/infospaces/{infospace_id}/assets/{asset_id}/children',
            path: {
                infospace_id: data.infospaceId,
                asset_id: data.assetId
            },
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Asset Children
     * Get child assets of a specific asset.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.assetId
     * @param data.skip
     * @param data.limit
     * @returns AssetRead Successful Response
     * @throws ApiError
     */
    public static getAssetChildren1(data: GetAssetChildren1Data): CancelablePromise<GetAssetChildren1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/infospaces/{infospace_id}/assets/{asset_id}/children',
            path: {
                infospace_id: data.infospaceId,
                asset_id: data.assetId
            },
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Supported Content Types
     * Get list of supported content types.
     * @returns string Successful Response
     * @throws ApiError
     */
    public static getSupportedContentTypes(): CancelablePromise<GetSupportedContentTypesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/infospaces/{infospace_id}/assets/supported-types'
        });
    }
    
    /**
     * Get Supported Content Types
     * Get list of supported content types.
     * @returns string Successful Response
     * @throws ApiError
     */
    public static getSupportedContentTypes1(): CancelablePromise<GetSupportedContentTypes1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/infospaces/{infospace_id}/assets/supported-types'
        });
    }
    
    /**
     * Create Assets Background Bulk
     * Upload multiple files as individual assets using background processing.
     * Returns task IDs for progress tracking.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.formData
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static createAssetsBackgroundBulk(data: CreateAssetsBackgroundBulkData): CancelablePromise<CreateAssetsBackgroundBulkResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/infospaces/{infospace_id}/assets/bulk-upload-background',
            path: {
                infospace_id: data.infospaceId
            },
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Assets Background Bulk
     * Upload multiple files as individual assets using background processing.
     * Returns task IDs for progress tracking.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.formData
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static createAssetsBackgroundBulk1(data: CreateAssetsBackgroundBulk1Data): CancelablePromise<CreateAssetsBackgroundBulk1Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/infospaces/{infospace_id}/assets/bulk-upload-background',
            path: {
                infospace_id: data.infospaceId
            },
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Assets Background Urls
     * Ingest multiple URLs using background processing.
     * Returns task ID for progress tracking.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static createAssetsBackgroundUrls(data: CreateAssetsBackgroundUrlsData): CancelablePromise<CreateAssetsBackgroundUrlsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/infospaces/{infospace_id}/assets/bulk-urls-background',
            path: {
                infospace_id: data.infospaceId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Assets Background Urls
     * Ingest multiple URLs using background processing.
     * Returns task ID for progress tracking.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static createAssetsBackgroundUrls1(data: CreateAssetsBackgroundUrls1Data): CancelablePromise<CreateAssetsBackgroundUrls1Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/infospaces/{infospace_id}/assets/bulk-urls-background',
            path: {
                infospace_id: data.infospaceId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Add Files To Bundle Background
     * Add files to existing bundle using background processing.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.bundleId
     * @param data.formData
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static addFilesToBundleBackground(data: AddFilesToBundleBackgroundData): CancelablePromise<AddFilesToBundleBackgroundResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/infospaces/{infospace_id}/assets/bundles/{bundle_id}/add-files-background',
            path: {
                infospace_id: data.infospaceId,
                bundle_id: data.bundleId
            },
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Add Files To Bundle Background
     * Add files to existing bundle using background processing.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.bundleId
     * @param data.formData
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static addFilesToBundleBackground1(data: AddFilesToBundleBackground1Data): CancelablePromise<AddFilesToBundleBackground1Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/infospaces/{infospace_id}/assets/bundles/{bundle_id}/add-files-background',
            path: {
                infospace_id: data.infospaceId,
                bundle_id: data.bundleId
            },
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Task Status
     * Get the status of a background task.
     * @param data The data for the request.
     * @param data.taskId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getTaskStatus(data: GetTaskStatusData): CancelablePromise<GetTaskStatusResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/infospaces/{infospace_id}/assets/tasks/{task_id}/status',
            path: {
                task_id: data.taskId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Task Status
     * Get the status of a background task.
     * @param data The data for the request.
     * @param data.taskId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getTaskStatus1(data: GetTaskStatus1Data): CancelablePromise<GetTaskStatus1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/infospaces/{infospace_id}/assets/tasks/{task_id}/status',
            path: {
                task_id: data.taskId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Ingest Rss Feeds From Awesome
     * Discover and ingest RSS feeds from the awesome-rss-feeds repository.
     *
     * This endpoint will:
     * 1. Fetch RSS feeds from the specified country
     * 2. Optionally filter by category
     * 3. Ingest the feeds and their content
     * 4. Optionally add to a bundle
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.requestBody
     * @returns AssetRead Successful Response
     * @throws ApiError
     */
    public static ingestRssFeedsFromAwesome(data: IngestRssFeedsFromAwesomeData): CancelablePromise<IngestRssFeedsFromAwesomeResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/infospaces/{infospace_id}/assets/ingest-rss-feeds-from-awesome',
            path: {
                infospace_id: data.infospaceId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Ingest Rss Feeds From Awesome
     * Discover and ingest RSS feeds from the awesome-rss-feeds repository.
     *
     * This endpoint will:
     * 1. Fetch RSS feeds from the specified country
     * 2. Optionally filter by category
     * 3. Ingest the feeds and their content
     * 4. Optionally add to a bundle
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.requestBody
     * @returns AssetRead Successful Response
     * @throws ApiError
     */
    public static ingestRssFeedsFromAwesome1(data: IngestRssFeedsFromAwesome1Data): CancelablePromise<IngestRssFeedsFromAwesome1Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/infospaces/{infospace_id}/assets/ingest-rss-feeds-from-awesome',
            path: {
                infospace_id: data.infospaceId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class BackupsService {
    /**
     * Create Backup
     * Create a new backup of an infospace.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.requestBody
     * @returns InfospaceBackupRead Successful Response
     * @throws ApiError
     */
    public static createBackup(data: CreateBackupData): CancelablePromise<CreateBackupResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/infospaces/{infospace_id}/backups',
            path: {
                infospace_id: data.infospaceId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List Backups
     * List backups for an infospace.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.skip
     * @param data.limit
     * @returns InfospaceBackupsOut Successful Response
     * @throws ApiError
     */
    public static listBackups(data: ListBackupsData): CancelablePromise<ListBackupsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/infospaces/{infospace_id}/backups',
            path: {
                infospace_id: data.infospaceId
            },
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List All User Backups
     * List all backups for a user across all infospaces.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns InfospaceBackupsOut Successful Response
     * @throws ApiError
     */
    public static listAllUserBackups(data: ListAllUserBackupsData = {}): CancelablePromise<ListAllUserBackupsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/backups',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Backup
     * Get a specific backup by ID.
     * @param data The data for the request.
     * @param data.backupId
     * @returns InfospaceBackupRead Successful Response
     * @throws ApiError
     */
    public static getBackup(data: GetBackupData): CancelablePromise<GetBackupResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/backups/{backup_id}',
            path: {
                backup_id: data.backupId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Backup
     * Update backup metadata.
     * @param data The data for the request.
     * @param data.backupId
     * @param data.requestBody
     * @returns InfospaceBackupRead Successful Response
     * @throws ApiError
     */
    public static updateBackup(data: UpdateBackupData): CancelablePromise<UpdateBackupResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/backups/{backup_id}',
            path: {
                backup_id: data.backupId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Backup
     * Delete a backup and its associated file.
     * @param data The data for the request.
     * @param data.backupId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteBackup(data: DeleteBackupData): CancelablePromise<DeleteBackupResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/backups/{backup_id}',
            path: {
                backup_id: data.backupId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Restore Backup
     * Restore an infospace from a backup.
     * @param data The data for the request.
     * @param data.backupId
     * @param data.requestBody
     * @returns InfospaceRead Successful Response
     * @throws ApiError
     */
    public static restoreBackup(data: RestoreBackupData): CancelablePromise<RestoreBackupResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/backups/{backup_id}/restore',
            path: {
                backup_id: data.backupId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Backup Share Link
     * Create a shareable link for a backup.
     * @param data The data for the request.
     * @param data.backupId
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static createBackupShareLink(data: CreateBackupShareLinkData): CancelablePromise<CreateBackupShareLinkResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/backups/{backup_id}/share',
            path: {
                backup_id: data.backupId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Download Shared Backup
     * Download a backup using a share token.
     * @param data The data for the request.
     * @param data.shareToken
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static downloadSharedBackup(data: DownloadSharedBackupData): CancelablePromise<DownloadSharedBackupResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/backups/download/{share_token}',
            path: {
                share_token: data.shareToken
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Cleanup Expired Backups
     * Manually trigger cleanup of expired backups (admin function).
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static cleanupExpiredBackups(): CancelablePromise<CleanupExpiredBackupsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/backups/cleanup'
        });
    }
    
    /**
     * Get Infospaces Backup Overview
     * Admin endpoint: Get overview of all infospaces with backup status.
     * @param data The data for the request.
     * @param data.limit
     * @param data.skip
     * @param data.search Search infospace names or user emails
     * @param data.userId Filter by specific user ID
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getInfospacesBackupOverview(data: GetInfospacesBackupOverviewData = {}): CancelablePromise<GetInfospacesBackupOverviewResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/backups/admin/infospaces-overview',
            query: {
                limit: data.limit,
                skip: data.skip,
                search: data.search,
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Trigger Backup All Infospaces
     * Admin endpoint: Trigger backup creation for all infospaces.
     * @param data The data for the request.
     * @param data.backupType
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static triggerBackupAllInfospaces(data: TriggerBackupAllInfospacesData = {}): CancelablePromise<TriggerBackupAllInfospacesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/backups/admin/backup-all',
            query: {
                backup_type: data.backupType
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Trigger Backup Specific Infospaces
     * Admin endpoint: Trigger backup creation for specific infospaces.
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.backupType
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static triggerBackupSpecificInfospaces(data: TriggerBackupSpecificInfospacesData): CancelablePromise<TriggerBackupSpecificInfospacesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/backups/admin/backup-specific',
            query: {
                backup_type: data.backupType
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class BundlesService {
    /**
     * Create Bundle
     * Create a new bundle in an infospace.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.requestBody
     * @returns BundleRead Successful Response
     * @throws ApiError
     */
    public static createBundle(data: CreateBundleData): CancelablePromise<CreateBundleResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/bundles/infospaces/{infospace_id}/bundles',
            path: {
                infospace_id: data.infospaceId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Bundles
     * Get bundles for an infospace.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.skip
     * @param data.limit
     * @returns BundleRead Successful Response
     * @throws ApiError
     */
    public static getBundles(data: GetBundlesData): CancelablePromise<GetBundlesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/bundles/infospaces/{infospace_id}/bundles',
            path: {
                infospace_id: data.infospaceId
            },
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Bundle
     * Get a bundle by ID.
     * @param data The data for the request.
     * @param data.bundleId
     * @returns BundleRead Successful Response
     * @throws ApiError
     */
    public static getBundle(data: GetBundleData): CancelablePromise<GetBundleResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/bundles/bundles/{bundle_id}',
            path: {
                bundle_id: data.bundleId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Bundle
     * Update a bundle.
     * @param data The data for the request.
     * @param data.bundleId
     * @param data.requestBody
     * @returns BundleRead Successful Response
     * @throws ApiError
     */
    public static updateBundle(data: UpdateBundleData): CancelablePromise<UpdateBundleResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/bundles/bundles/{bundle_id}',
            path: {
                bundle_id: data.bundleId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Bundle
     * Delete a bundle.
     * @param data The data for the request.
     * @param data.bundleId
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deleteBundle(data: DeleteBundleData): CancelablePromise<DeleteBundleResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/bundles/bundles/{bundle_id}',
            path: {
                bundle_id: data.bundleId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Add Asset To Bundle
     * Add an existing asset to a bundle by ID.
     * @param data The data for the request.
     * @param data.bundleId
     * @param data.assetId
     * @returns BundleRead Successful Response
     * @throws ApiError
     */
    public static addAssetToBundle(data: AddAssetToBundleData): CancelablePromise<AddAssetToBundleResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/bundles/bundles/{bundle_id}/assets/{asset_id}',
            path: {
                bundle_id: data.bundleId,
                asset_id: data.assetId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Remove Asset From Bundle
     * Remove an asset from a bundle by ID.
     * @param data The data for the request.
     * @param data.bundleId
     * @param data.assetId
     * @returns BundleRead Successful Response
     * @throws ApiError
     */
    public static removeAssetFromBundle(data: RemoveAssetFromBundleData): CancelablePromise<RemoveAssetFromBundleResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/bundles/bundles/{bundle_id}/assets/{asset_id}',
            path: {
                bundle_id: data.bundleId,
                asset_id: data.assetId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Assets In Bundle
     * Get all assets within a specific bundle.
     * @param data The data for the request.
     * @param data.bundleId
     * @param data.infospaceId
     * @param data.skip
     * @param data.limit
     * @returns AssetRead Successful Response
     * @throws ApiError
     */
    public static getAssetsInBundle(data: GetAssetsInBundleData): CancelablePromise<GetAssetsInBundleResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/bundles/infospaces/{infospace_id}/bundles/{bundle_id}/assets',
            path: {
                bundle_id: data.bundleId,
                infospace_id: data.infospaceId
            },
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Asset
     * Get an asset by ID.
     * @param data The data for the request.
     * @param data.assetId
     * @returns AssetRead Successful Response
     * @throws ApiError
     */
    public static getAsset(data: GetAssetData): CancelablePromise<GetAssetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/bundles/assets/{asset_id}',
            path: {
                asset_id: data.assetId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Transfer Bundle
     * Transfer a bundle to another infospace.
     * @param data The data for the request.
     * @param data.bundleId
     * @param data.targetInfospaceId
     * @param data.copy
     * @returns BundleRead Successful Response
     * @throws ApiError
     */
    public static transferBundle(data: TransferBundleData): CancelablePromise<TransferBundleResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/bundles/bundles/{bundle_id}/transfer',
            path: {
                bundle_id: data.bundleId
            },
            query: {
                target_infospace_id: data.targetInfospaceId,
                copy: data.copy
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class ChunkingService {
    /**
     * Chunk Single Asset
     * Chunk a single asset into text chunks.
     * @param data The data for the request.
     * @param data.assetId
     * @param data.requestBody
     * @returns ChunkingResultResponse Successful Response
     * @throws ApiError
     */
    public static chunkSingleAsset(data: ChunkSingleAssetData): CancelablePromise<ChunkSingleAssetResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/chunking/assets/{asset_id}/chunk',
            path: {
                asset_id: data.assetId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Chunk Multiple Assets
     * Chunk multiple assets based on filters.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static chunkMultipleAssets(data: ChunkMultipleAssetsData): CancelablePromise<ChunkMultipleAssetsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/chunking/assets/chunk-batch',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Asset Chunks
     * Get all chunks for a specific asset.
     * @param data The data for the request.
     * @param data.assetId
     * @returns AssetChunkRead Successful Response
     * @throws ApiError
     */
    public static getAssetChunks(data: GetAssetChunksData): CancelablePromise<GetAssetChunksResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/chunking/assets/{asset_id}/chunks',
            path: {
                asset_id: data.assetId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Remove Asset Chunks
     * Remove all chunks for an asset.
     * @param data The data for the request.
     * @param data.assetId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static removeAssetChunks(data: RemoveAssetChunksData): CancelablePromise<RemoveAssetChunksResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/chunking/assets/{asset_id}/chunks',
            path: {
                asset_id: data.assetId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Chunking Statistics
     * Get chunking statistics.
     * @param data The data for the request.
     * @param data.assetId Filter by specific asset
     * @param data.infospaceId Filter by infospace
     * @returns ChunkingStatsResponse Successful Response
     * @throws ApiError
     */
    public static getChunkingStatistics(data: GetChunkingStatisticsData = {}): CancelablePromise<GetChunkingStatisticsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/chunking/stats',
            query: {
                asset_id: data.assetId,
                infospace_id: data.infospaceId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class DatasetsService {
    /**
     * Create Dataset
     * Create a new dataset within a specific infospace.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.requestBody
     * @returns DatasetRead Successful Response
     * @throws ApiError
     */
    public static createDataset(data: CreateDatasetData): CancelablePromise<CreateDatasetResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/infospaces/{infospace_id}/datasets/',
            path: {
                infospace_id: data.infospaceId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List Datasets
     * Retrieve datasets within a specific infospace.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.skip
     * @param data.limit
     * @returns DatasetsOut Successful Response
     * @throws ApiError
     */
    public static listDatasets(data: ListDatasetsData): CancelablePromise<ListDatasetsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/infospaces/{infospace_id}/datasets/',
            path: {
                infospace_id: data.infospaceId
            },
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Dataset
     * Create a new dataset within a specific infospace.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.requestBody
     * @returns DatasetRead Successful Response
     * @throws ApiError
     */
    public static createDataset1(data: CreateDataset1Data): CancelablePromise<CreateDataset1Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/infospaces/{infospace_id}/datasets',
            path: {
                infospace_id: data.infospaceId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List Datasets
     * Retrieve datasets within a specific infospace.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.skip
     * @param data.limit
     * @returns DatasetsOut Successful Response
     * @throws ApiError
     */
    public static listDatasets1(data: ListDatasets1Data): CancelablePromise<ListDatasets1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/infospaces/{infospace_id}/datasets',
            path: {
                infospace_id: data.infospaceId
            },
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Dataset
     * Get a specific dataset by ID.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.datasetId
     * @returns DatasetRead Successful Response
     * @throws ApiError
     */
    public static getDataset(data: GetDatasetData): CancelablePromise<GetDatasetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/infospaces/{infospace_id}/datasets/{dataset_id}',
            path: {
                infospace_id: data.infospaceId,
                dataset_id: data.datasetId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Dataset
     * Update a dataset.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.datasetId
     * @param data.requestBody
     * @returns DatasetRead Successful Response
     * @throws ApiError
     */
    public static updateDataset(data: UpdateDatasetData): CancelablePromise<UpdateDatasetResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/infospaces/{infospace_id}/datasets/{dataset_id}',
            path: {
                infospace_id: data.infospaceId,
                dataset_id: data.datasetId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Dataset
     * Delete a dataset.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.datasetId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteDataset(data: DeleteDatasetData): CancelablePromise<DeleteDatasetResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/infospaces/{infospace_id}/datasets/{dataset_id}',
            path: {
                infospace_id: data.infospaceId,
                dataset_id: data.datasetId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Export Dataset
     * Export a specific dataset as a self-contained package (ZIP).
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.datasetId
     * @param data.includeContent Include full text content of data records
     * @param data.includeResults Include associated classification results
     * @param data.includeSourceFiles Include original source files (PDFs, CSVs, etc.)
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static exportDataset(data: ExportDatasetData): CancelablePromise<ExportDatasetResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/infospaces/{infospace_id}/datasets/{dataset_id}/export',
            path: {
                infospace_id: data.infospaceId,
                dataset_id: data.datasetId
            },
            query: {
                include_content: data.includeContent,
                include_results: data.includeResults,
                include_source_files: data.includeSourceFiles
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Import Dataset
     * Import a dataset from an exported Dataset Package file.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.formData
     * @param data.conflictStrategy How to handle conflicts
     * @returns DatasetRead Successful Response
     * @throws ApiError
     */
    public static importDataset(data: ImportDatasetData): CancelablePromise<ImportDatasetResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/infospaces/{infospace_id}/datasets/import',
            path: {
                infospace_id: data.infospaceId
            },
            query: {
                conflict_strategy: data.conflictStrategy
            },
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Import Dataset From Token
     * Import a dataset into the target infospace using a share token.
     * This internally performs an export from the source and then an import.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.shareToken Share token for the dataset
     * @param data.includeContent Include full text content if available
     * @param data.includeResults Include classification results if available
     * @param data.conflictStrategy How to handle conflicts
     * @returns DatasetRead Successful Response
     * @throws ApiError
     */
    public static importDatasetFromToken(data: ImportDatasetFromTokenData): CancelablePromise<ImportDatasetFromTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/infospaces/{infospace_id}/datasets/import_from_token',
            path: {
                infospace_id: data.infospaceId
            },
            query: {
                share_token: data.shareToken,
                include_content: data.includeContent,
                include_results: data.includeResults,
                conflict_strategy: data.conflictStrategy
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class EmbeddingsService {
    /**
     * List Embedding Models
     * List all available embedding models.
     * @param data The data for the request.
     * @param data.activeOnly Only return active models
     * @returns EmbeddingModelRead Successful Response
     * @throws ApiError
     */
    public static listEmbeddingModels(data: ListEmbeddingModelsData = {}): CancelablePromise<ListEmbeddingModelsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/embeddings/models',
            query: {
                active_only: data.activeOnly
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Embedding Model
     * Create a new embedding model.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns EmbeddingModelRead Successful Response
     * @throws ApiError
     */
    public static createEmbeddingModel(data: CreateEmbeddingModelData): CancelablePromise<CreateEmbeddingModelResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/embeddings/models',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Available Models
     * Get available models from the current embedding provider.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getAvailableModels(): CancelablePromise<GetAvailableModelsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/embeddings/models/available'
        });
    }
    
    /**
     * Check Embedding Provider Health
     * Check the health of the embedding provider.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static checkEmbeddingProviderHealth(): CancelablePromise<CheckEmbeddingProviderHealthResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/embeddings/health'
        });
    }
    
    /**
     * Get Embedding Model Stats
     * Get statistics for an embedding model.
     * @param data The data for the request.
     * @param data.modelId
     * @returns EmbeddingStatsResponse Successful Response
     * @throws ApiError
     */
    public static getEmbeddingModelStats(data: GetEmbeddingModelStatsData): CancelablePromise<GetEmbeddingModelStatsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/embeddings/models/{model_id}/stats',
            path: {
                model_id: data.modelId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Generate Embeddings
     * Generate embeddings for a list of asset chunks.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static generateEmbeddings(data: GenerateEmbeddingsData): CancelablePromise<GenerateEmbeddingsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/embeddings/generate',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Similarity Search
     * Perform similarity search using embeddings.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns EmbeddingSearchResponse Successful Response
     * @throws ApiError
     */
    public static similaritySearch(data: SimilaritySearchData): CancelablePromise<SimilaritySearchResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/embeddings/search',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Embed Text
     * Generate embedding for a single text (utility endpoint).
     * @param data The data for the request.
     * @param data.text
     * @param data.modelName
     * @param data.provider
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static embedText(data: EmbedTextData): CancelablePromise<EmbedTextResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/embeddings/embed-text',
            query: {
                text: data.text,
                model_name: data.modelName,
                provider: data.provider
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Test Embedding Provider
     * Test the embedding provider with a sample text.
     * @param data The data for the request.
     * @param data.testText
     * @param data.modelName
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static testEmbeddingProvider(data: TestEmbeddingProviderData = {}): CancelablePromise<TestEmbeddingProviderResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/embeddings/test',
            query: {
                test_text: data.testText,
                model_name: data.modelName
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Deactivate Embedding Model
     * Deactivate an embedding model (soft delete).
     * @param data The data for the request.
     * @param data.modelId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static deactivateEmbeddingModel(data: DeactivateEmbeddingModelData): CancelablePromise<DeactivateEmbeddingModelResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/embeddings/models/{model_id}',
            path: {
                model_id: data.modelId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class EntitiesService {
    /**
     * Get Location Articles
     * @param data The data for the request.
     * @param data.location
     * @param data.skip
     * @param data.limit
     * @param data.searchQuery
     * @param data.searchType
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getLocationArticles(data: GetLocationArticlesData): CancelablePromise<GetLocationArticlesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/entities/{location}/articles',
            path: {
                location: data.location
            },
            query: {
                skip: data.skip,
                limit: data.limit,
                search_query: data.searchQuery,
                search_type: data.searchType
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Geojson View
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static geojsonView(): CancelablePromise<GeojsonViewResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/entities/geojson/'
        });
    }
    
    /**
     * Get Entity Articles
     * @param data The data for the request.
     * @param data.entityName
     * @param data.skip
     * @param data.limit
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getEntityArticles(data: GetEntityArticlesData): CancelablePromise<GetEntityArticlesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/entities/{entity_name}/articles',
            path: {
                entity_name: data.entityName
            },
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Leader Info
     * @param data The data for the request.
     * @param data.state
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getLeaderInfo(data: GetLeaderInfoData): CancelablePromise<GetLeaderInfoResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/entities/leaders/{state}',
            path: {
                state: data.state
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Legislation Data
     * @param data The data for the request.
     * @param data.state
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getLegislationData(data: GetLegislationDataData): CancelablePromise<GetLegislationDataResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/entities/legislation/{state}',
            path: {
                state: data.state
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Econ Data
     * @param data The data for the request.
     * @param data.state
     * @param data.indicators
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getEconData(data: GetEconDataData): CancelablePromise<GetEconDataResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/entities/econ_data/{state}',
            path: {
                state: data.state
            },
            query: {
                indicators: data.indicators
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Leaders
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static updateLeaders(): CancelablePromise<UpdateLeadersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/entities/update_leaders/'
        });
    }
    
    /**
     * Get Tavily Data
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getTavilyData(): CancelablePromise<GetTavilyDataResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/entities/get_articles'
        });
    }
    
    /**
     * Get Entity Score Over Time
     * @param data The data for the request.
     * @param data.entity
     * @param data.scoreType
     * @param data.timeframeFrom
     * @param data.timeframeTo
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getEntityScoreOverTime(data: GetEntityScoreOverTimeData): CancelablePromise<GetEntityScoreOverTimeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/entities/score_over_time/{entity}',
            path: {
                entity: data.entity
            },
            query: {
                score_type: data.scoreType,
                timeframe_from: data.timeframeFrom,
                timeframe_to: data.timeframeTo
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Top Entities By Score
     * @param data The data for the request.
     * @param data.scoreType Type of score to rank entities by
     * @param data.timeframeFrom Start date in ISO format
     * @param data.timeframeTo End date in ISO format
     * @param data.limit Number of top entities to retrieve
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getTopEntitiesByScore(data: GetTopEntitiesByScoreData): CancelablePromise<GetTopEntitiesByScoreResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/entities/top_entities_by_score',
            query: {
                score_type: data.scoreType,
                timeframe_from: data.timeframeFrom,
                timeframe_to: data.timeframeTo,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class FilesService {
    /**
     * File Upload
     * Upload a file to the configured storage provider.
     * Expects form-data with a file.
     * Generates a unique object name based on user ID and filename.
     * @param data The data for the request.
     * @param data.formData
     * @returns FileUploadResponse Successful Response
     * @throws ApiError
     */
    public static fileUpload(data: FileUploadData): CancelablePromise<FileUploadResponse2> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/files/upload',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                401: 'Unauthorized',
                422: 'Validation Error',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * File Download
     * Download a file from the storage provider.
     * Expects query parameter 'file_path' (the object name).
     * The file is saved temporarily and a background task deletes the temp file.
     * @param data The data for the request.
     * @param data.filePath
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static fileDownload(data: FileDownloadData): CancelablePromise<FileDownloadResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/files/download',
            query: {
                file_path: data.filePath
            },
            errors: {
                401: 'Unauthorized',
                404: 'Not Found',
                422: 'Validation Error',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * List Files
     * List files in the storage provider with user authorization.
     * Users can only list files in their own directory.
     * @param data The data for the request.
     * @param data.prefix
     * @param data.maxKeys
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static listFiles(data: ListFilesData = {}): CancelablePromise<ListFilesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/files/list',
            query: {
                prefix: data.prefix,
                max_keys: data.maxKeys
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete File
     * Delete a file with proper authorization checks.
     * Users can only delete files in their own directory.
     * @param data The data for the request.
     * @param data.objectName
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static deleteFile(data: DeleteFileData): CancelablePromise<DeleteFileResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/files/delete',
            query: {
                object_name: data.objectName
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Stream File
     * Stream a file directly from storage without creating temporary files.
     * This is more efficient for media files (images, videos, PDFs) that need to be displayed in browsers.
     * @param data The data for the request.
     * @param data.filePath
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static streamFile(data: StreamFileData): CancelablePromise<StreamFileResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/files/stream/{file_path}',
            path: {
                file_path: data.filePath
            },
            errors: {
                401: 'Unauthorized',
                404: 'Not Found',
                422: 'Validation Error',
                500: 'Internal Server Error'
            }
        });
    }
}

export class FilestorageService {
    /**
     * File Upload
     * Upload a file to the configured storage provider.
     * Expects form-data with a file.
     * Generates a unique object name based on user ID and filename.
     * @param data The data for the request.
     * @param data.formData
     * @returns FileUploadResponse Successful Response
     * @throws ApiError
     */
    public static fileUpload(data: FileUploadData): CancelablePromise<FileUploadResponse2> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/files/upload',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                401: 'Unauthorized',
                422: 'Validation Error',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * File Download
     * Download a file from the storage provider.
     * Expects query parameter 'file_path' (the object name).
     * The file is saved temporarily and a background task deletes the temp file.
     * @param data The data for the request.
     * @param data.filePath
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static fileDownload(data: FileDownloadData): CancelablePromise<FileDownloadResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/files/download',
            query: {
                file_path: data.filePath
            },
            errors: {
                401: 'Unauthorized',
                404: 'Not Found',
                422: 'Validation Error',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * List Files
     * List files in the storage provider with user authorization.
     * Users can only list files in their own directory.
     * @param data The data for the request.
     * @param data.prefix
     * @param data.maxKeys
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static listFiles(data: ListFilesData = {}): CancelablePromise<ListFilesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/files/list',
            query: {
                prefix: data.prefix,
                max_keys: data.maxKeys
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete File
     * Delete a file with proper authorization checks.
     * Users can only delete files in their own directory.
     * @param data The data for the request.
     * @param data.objectName
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static deleteFile(data: DeleteFileData): CancelablePromise<DeleteFileResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/files/delete',
            query: {
                object_name: data.objectName
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Stream File
     * Stream a file directly from storage without creating temporary files.
     * This is more efficient for media files (images, videos, PDFs) that need to be displayed in browsers.
     * @param data The data for the request.
     * @param data.filePath
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static streamFile(data: StreamFileData): CancelablePromise<StreamFileResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/files/stream/{file_path}',
            path: {
                file_path: data.filePath
            },
            errors: {
                401: 'Unauthorized',
                404: 'Not Found',
                422: 'Validation Error',
                500: 'Internal Server Error'
            }
        });
    }
}

export class FiltersService {
    /**
     * Save Filter
     * Save a reusable filter definition.
     * @param data The data for the request.
     * @param data.filterName
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static saveFilter(data: SaveFilterData): CancelablePromise<SaveFilterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/filters/filters',
            query: {
                filter_name: data.filterName
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List Filters
     * List all saved filter names.
     * @returns string Successful Response
     * @throws ApiError
     */
    public static listFilters(): CancelablePromise<ListFiltersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/filters/filters'
        });
    }
    
    /**
     * Get Filter
     * Get a saved filter definition.
     * @param data The data for the request.
     * @param data.filterName
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getFilter(data: GetFilterData): CancelablePromise<GetFilterResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/filters/filters/{filter_name}',
            path: {
                filter_name: data.filterName
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Filter
     * Delete a saved filter.
     * @param data The data for the request.
     * @param data.filterName
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteFilter(data: DeleteFilterData): CancelablePromise<DeleteFilterResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/filters/filters/{filter_name}',
            path: {
                filter_name: data.filterName
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Test Filter
     * Test a filter against sample data.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static testFilter(data: TestFilterData): CancelablePromise<TestFilterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/filters/filters/test',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Basic Filter Examples
     * Get examples of basic filter configurations.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getBasicFilterExamples(): CancelablePromise<GetBasicFilterExamplesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/filters/filters/examples/basic'
        });
    }
    
    /**
     * Get Advanced Filter Examples
     * Get examples of advanced filter configurations with composition.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getAdvancedFilterExamples(): CancelablePromise<GetAdvancedFilterExamplesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/filters/filters/examples/advanced'
        });
    }
    
    /**
     * Create Threshold Filter
     * Create a threshold filter using the factory.
     * @param data The data for the request.
     * @param data.field
     * @param data.threshold
     * @param data.operator
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static createThresholdFilter(data: CreateThresholdFilterData): CancelablePromise<CreateThresholdFilterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/filters/filters/factory/threshold',
            query: {
                field: data.field,
                threshold: data.threshold,
                operator: data.operator
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Range Filter
     * Create a range filter using the factory.
     * @param data The data for the request.
     * @param data.field
     * @param data.minValue
     * @param data.maxValue
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static createRangeFilter(data: CreateRangeFilterData): CancelablePromise<CreateRangeFilterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/filters/filters/factory/range',
            query: {
                field: data.field,
                min_value: data.minValue,
                max_value: data.maxValue
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Keyword Filter
     * Create a keyword filter using the factory.
     * @param data The data for the request.
     * @param data.field
     * @param data.requestBody
     * @param data.matchAny
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static createKeywordFilter(data: CreateKeywordFilterData): CancelablePromise<CreateKeywordFilterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/filters/filters/factory/keywords',
            query: {
                field: data.field,
                match_any: data.matchAny
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class InfospacesService {
    /**
     * Create Infospace
     * Create a new Infospace.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns InfospaceRead Successful Response
     * @throws ApiError
     */
    public static createInfospace(data: CreateInfospaceData): CancelablePromise<CreateInfospaceResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/infospaces/infospaces/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List Infospaces
     * Retrieve Infospaces for the current user.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns InfospacesOut Successful Response
     * @throws ApiError
     */
    public static listInfospaces(data: ListInfospacesData = {}): CancelablePromise<ListInfospacesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/infospaces/infospaces/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Infospace
     * Create a new Infospace.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns InfospaceRead Successful Response
     * @throws ApiError
     */
    public static createInfospace1(data: CreateInfospace1Data): CancelablePromise<CreateInfospace1Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/infospaces/infospaces',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List Infospaces
     * Retrieve Infospaces for the current user.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns InfospacesOut Successful Response
     * @throws ApiError
     */
    public static listInfospaces1(data: ListInfospaces1Data = {}): CancelablePromise<ListInfospaces1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/infospaces/infospaces',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Infospace
     * Retrieve a specific Infospace by its ID.
     * @param data The data for the request.
     * @param data.infospaceId
     * @returns InfospaceRead Successful Response
     * @throws ApiError
     */
    public static getInfospace(data: GetInfospaceData): CancelablePromise<GetInfospaceResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/infospaces/infospaces/{infospace_id}',
            path: {
                infospace_id: data.infospaceId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Infospace
     * Update an Infospace.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.requestBody
     * @returns InfospaceRead Successful Response
     * @throws ApiError
     */
    public static updateInfospace(data: UpdateInfospaceData): CancelablePromise<UpdateInfospaceResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/infospaces/infospaces/{infospace_id}',
            path: {
                infospace_id: data.infospaceId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Infospace
     * Delete an Infospace.
     * @param data The data for the request.
     * @param data.infospaceId
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deleteInfospace(data: DeleteInfospaceData): CancelablePromise<DeleteInfospaceResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/infospaces/infospaces/{infospace_id}',
            path: {
                infospace_id: data.infospaceId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Infospace Stats
     * Get statistics about an Infospace.
     * @param data The data for the request.
     * @param data.infospaceId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getInfospaceStats(data: GetInfospaceStatsData): CancelablePromise<GetInfospaceStatsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/infospaces/infospaces/{infospace_id}/stats',
            path: {
                infospace_id: data.infospaceId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Import Infospace
     * Import an Infospace.
     * @param data The data for the request.
     * @param data.infospaceId
     * @returns InfospaceRead Successful Response
     * @throws ApiError
     */
    public static importInfospace(data: ImportInfospaceData): CancelablePromise<ImportInfospaceResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/infospaces/infospaces/import',
            query: {
                infospace_id: data.infospaceId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class IntelligenceChatService {
    /**
     * Intelligence Chat
     * Intelligence analysis chat with tool orchestration.
     *
     * The AI model can search, analyze, and interact with your intelligence data.
     * Example conversation:
     * - User: "What are the main themes in recent political documents?"
     * - AI: *calls search_assets tool* → *analyzes results* → Responds with findings
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ChatResponse Successful Response
     * @throws ApiError
     */
    public static intelligenceChat(data: IntelligenceChatData): CancelablePromise<IntelligenceChatResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/chat/chat',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Execute Tool Call
     * Execute a tool call made by an AI model.
     *
     * This endpoint is used when the AI model wants to interact with the intelligence platform
     * through function calls (search assets, get annotations, etc.).
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static executeToolCall(data: ExecuteToolCallData): CancelablePromise<ExecuteToolCallResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/chat/tools/execute',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List Available Models
     * Discover available language models across all providers.
     *
     * Query parameters:
     * - capability: Filter by capability ('tools', 'streaming', 'thinking', 'multimodal', etc.)
     *
     * Returns all available models from OpenAI, Ollama, Gemini, etc.
     * @param data The data for the request.
     * @param data.capability
     * @returns ModelListResponse Successful Response
     * @throws ApiError
     */
    public static listAvailableModels(data: ListAvailableModelsData = {}): CancelablePromise<ListAvailableModelsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/chat/models',
            query: {
                capability: data.capability
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List Universal Tools
     * List universal intelligence analysis tool definitions.
     *
     * These are the capabilities available to AI models.
     * FastMCP automatically generates schemas from function signatures.
     * @param data The data for the request.
     * @param data.infospaceId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static listUniversalTools(data: ListUniversalToolsData = {}): CancelablePromise<ListUniversalToolsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/chat/tools',
            query: {
                infospace_id: data.infospaceId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Infospace Tool Context
     * Get infospace-specific context for tools (what's actually available).
     *
     * This provides real data about available asset types, schemas, bundles, etc.
     * to help AI models make better tool usage decisions.
     * @param data The data for the request.
     * @param data.infospaceId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getInfospaceToolContext(data: GetInfospaceToolContextData): CancelablePromise<GetInfospaceToolContextResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/chat/tools/context/{infospace_id}',
            path: {
                infospace_id: data.infospaceId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class LocationsService {
    /**
     * Get Location Contents
     * Get articles related to a location with basic pagination.
     * @param data The data for the request.
     * @param data.location
     * @param data.skip
     * @param data.limit
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getLocationContents(data: GetLocationContentsData): CancelablePromise<GetLocationContentsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/locations/{location}/contents',
            path: {
                location: data.location
            },
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Location Entities Contents
     * Get articles related to a location with basic pagination.
     * @param data The data for the request.
     * @param data.location
     * @param data.skip
     * @param data.limit
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getLocationEntitiesContents(data: GetLocationEntitiesContentsData): CancelablePromise<GetLocationEntitiesContentsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/locations/{location}/entities/contents',
            path: {
                location: data.location
            },
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Location From Query
     * @param data The data for the request.
     * @param data.query
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static locationFromQuery(data: LocationFromQueryData): CancelablePromise<LocationFromQueryResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/locations/location_from_query',
            query: {
                query: data.query
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Geojson View
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static geojsonView(): CancelablePromise<GeojsonViewResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/locations/geojson/'
        });
    }
    
    /**
     * Geojson Events View
     * @param data The data for the request.
     * @param data.eventType
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static geojsonEventsView(data: GeojsonEventsViewData): CancelablePromise<GeojsonEventsViewResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/locations/geojson_events',
            query: {
                event_type: data.eventType
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Dashboard View
     * @returns string Successful Response
     * @throws ApiError
     */
    public static dashboardView(): CancelablePromise<DashboardViewResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/locations/dashboard'
        });
    }
    
    /**
     * Get Location Entities
     * @param data The data for the request.
     * @param data.locationName
     * @param data.skip
     * @param data.limit
     * @param data.minRelevance
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getLocationEntities(data: GetLocationEntitiesData): CancelablePromise<GetLocationEntitiesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/locations/{location_name}/entities',
            path: {
                location_name: data.locationName
            },
            query: {
                skip: data.skip,
                limit: data.limit,
                min_relevance: data.minRelevance
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Leader Info
     * @param data The data for the request.
     * @param data.state
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getLeaderInfo(data: GetLeaderInfoData): CancelablePromise<GetLeaderInfoResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/locations/leaders/{state}',
            path: {
                state: data.state
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Legislation Data
     * @param data The data for the request.
     * @param data.state
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getLegislationData(data: GetLegislationDataData): CancelablePromise<GetLegislationDataResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/locations/legislation/{state}',
            path: {
                state: data.state
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Econ Data
     * @param data The data for the request.
     * @param data.state
     * @param data.indicators
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getEconData(data: GetEconDataData): CancelablePromise<GetEconDataResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/locations/econ_data/{state}',
            path: {
                state: data.state
            },
            query: {
                indicators: data.indicators
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Leaders
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static updateLeaders(): CancelablePromise<UpdateLeadersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/locations/update_leaders/'
        });
    }
    
    /**
     * Get Tavily Data
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getTavilyData(): CancelablePromise<GetTavilyDataResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/locations/get_articles'
        });
    }
    
    /**
     * Get Coordinates
     * Fetches the coordinates, bounding box, and location type for a given location.
     * @param data The data for the request.
     * @param data.location
     * @param data.language
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getCoordinates(data: GetCoordinatesData): CancelablePromise<GetCoordinatesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/locations/get_coordinates',
            query: {
                location: data.location,
                language: data.language
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Geojson For Article Ids
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getGeojsonForArticleIds(data: GetGeojsonForArticleIdsData): CancelablePromise<GetGeojsonForArticleIdsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/locations/get_geojson_for_article_ids',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Location Metadata
     * Get metadata about a location including supported features
     * @param data The data for the request.
     * @param data.location
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getLocationMetadata(data: GetLocationMetadataData): CancelablePromise<GetLocationMetadataResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/locations/metadata/{location}',
            path: {
                location: data.location
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Channel Route
     * A channel route that forwards requests to a specified service.
     * @param data The data for the request.
     * @param data.serviceName
     * @param data.path
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static channelRoute(data: ChannelRouteData): CancelablePromise<ChannelRouteResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/locations/channel/{service_name}/{path}',
            path: {
                service_name: data.serviceName,
                path: data.path
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class LoginService {
    /**
     * Login Access Token
     * OAuth2 compatible token login, get an access token for future requests
     * @param data The data for the request.
     * @param data.formData
     * @returns Token Successful Response
     * @throws ApiError
     */
    public static loginAccessToken(data: LoginAccessTokenData): CancelablePromise<LoginAccessTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/access-token',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Test Token
     * Test access token
     * @returns UserOut Successful Response
     * @throws ApiError
     */
    public static testToken(): CancelablePromise<TestTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/test-token'
        });
    }
    
    /**
     * Recover Password
     * Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static recoverPassword(data: RecoverPasswordData): CancelablePromise<RecoverPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Reset Password
     * Reset password
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static resetPassword(data: ResetPasswordData): CancelablePromise<ResetPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/reset-password/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Recover Password Html Content
     * HTML Content for Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns string Successful Response
     * @throws ApiError
     */
    public static recoverPasswordHtmlContent(data: RecoverPasswordHtmlContentData): CancelablePromise<RecoverPasswordHtmlContentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery-html-content/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class MonitorsService {
    /**
     * Create Monitor
     * Create a new monitor in an infospace.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.requestBody
     * @returns MonitorRead Successful Response
     * @throws ApiError
     */
    public static createMonitor(data: CreateMonitorData): CancelablePromise<CreateMonitorResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/infospaces/{infospace_id}/monitors',
            path: {
                infospace_id: data.infospaceId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List Monitors
     * List all monitors in an infospace.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.skip
     * @param data.limit
     * @returns MonitorRead Successful Response
     * @throws ApiError
     */
    public static listMonitors(data: ListMonitorsData): CancelablePromise<ListMonitorsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/infospaces/{infospace_id}/monitors',
            path: {
                infospace_id: data.infospaceId
            },
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Monitor
     * Get a specific monitor by ID.
     * @param data The data for the request.
     * @param data.monitorId
     * @returns MonitorRead Successful Response
     * @throws ApiError
     */
    public static getMonitor(data: GetMonitorData): CancelablePromise<GetMonitorResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/monitors/{monitor_id}',
            path: {
                monitor_id: data.monitorId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Monitor
     * Update a monitor.
     * @param data The data for the request.
     * @param data.monitorId
     * @param data.requestBody
     * @returns MonitorRead Successful Response
     * @throws ApiError
     */
    public static updateMonitor(data: UpdateMonitorData): CancelablePromise<UpdateMonitorResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/monitors/{monitor_id}',
            path: {
                monitor_id: data.monitorId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Monitor
     * Delete a monitor.
     * @param data The data for the request.
     * @param data.monitorId
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deleteMonitor(data: DeleteMonitorData): CancelablePromise<DeleteMonitorResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/monitors/{monitor_id}',
            path: {
                monitor_id: data.monitorId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Execute Monitor Manually
     * Manually trigger a monitor to check for new assets and create a run.
     * @param data The data for the request.
     * @param data.monitorId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static executeMonitorManually(data: ExecuteMonitorManuallyData): CancelablePromise<ExecuteMonitorManuallyResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/monitors/{monitor_id}/execute',
            path: {
                monitor_id: data.monitorId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class PipelinesService {
    /**
     * Create Pipeline
     * Create a new Intelligence Pipeline.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.requestBody
     * @returns IntelligencePipelineRead Successful Response
     * @throws ApiError
     */
    public static createPipeline(data: CreatePipelineData): CancelablePromise<CreatePipelineResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/pipelines/infospaces/{infospace_id}/pipelines',
            path: {
                infospace_id: data.infospaceId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List Pipelines
     * List all Intelligence Pipelines in an infospace.
     * @param data The data for the request.
     * @param data.infospaceId
     * @returns IntelligencePipelineRead Successful Response
     * @throws ApiError
     */
    public static listPipelines(data: ListPipelinesData): CancelablePromise<ListPipelinesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/pipelines/infospaces/{infospace_id}/pipelines',
            path: {
                infospace_id: data.infospaceId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Pipeline
     * Get a specific Intelligence Pipeline by ID.
     * @param data The data for the request.
     * @param data.pipelineId
     * @returns IntelligencePipelineRead Successful Response
     * @throws ApiError
     */
    public static getPipeline(data: GetPipelineData): CancelablePromise<GetPipelineResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/pipelines/{pipeline_id}',
            path: {
                pipeline_id: data.pipelineId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Pipeline
     * Update an Intelligence Pipeline.
     * @param data The data for the request.
     * @param data.pipelineId
     * @param data.requestBody
     * @returns IntelligencePipelineRead Successful Response
     * @throws ApiError
     */
    public static updatePipeline(data: UpdatePipelineData): CancelablePromise<UpdatePipelineResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/pipelines/{pipeline_id}',
            path: {
                pipeline_id: data.pipelineId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Pipeline
     * Delete an Intelligence Pipeline.
     * @param data The data for the request.
     * @param data.pipelineId
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deletePipeline(data: DeletePipelineData): CancelablePromise<DeletePipelineResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/pipelines/{pipeline_id}',
            path: {
                pipeline_id: data.pipelineId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Execute Pipeline
     * Manually trigger an Intelligence Pipeline for a specific set of assets.
     * @param data The data for the request.
     * @param data.pipelineId
     * @param data.requestBody
     * @returns PipelineExecutionRead Successful Response
     * @throws ApiError
     */
    public static executePipeline(data: ExecutePipelineData): CancelablePromise<ExecutePipelineResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/pipelines/{pipeline_id}/execute',
            path: {
                pipeline_id: data.pipelineId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class RunsService {
    /**
     * Create Run
     * Create a new Run.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.requestBody
     * @returns AnnotationRunRead Successful Response
     * @throws ApiError
     */
    public static createRun(data: CreateRunData): CancelablePromise<CreateRunResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/annotation_jobs/infospaces/{infospace_id}/runs/',
            path: {
                infospace_id: data.infospaceId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List Runs
     * Retrieve Runs for the infospace.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.skip
     * @param data.limit
     * @param data.includeCounts Include counts of annotations and assets
     * @returns AnnotationRunsOut Successful Response
     * @throws ApiError
     */
    public static listRuns(data: ListRunsData): CancelablePromise<ListRunsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/annotation_jobs/infospaces/{infospace_id}/runs/',
            path: {
                infospace_id: data.infospaceId
            },
            query: {
                skip: data.skip,
                limit: data.limit,
                include_counts: data.includeCounts
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Run
     * Create a new Run.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.requestBody
     * @returns AnnotationRunRead Successful Response
     * @throws ApiError
     */
    public static createRun1(data: CreateRun1Data): CancelablePromise<CreateRun1Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/annotation_jobs/infospaces/{infospace_id}/runs',
            path: {
                infospace_id: data.infospaceId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List Runs
     * Retrieve Runs for the infospace.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.skip
     * @param data.limit
     * @param data.includeCounts Include counts of annotations and assets
     * @returns AnnotationRunsOut Successful Response
     * @throws ApiError
     */
    public static listRuns1(data: ListRuns1Data): CancelablePromise<ListRuns1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/annotation_jobs/infospaces/{infospace_id}/runs',
            path: {
                infospace_id: data.infospaceId
            },
            query: {
                skip: data.skip,
                limit: data.limit,
                include_counts: data.includeCounts
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Run
     * Retrieve a specific Run by its ID.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.runId
     * @param data.includeCounts Include counts of annotations and assets
     * @returns AnnotationRunRead Successful Response
     * @throws ApiError
     */
    public static getRun(data: GetRunData): CancelablePromise<GetRunResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/annotation_jobs/infospaces/{infospace_id}/runs/{run_id}',
            path: {
                infospace_id: data.infospaceId,
                run_id: data.runId
            },
            query: {
                include_counts: data.includeCounts
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Run
     * Update a Run.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.runId
     * @param data.requestBody
     * @returns AnnotationRunRead Successful Response
     * @throws ApiError
     */
    public static updateRun(data: UpdateRunData): CancelablePromise<UpdateRunResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/annotation_jobs/infospaces/{infospace_id}/runs/{run_id}',
            path: {
                infospace_id: data.infospaceId,
                run_id: data.runId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Run
     * Delete a Run.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.runId
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deleteRun(data: DeleteRunData): CancelablePromise<DeleteRunResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/annotation_jobs/infospaces/{infospace_id}/runs/{run_id}',
            path: {
                infospace_id: data.infospaceId,
                run_id: data.runId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Retry Failed Annotations
     * Retry failed annotations in a run.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.runId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static retryFailedAnnotations(data: RetryFailedAnnotationsData): CancelablePromise<RetryFailedAnnotationsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/annotation_jobs/infospaces/{infospace_id}/runs/{run_id}/retry_failures',
            path: {
                infospace_id: data.infospaceId,
                run_id: data.runId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Package From Run Endpoint
     * Create a package from a run.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.runId
     * @param data.requestBody
     * @returns PackageRead Successful Response
     * @throws ApiError
     */
    public static createPackageFromRunEndpoint(data: CreatePackageFromRunEndpointData): CancelablePromise<CreatePackageFromRunEndpointResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/annotation_jobs/infospaces/{infospace_id}/runs/{run_id}/create_package',
            path: {
                infospace_id: data.infospaceId,
                run_id: data.runId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class SearchService {
    /**
     * Search Content
     * Performs a search using the configured search provider (e.g., Tavily)
     * and returns a standardized list of search results.
     * @param data The data for the request.
     * @param data.args
     * @param data.kwargs
     * @param data.requestBody
     * @returns SearchResultsOut Successful Response
     * @throws ApiError
     */
    public static searchContent(data: SearchContentData): CancelablePromise<SearchContentResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/search/',
            query: {
                args: data.args,
                kwargs: data.kwargs
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Search Content
     * Performs a search using the configured search provider (e.g., Tavily)
     * and returns a standardized list of search results.
     * @param data The data for the request.
     * @param data.args
     * @param data.kwargs
     * @param data.requestBody
     * @returns SearchResultsOut Successful Response
     * @throws ApiError
     */
    public static searchContent1(data: SearchContent1Data): CancelablePromise<SearchContent1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/search',
            query: {
                args: data.args,
                kwargs: data.kwargs
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class SharingService {
    /**
     * Create Shareable Link
     * Create a new shareable link for a resource within an infospace.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.requestBody
     * @returns ShareableLinkRead Successful Response
     * @throws ApiError
     */
    public static createShareableLink(data: CreateShareableLinkData): CancelablePromise<CreateShareableLinkResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/sharing/{infospace_id}/links',
            path: {
                infospace_id: data.infospaceId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Shareable Links
     * Get shareable links for the current user, optionally filtered by resource and infospace.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.resourceType
     * @param data.resourceId
     * @returns Paginated Successful Response
     * @throws ApiError
     */
    public static getShareableLinks(data: GetShareableLinksData): CancelablePromise<GetShareableLinksResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/sharing/{infospace_id}/links',
            path: {
                infospace_id: data.infospaceId
            },
            query: {
                resource_type: data.resourceType,
                resource_id: data.resourceId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Shareable Link By Token
     * Get a shareable link by token.
     * @param data The data for the request.
     * @param data.token
     * @returns ShareableLinkRead Successful Response
     * @throws ApiError
     */
    public static getShareableLinkByToken(data: GetShareableLinkByTokenData): CancelablePromise<GetShareableLinkByTokenResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/sharing/links/{token}',
            path: {
                token: data.token
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Shareable Link
     * Update a shareable link by its ID (owner only).
     * @param data The data for the request.
     * @param data.linkId
     * @param data.requestBody
     * @returns ShareableLinkRead Successful Response
     * @throws ApiError
     */
    public static updateShareableLink(data: UpdateShareableLinkData): CancelablePromise<UpdateShareableLinkResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/sharing/links/{link_id}',
            path: {
                link_id: data.linkId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Shareable Link
     * Delete a shareable link by its ID (owner only).
     * @param data The data for the request.
     * @param data.linkId
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deleteShareableLink(data: DeleteShareableLinkData): CancelablePromise<DeleteShareableLinkResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/sharing/links/{link_id}',
            path: {
                link_id: data.linkId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Access Shared Resource
     * Access the resource associated with a shareable link token.
     * @param data The data for the request.
     * @param data.token
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static accessSharedResource(data: AccessSharedResourceData): CancelablePromise<AccessSharedResourceResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/sharing/access/{token}',
            path: {
                token: data.token
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * View Shared Resource
     * Provides a read-only, public view of a shared resource (Asset or Bundle).
     * This endpoint is unauthenticated and relies on the link's validity.
     * @param data The data for the request.
     * @param data.token
     * @returns SharedResourcePreview Successful Response
     * @throws ApiError
     */
    public static viewSharedResource(data: ViewSharedResourceData): CancelablePromise<ViewSharedResourceResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/sharing/view/{token}',
            path: {
                token: data.token
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Sharing Stats
     * Get sharing statistics for the current user within a specific infospace.
     * @param data The data for the request.
     * @param data.infospaceId
     * @returns ShareableLinkStats Successful Response
     * @throws ApiError
     */
    public static getSharingStats(data: GetSharingStatsData): CancelablePromise<GetSharingStatsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/sharing/{infospace_id}/stats',
            path: {
                infospace_id: data.infospaceId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Export Resource
     * Export a resource from a specific infospace to a file.
     * Returns a file download.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.formData
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static exportResource(data: ExportResourceData): CancelablePromise<ExportResourceResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/sharing/{infospace_id}/export',
            path: {
                infospace_id: data.infospaceId
            },
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Import Resource
     * Import a resource from a file into a specific infospace.
     * @param data The data for the request.
     * @param data.targetInfospaceId
     * @param data.formData
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static importResource(data: ImportResourceData): CancelablePromise<ImportResourceResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/sharing/import/{target_infospace_id}',
            path: {
                target_infospace_id: data.targetInfospaceId
            },
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Export Resources Batch
     * Export multiple resources of the same type to a ZIP archive.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.requestBody
     * @returns binary Successful batch export, returns a ZIP archive.
     * @throws ApiError
     */
    public static exportResourcesBatch(data: ExportResourcesBatchData): CancelablePromise<ExportResourcesBatchResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/sharing/export-batch/{infospace_id}',
            path: {
                infospace_id: data.infospaceId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request (e.g., no resource IDs)',
                403: 'Forbidden (e.g., permission denied for one or more resources)',
                422: 'Validation Error',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * Export Mixed Batch
     * Export a mix of assets and bundles to a single ZIP archive.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static exportMixedBatch(data: ExportMixedBatchData): CancelablePromise<ExportMixedBatchResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/sharing/export-mixed-batch/{infospace_id}',
            path: {
                infospace_id: data.infospaceId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Stream Shared Asset File
     * Stream the file blob associated with a publicly shared asset.
     * Access is validated via the share token.
     * @param data The data for the request.
     * @param data.token
     * @param data.assetId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static streamSharedAssetFile(data: StreamSharedAssetFileData): CancelablePromise<StreamSharedAssetFileResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/sharing/stream/{token}/{asset_id}',
            path: {
                token: data.token,
                asset_id: data.assetId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Download Shared Bundle
     * Download all assets within a publicly shared bundle as a ZIP archive.
     * Access is validated via the share token.
     * @param data The data for the request.
     * @param data.token
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static downloadSharedBundle(data: DownloadSharedBundleData): CancelablePromise<DownloadSharedBundleResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/sharing/download-bundle/{token}',
            path: {
                token: data.token
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Download Shared Asset File
     * Download the file blob associated with a publicly shared asset.
     * Access is validated via the share token.
     * @param data The data for the request.
     * @param data.token
     * @param data.assetId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static downloadSharedAssetFile(data: DownloadSharedAssetFileData): CancelablePromise<DownloadSharedAssetFileResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/sharing/download/{token}/{asset_id}',
            path: {
                token: data.token,
                asset_id: data.assetId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * View Dataset Package Summary
     * Get a summary of a shared dataset package using its token.
     * Does not trigger a full download or import of the package data.
     * @param data The data for the request.
     * @param data.token
     * @returns DatasetPackageSummary Successful Response
     * @throws ApiError
     */
    public static viewDatasetPackageSummary(data: ViewDatasetPackageSummaryData): CancelablePromise<ViewDatasetPackageSummaryResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/sharing/view_dataset_package_summary/{token}',
            path: {
                token: data.token
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Import Resource From Token
     * Import a shared resource into the current user's specified infospace.
     * @param data The data for the request.
     * @param data.token
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static importResourceFromToken(data: ImportResourceFromTokenData): CancelablePromise<ImportResourceFromTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/sharing/import-from-token/{token}',
            path: {
                token: data.token
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class SourcesService {
    /**
     * Create Source
     * Create a new source. If monitoring is enabled, a corresponding ingestion task
     * and a destination bundle will also be created.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.requestBody
     * @returns SourceRead Successful Response
     * @throws ApiError
     */
    public static createSource(data: CreateSourceData): CancelablePromise<CreateSourceResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/infospaces/{infospace_id}/sources/',
            path: {
                infospace_id: data.infospaceId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List Sources
     * Retrieve Sources for the infospace.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.skip
     * @param data.limit
     * @param data.includeCounts Include counts of assets
     * @returns SourcesOut Successful Response
     * @throws ApiError
     */
    public static listSources(data: ListSourcesData): CancelablePromise<ListSourcesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/infospaces/{infospace_id}/sources/',
            path: {
                infospace_id: data.infospaceId
            },
            query: {
                skip: data.skip,
                limit: data.limit,
                include_counts: data.includeCounts
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Source
     * Create a new source. If monitoring is enabled, a corresponding ingestion task
     * and a destination bundle will also be created.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.requestBody
     * @returns SourceRead Successful Response
     * @throws ApiError
     */
    public static createSource1(data: CreateSource1Data): CancelablePromise<CreateSource1Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/infospaces/{infospace_id}/sources',
            path: {
                infospace_id: data.infospaceId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List Sources
     * Retrieve Sources for the infospace.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.skip
     * @param data.limit
     * @param data.includeCounts Include counts of assets
     * @returns SourcesOut Successful Response
     * @throws ApiError
     */
    public static listSources1(data: ListSources1Data): CancelablePromise<ListSources1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/infospaces/{infospace_id}/sources',
            path: {
                infospace_id: data.infospaceId
            },
            query: {
                skip: data.skip,
                limit: data.limit,
                include_counts: data.includeCounts
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Source
     * Retrieve a specific Source by its ID.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.sourceId
     * @param data.includeCounts Include counts of assets
     * @returns SourceRead Successful Response
     * @throws ApiError
     */
    public static getSource(data: GetSourceData): CancelablePromise<GetSourceResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/infospaces/{infospace_id}/sources/{source_id}',
            path: {
                infospace_id: data.infospaceId,
                source_id: data.sourceId
            },
            query: {
                include_counts: data.includeCounts
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Source
     * Update a Source.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.sourceId
     * @param data.requestBody
     * @returns SourceRead Successful Response
     * @throws ApiError
     */
    public static updateSource(data: UpdateSourceData): CancelablePromise<UpdateSourceResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/infospaces/{infospace_id}/sources/{source_id}',
            path: {
                infospace_id: data.infospaceId,
                source_id: data.sourceId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Source
     * Delete a Source.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.sourceId
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deleteSource(data: DeleteSourceData): CancelablePromise<DeleteSourceResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/infospaces/{infospace_id}/sources/{source_id}',
            path: {
                infospace_id: data.infospaceId,
                source_id: data.sourceId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Transfer Sources
     * Transfer sources between infospaces.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns SourceTransferResponse Successful Response
     * @throws ApiError
     */
    public static transferSources(data: TransferSourcesData): CancelablePromise<TransferSourcesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/infospaces/{infospace_id}/sources/transfer',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class SsoService {
    /**
     * Initiate Discourse Login
     * Convenience endpoint to redirect users to Discourse login.
     * When they click "Log In" on Discourse, Discourse will automatically
     * redirect back to our /callback endpoint to handle SSO.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static initiateDiscourseLogin(): CancelablePromise<InitiateDiscourseLoginResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/sso/discourse/login'
        });
    }
    
    /**
     * Initiate Discourse Login
     * Convenience endpoint to redirect users to Discourse login.
     * When they click "Log In" on Discourse, Discourse will automatically
     * redirect back to our /callback endpoint to handle SSO.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static initiateDiscourseLogin1(): CancelablePromise<InitiateDiscourseLogin1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/sso/discourse/login'
        });
    }
    
    /**
     * Handle Discourse Sso
     * Handle SSO callback from Discourse.
     * Since this is a server-to-server redirect, we can't rely on JWT tokens.
     * Instead, redirect to a frontend page that can handle the authentication.
     * @param data The data for the request.
     * @param data.sso SSO payload from Discourse
     * @param data.sig Signature from Discourse
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static handleDiscourseSso(data: HandleDiscourseSsoData): CancelablePromise<HandleDiscourseSsoResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/sso/discourse/callback',
            query: {
                sso: data.sso,
                sig: data.sig
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Handle Discourse Sso
     * Handle SSO callback from Discourse.
     * Since this is a server-to-server redirect, we can't rely on JWT tokens.
     * Instead, redirect to a frontend page that can handle the authentication.
     * @param data The data for the request.
     * @param data.sso SSO payload from Discourse
     * @param data.sig Signature from Discourse
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static handleDiscourseSso1(data: HandleDiscourseSso1Data): CancelablePromise<HandleDiscourseSso1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/sso/discourse/callback',
            query: {
                sso: data.sso,
                sig: data.sig
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Handle Discourse Logout
     * Handle logout from Discourse.
     * This is called when a user logs out from Discourse to also log them out of your app.
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static handleDiscourseLogout(): CancelablePromise<HandleDiscourseLogoutResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/sso/discourse/logout'
        });
    }
    
    /**
     * Handle Discourse Logout
     * Handle logout from Discourse.
     * This is called when a user logs out from Discourse to also log them out of your app.
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static handleDiscourseLogout1(): CancelablePromise<HandleDiscourseLogout1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/sso/discourse/logout'
        });
    }
    
    /**
     * Get Discourse Sso Info
     * Get information about Discourse SSO configuration.
     * Useful for debugging and setup verification.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getDiscourseSsoInfo(): CancelablePromise<GetDiscourseSsoInfoResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/sso/discourse/info'
        });
    }
    
    /**
     * Get Discourse Sso Info
     * Get information about Discourse SSO configuration.
     * Useful for debugging and setup verification.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getDiscourseSsoInfo1(): CancelablePromise<GetDiscourseSsoInfo1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/sso/discourse/info'
        });
    }
    
    /**
     * Sync User To Discourse
     * Manually sync a user to Discourse.
     * This can be useful for testing or forcing a user sync.
     * @param data The data for the request.
     * @param data.userId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static syncUserToDiscourse(data: SyncUserToDiscourseData = {}): CancelablePromise<SyncUserToDiscourseResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/sso/discourse/user-sync',
            query: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Sync User To Discourse
     * Manually sync a user to Discourse.
     * This can be useful for testing or forcing a user sync.
     * @param data The data for the request.
     * @param data.userId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static syncUserToDiscourse1(data: SyncUserToDiscourse1Data = {}): CancelablePromise<SyncUserToDiscourse1Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/sso/discourse/user-sync',
            query: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Complete Discourse Sso
     * Complete the SSO process with an authenticated user.
     * Returns the redirect URL as JSON to avoid CORS issues with manual redirects.
     * @param data The data for the request.
     * @param data.formData
     * @returns string Successful Response
     * @throws ApiError
     */
    public static completeDiscourseSso(data: CompleteDiscourseSsoData): CancelablePromise<CompleteDiscourseSsoResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/sso/discourse/complete',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Complete Discourse Sso
     * Complete the SSO process with an authenticated user.
     * Returns the redirect URL as JSON to avoid CORS issues with manual redirects.
     * @param data The data for the request.
     * @param data.formData
     * @returns string Successful Response
     * @throws ApiError
     */
    public static completeDiscourseSso1(data: CompleteDiscourseSso1Data): CancelablePromise<CompleteDiscourseSso1Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/sso/discourse/complete',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class TasksService {
    /**
     * Create Task
     * Create a new Recurring Task in the specified infospace.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.args
     * @param data.kwargs
     * @param data.requestBody
     * @returns TaskRead Successful Response
     * @throws ApiError
     */
    public static createTask(data: CreateTaskData): CancelablePromise<CreateTaskResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/tasks/infospaces/{infospace_id}/tasks/',
            path: {
                infospace_id: data.infospaceId
            },
            query: {
                args: data.args,
                kwargs: data.kwargs
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Task
     * Create a new Recurring Task in the specified infospace.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.args
     * @param data.kwargs
     * @param data.requestBody
     * @returns TaskRead Successful Response
     * @throws ApiError
     */
    public static createTask1(data: CreateTask1Data): CancelablePromise<CreateTask1Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/tasks/infospaces/{infospace_id}/tasks/',
            path: {
                infospace_id: data.infospaceId
            },
            query: {
                args: data.args,
                kwargs: data.kwargs
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List Tasks
     * Retrieve Tasks for the infospace using the service.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.args
     * @param data.kwargs
     * @param data.skip
     * @param data.limit
     * @param data.status Filter by task status
     * @param data.type Filter by task type
     * @param data.isEnabled Filter by is_enabled flag
     * @returns TasksOut Successful Response
     * @throws ApiError
     */
    public static listTasks(data: ListTasksData): CancelablePromise<ListTasksResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/tasks/infospaces/{infospace_id}/tasks/',
            path: {
                infospace_id: data.infospaceId
            },
            query: {
                skip: data.skip,
                limit: data.limit,
                status: data.status,
                type: data.type,
                is_enabled: data.isEnabled,
                args: data.args,
                kwargs: data.kwargs
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List Tasks
     * Retrieve Tasks for the infospace using the service.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.args
     * @param data.kwargs
     * @param data.skip
     * @param data.limit
     * @param data.status Filter by task status
     * @param data.type Filter by task type
     * @param data.isEnabled Filter by is_enabled flag
     * @returns TasksOut Successful Response
     * @throws ApiError
     */
    public static listTasks1(data: ListTasks1Data): CancelablePromise<ListTasks1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/tasks/infospaces/{infospace_id}/tasks/',
            path: {
                infospace_id: data.infospaceId
            },
            query: {
                skip: data.skip,
                limit: data.limit,
                status: data.status,
                type: data.type,
                is_enabled: data.isEnabled,
                args: data.args,
                kwargs: data.kwargs
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Task
     * Create a new Recurring Task in the specified infospace.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.args
     * @param data.kwargs
     * @param data.requestBody
     * @returns TaskRead Successful Response
     * @throws ApiError
     */
    public static createTask2(data: CreateTask2Data): CancelablePromise<CreateTask2Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/tasks/infospaces/{infospace_id}/tasks',
            path: {
                infospace_id: data.infospaceId
            },
            query: {
                args: data.args,
                kwargs: data.kwargs
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Task
     * Create a new Recurring Task in the specified infospace.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.args
     * @param data.kwargs
     * @param data.requestBody
     * @returns TaskRead Successful Response
     * @throws ApiError
     */
    public static createTask3(data: CreateTask3Data): CancelablePromise<CreateTask3Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/tasks/infospaces/{infospace_id}/tasks',
            path: {
                infospace_id: data.infospaceId
            },
            query: {
                args: data.args,
                kwargs: data.kwargs
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List Tasks
     * Retrieve Tasks for the infospace using the service.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.args
     * @param data.kwargs
     * @param data.skip
     * @param data.limit
     * @param data.status Filter by task status
     * @param data.type Filter by task type
     * @param data.isEnabled Filter by is_enabled flag
     * @returns TasksOut Successful Response
     * @throws ApiError
     */
    public static listTasks2(data: ListTasks2Data): CancelablePromise<ListTasks2Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/tasks/infospaces/{infospace_id}/tasks',
            path: {
                infospace_id: data.infospaceId
            },
            query: {
                skip: data.skip,
                limit: data.limit,
                status: data.status,
                type: data.type,
                is_enabled: data.isEnabled,
                args: data.args,
                kwargs: data.kwargs
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List Tasks
     * Retrieve Tasks for the infospace using the service.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.args
     * @param data.kwargs
     * @param data.skip
     * @param data.limit
     * @param data.status Filter by task status
     * @param data.type Filter by task type
     * @param data.isEnabled Filter by is_enabled flag
     * @returns TasksOut Successful Response
     * @throws ApiError
     */
    public static listTasks3(data: ListTasks3Data): CancelablePromise<ListTasks3Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/tasks/infospaces/{infospace_id}/tasks',
            path: {
                infospace_id: data.infospaceId
            },
            query: {
                skip: data.skip,
                limit: data.limit,
                status: data.status,
                type: data.type,
                is_enabled: data.isEnabled,
                args: data.args,
                kwargs: data.kwargs
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Task
     * Retrieve a specific Task by its ID from the infospace.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.taskId
     * @param data.args
     * @param data.kwargs
     * @returns TaskRead Successful Response
     * @throws ApiError
     */
    public static getTask(data: GetTaskData): CancelablePromise<GetTaskResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/tasks/infospaces/{infospace_id}/tasks/{task_id}',
            path: {
                infospace_id: data.infospaceId,
                task_id: data.taskId
            },
            query: {
                args: data.args,
                kwargs: data.kwargs
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Task
     * Retrieve a specific Task by its ID from the infospace.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.taskId
     * @param data.args
     * @param data.kwargs
     * @returns TaskRead Successful Response
     * @throws ApiError
     */
    public static getTask1(data: GetTask1Data): CancelablePromise<GetTask1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/tasks/infospaces/{infospace_id}/tasks/{task_id}',
            path: {
                infospace_id: data.infospaceId,
                task_id: data.taskId
            },
            query: {
                args: data.args,
                kwargs: data.kwargs
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Task
     * Update a Task in the infospace.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.taskId
     * @param data.args
     * @param data.kwargs
     * @param data.requestBody
     * @returns TaskRead Successful Response
     * @throws ApiError
     */
    public static updateTask(data: UpdateTaskData): CancelablePromise<UpdateTaskResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/tasks/infospaces/{infospace_id}/tasks/{task_id}',
            path: {
                infospace_id: data.infospaceId,
                task_id: data.taskId
            },
            query: {
                args: data.args,
                kwargs: data.kwargs
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Task
     * Update a Task in the infospace.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.taskId
     * @param data.args
     * @param data.kwargs
     * @param data.requestBody
     * @returns TaskRead Successful Response
     * @throws ApiError
     */
    public static updateTask1(data: UpdateTask1Data): CancelablePromise<UpdateTask1Response> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/tasks/infospaces/{infospace_id}/tasks/{task_id}',
            path: {
                infospace_id: data.infospaceId,
                task_id: data.taskId
            },
            query: {
                args: data.args,
                kwargs: data.kwargs
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Task
     * Delete a Task from the infospace.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.taskId
     * @param data.args
     * @param data.kwargs
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deleteTask(data: DeleteTaskData): CancelablePromise<DeleteTaskResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/tasks/infospaces/{infospace_id}/tasks/{task_id}',
            path: {
                infospace_id: data.infospaceId,
                task_id: data.taskId
            },
            query: {
                args: data.args,
                kwargs: data.kwargs
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Task
     * Delete a Task from the infospace.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.taskId
     * @param data.args
     * @param data.kwargs
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deleteTask1(data: DeleteTask1Data): CancelablePromise<DeleteTask1Response> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/tasks/infospaces/{infospace_id}/tasks/{task_id}',
            path: {
                infospace_id: data.infospaceId,
                task_id: data.taskId
            },
            query: {
                args: data.args,
                kwargs: data.kwargs
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Execute Task Manually
     * Manually trigger the execution of a specific task.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.taskId
     * @param data.args
     * @param data.kwargs
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static executeTaskManually(data: ExecuteTaskManuallyData): CancelablePromise<ExecuteTaskManuallyResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/tasks/infospaces/{infospace_id}/tasks/{task_id}/execute',
            path: {
                infospace_id: data.infospaceId,
                task_id: data.taskId
            },
            query: {
                args: data.args,
                kwargs: data.kwargs
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Execute Task Manually
     * Manually trigger the execution of a specific task.
     * @param data The data for the request.
     * @param data.infospaceId
     * @param data.taskId
     * @param data.args
     * @param data.kwargs
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static executeTaskManually1(data: ExecuteTaskManually1Data): CancelablePromise<ExecuteTaskManually1Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/tasks/infospaces/{infospace_id}/tasks/{task_id}/execute',
            path: {
                infospace_id: data.infospaceId,
                task_id: data.taskId
            },
            query: {
                args: data.args,
                kwargs: data.kwargs
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class UserBackupsService {
    /**
     * Create User Backup
     * Create a new backup of a complete user account (Admin only).
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserBackupRead Successful Response
     * @throws ApiError
     */
    public static createUserBackup(data: CreateUserBackupData): CancelablePromise<CreateUserBackupResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/user-backups',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List User Backups
     * List user backups (Admin only).
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @param data.targetUserId Filter by specific target user
     * @returns UserBackupsOut Successful Response
     * @throws ApiError
     */
    public static listUserBackups(data: ListUserBackupsData = {}): CancelablePromise<ListUserBackupsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/user-backups',
            query: {
                skip: data.skip,
                limit: data.limit,
                target_user_id: data.targetUserId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get User Backup
     * Get a specific user backup (Admin only).
     * @param data The data for the request.
     * @param data.backupId
     * @returns UserBackupRead Successful Response
     * @throws ApiError
     */
    public static getUserBackup(data: GetUserBackupData): CancelablePromise<GetUserBackupResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/user-backups/{backup_id}',
            path: {
                backup_id: data.backupId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update User Backup
     * Update user backup metadata (Admin only).
     * @param data The data for the request.
     * @param data.backupId
     * @param data.requestBody
     * @returns UserBackupRead Successful Response
     * @throws ApiError
     */
    public static updateUserBackup(data: UpdateUserBackupData): CancelablePromise<UpdateUserBackupResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/user-backups/{backup_id}',
            path: {
                backup_id: data.backupId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete User Backup
     * Delete a user backup and its files (Admin only).
     * @param data The data for the request.
     * @param data.backupId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUserBackup(data: DeleteUserBackupData): CancelablePromise<DeleteUserBackupResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/user-backups/{backup_id}',
            path: {
                backup_id: data.backupId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Restore User Backup
     * Restore a user from a backup (Admin only).
     * @param data The data for the request.
     * @param data.backupId
     * @param data.requestBody
     * @returns UserOut Successful Response
     * @throws ApiError
     */
    public static restoreUserBackup(data: RestoreUserBackupData): CancelablePromise<RestoreUserBackupResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/user-backups/{backup_id}/restore',
            path: {
                backup_id: data.backupId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create User Backup Share Link
     * Create a shareable link for a user backup (Admin only).
     * @param data The data for the request.
     * @param data.backupId
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static createUserBackupShareLink(data: CreateUserBackupShareLinkData): CancelablePromise<CreateUserBackupShareLinkResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/user-backups/{backup_id}/share',
            path: {
                backup_id: data.backupId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Download Shared User Backup
     * Download a shared user backup.
     * @param data The data for the request.
     * @param data.shareToken
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static downloadSharedUserBackup(data: DownloadSharedUserBackupData): CancelablePromise<DownloadSharedUserBackupResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/user-backups/download/{share_token}',
            path: {
                share_token: data.shareToken
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Cleanup Expired User Backups
     * Manually trigger cleanup of expired user backups (Admin only).
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static cleanupExpiredUserBackups(): CancelablePromise<CleanupExpiredUserBackupsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/user-backups/cleanup'
        });
    }
    
    /**
     * Get Users Backup Overview
     * Admin endpoint: Get overview of all users with backup status.
     * @param data The data for the request.
     * @param data.limit
     * @param data.skip
     * @param data.search Search user emails or names
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getUsersBackupOverview(data: GetUsersBackupOverviewData = {}): CancelablePromise<GetUsersBackupOverviewResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/user-backups/admin/users-overview',
            query: {
                limit: data.limit,
                skip: data.skip,
                search: data.search
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Trigger Backup All Users
     * Admin endpoint: Trigger backup creation for all users.
     * @param data The data for the request.
     * @param data.backupType
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static triggerBackupAllUsers(data: TriggerBackupAllUsersData = {}): CancelablePromise<TriggerBackupAllUsersResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/user-backups/admin/backup-all',
            query: {
                backup_type: data.backupType
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Trigger Backup Specific Users
     * Admin endpoint: Trigger backup creation for specific users.
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.backupType
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static triggerBackupSpecificUsers(data: TriggerBackupSpecificUsersData): CancelablePromise<TriggerBackupSpecificUsersResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/user-backups/admin/backup-specific',
            query: {
                backup_type: data.backupType
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class UsersService {
    /**
     * Read Users
     * Retrieve users.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns UsersOut Successful Response
     * @throws ApiError
     */
    public static readUsers(data: ReadUsersData = {}): CancelablePromise<ReadUsersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create User
     * Create new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserOut Successful Response
     * @throws ApiError
     */
    public static createUser(data: CreateUserData): CancelablePromise<CreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Users
     * Retrieve users.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns UsersOut Successful Response
     * @throws ApiError
     */
    public static readUsers1(data: ReadUsers1Data = {}): CancelablePromise<ReadUsers1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create User
     * Create new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserOut Successful Response
     * @throws ApiError
     */
    public static createUser1(data: CreateUser1Data): CancelablePromise<CreateUser1Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User Me
     * Get current user.
     * @returns UserOut Successful Response
     * @throws ApiError
     */
    public static readUserMe(): CancelablePromise<ReadUserMeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Update User Me
     * Update own user profile.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserOut Successful Response
     * @throws ApiError
     */
    public static updateUserMe(data: UpdateUserMeData): CancelablePromise<UpdateUserMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Password Me
     * Update own password.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static updatePasswordMe(data: UpdatePasswordMeData): CancelablePromise<UpdatePasswordMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me/password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Upload Profile Picture
     * Upload a profile picture for the current user.
     * @param data The data for the request.
     * @param data.formData
     * @returns UserOut Successful Response
     * @throws ApiError
     */
    public static uploadProfilePicture(data: UploadProfilePictureData): CancelablePromise<UploadProfilePictureResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/me/upload-profile-picture',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get User Public Profile
     * Get a user's public profile (no authentication required).
     * Returns only non-sensitive profile information.
     * @param data The data for the request.
     * @param data.userId
     * @returns UserPublicProfile Successful Response
     * @throws ApiError
     */
    public static getUserPublicProfile(data: GetUserPublicProfileData): CancelablePromise<GetUserPublicProfileResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/profile/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Profile Picture
     * Serve profile pictures publicly (no authentication required).
     * @param data The data for the request.
     * @param data.userId
     * @param data.filename
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getProfilePicture(data: GetProfilePictureData): CancelablePromise<GetProfilePictureResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/profile-picture/{user_id}/{filename}',
            path: {
                user_id: data.userId,
                filename: data.filename
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List User Profiles
     * List user profiles with optional search.
     * Search looks in full_name and bio fields.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @param data.search
     * @returns UserPublicProfile Successful Response
     * @throws ApiError
     */
    public static listUserProfiles(data: ListUserProfilesData = {}): CancelablePromise<ListUserProfilesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/profiles',
            query: {
                skip: data.skip,
                limit: data.limit,
                search: data.search
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get User Profile Stats
     * Get user profile statistics.
     * @param data The data for the request.
     * @param data.userId
     * @returns UserProfileStats Successful Response
     * @throws ApiError
     */
    public static getUserProfileStats(data: GetUserProfileStatsData): CancelablePromise<GetUserProfileStatsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/profile/{user_id}/stats',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update User Profile
     * Update user profile information only (no email or password changes).
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserOut Successful Response
     * @throws ApiError
     */
    public static updateUserProfile(data: UpdateUserProfileData): CancelablePromise<UpdateUserProfileResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me/profile',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create User Open
     * Create new user without the need to be logged in.
     * Sends email verification if REQUIRE_EMAIL_VERIFICATION is enabled.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserOut Successful Response
     * @throws ApiError
     */
    public static createUserOpen(data: CreateUserOpenData): CancelablePromise<CreateUserOpenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/open',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User By Id
     * Get a specific user by id.
     * @param data The data for the request.
     * @param data.userId
     * @returns UserOut Successful Response
     * @throws ApiError
     */
    public static readUserById(data: ReadUserByIdData): CancelablePromise<ReadUserByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update User
     * Update a user.
     * @param data The data for the request.
     * @param data.userId
     * @param data.requestBody
     * @returns UserOut Successful Response
     * @throws ApiError
     */
    public static updateUser(data: UpdateUserData): CancelablePromise<UpdateUserResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete User
     * Delete a user.
     * @param data The data for the request.
     * @param data.userId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUser(data: DeleteUserData): CancelablePromise<DeleteUserResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Verify Email
     * Verify user email address using verification token.
     * @param data The data for the request.
     * @param data.token
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static verifyEmail(data: VerifyEmailData): CancelablePromise<VerifyEmailResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/verify-email',
            query: {
                token: data.token
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Resend Verification
     * Resend email verification for a user.
     * @param data The data for the request.
     * @param data.email
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static resendVerification(data: ResendVerificationData): CancelablePromise<ResendVerificationResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/resend-verification',
            query: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class UtilitiesService {
    /**
     * Test Email
     * Test emails.
     * @param data The data for the request.
     * @param data.emailTo
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static testEmail(data: TestEmailData): CancelablePromise<TestEmailResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/utils/test-email/',
            query: {
                email_to: data.emailTo
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Healthz
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static healthz(): CancelablePromise<HealthzResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/healthz'
        });
    }
    
    /**
     * Readyz
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static readyz(): CancelablePromise<ReadyzResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/healthz/readiness'
        });
    }
    
    /**
     * Liveness
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static liveness(): CancelablePromise<LivenessResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/healthz/liveness'
        });
    }
    
    /**
     * Get Available Rss Countries
     * Get list of available countries for RSS feed discovery from awesome-rss-feeds repository.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getAvailableRssCountries(): CancelablePromise<GetAvailableRssCountriesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/rss-countries'
        });
    }
    
    /**
     * Discover Rss Feeds
     * Discover RSS feeds from the awesome-rss-feeds repository.
     *
     * Args:
     * country: Country name (e.g., "Australia", "United States") - if None, returns all countries
     * category: Category filter (e.g., "News", "Technology") - if None, returns all categories
     * limit: Maximum number of feeds to return
     * @param data The data for the request.
     * @param data.country
     * @param data.category
     * @param data.limit
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static discoverRssFeeds(data: DiscoverRssFeedsData = {}): CancelablePromise<DiscoverRssFeedsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/discover-rss-feeds',
            query: {
                country: data.country,
                category: data.category,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Extract Pdf Text
     * Extract text from PDF without authentication
     * @param data The data for the request.
     * @param data.formData
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static extractPdfText(data: ExtractPdfTextData): CancelablePromise<ExtractPdfTextResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/utils/extract-pdf-text',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Extract Pdf Metadata
     * Extract metadata from PDF including title, author, etc.
     * @param data The data for the request.
     * @param data.formData
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static extractPdfMetadata(data: ExtractPdfMetadataData): CancelablePromise<ExtractPdfMetadataResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/utils/extract-pdf-metadata',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Scrape Article
     * Scrape article content from a URL using the configured scraping provider.
     *
     * Args:
     * url: The URL of the article to scrape
     *
     * Returns:
     * The scraped article content
     * @param data The data for the request.
     * @param data.url
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static scrapeArticle(data: ScrapeArticleData): CancelablePromise<ScrapeArticleResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/scrape_article',
            query: {
                url: data.url
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Analyze Source
     * Analyze a news source to discover RSS feeds, categories, and recent articles.
     *
     * Args:
     * base_url: The base URL of the news source to analyze
     *
     * Returns:
     * Source analysis results including RSS feeds, categories, and articles
     * @param data The data for the request.
     * @param data.baseUrl
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static analyzeSource(data: AnalyzeSourceData): CancelablePromise<AnalyzeSourceResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/analyze_source',
            query: {
                base_url: data.baseUrl
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Discover Rss Feeds
     * Discover RSS feeds from a news source.
     *
     * Args:
     * base_url: The base URL of the news source
     *
     * Returns:
     * List of discovered RSS feed URLs
     * @param data The data for the request.
     * @param data.baseUrl
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static discoverRssFeeds1(data: DiscoverRssFeeds1Data): CancelablePromise<DiscoverRssFeeds1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/discover_rss_feeds',
            query: {
                base_url: data.baseUrl
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Browse Rss Feed
     * Browse RSS feed items without ingesting them.
     *
     * Args:
     * feed_url: The RSS feed URL to browse
     * limit: Maximum number of items to return (default 20)
     *
     * Returns:
     * RSS feed metadata and recent items
     * @param data The data for the request.
     * @param data.feedUrl
     * @param data.limit
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static browseRssFeed(data: BrowseRssFeedData): CancelablePromise<BrowseRssFeedResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/browse_rss_feed',
            query: {
                feed_url: data.feedUrl,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Providers
     * Returns a dynamic list of available classification providers and their models.
     * Discovers models from all configured providers (Ollama, OpenAI, Gemini).
     * @returns ProviderListResponse Successful Response
     * @throws ApiError
     */
    public static getProviders(): CancelablePromise<GetProvidersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/providers'
        });
    }
    
    /**
     * Pull Ollama Model
     * Pull a model from Ollama registry.
     * Admin only endpoint for security.
     * @param data The data for the request.
     * @param data.modelName
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static pullOllamaModel(data: PullOllamaModelData): CancelablePromise<PullOllamaModelResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/utils/ollama/pull-model',
            query: {
                model_name: data.modelName
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Ollama Available Models
     * Fetch models from the *plain* Ollama Library page and return normalized JSON.
     * Only calls https://ollama.com/library (follows redirect from /library/).
     * @param data The data for the request.
     * @param data.sort
     * @param data.limit
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getOllamaAvailableModels(data: GetOllamaAvailableModelsData = {}): CancelablePromise<GetOllamaAvailableModelsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/ollama/available-models',
            query: {
                sort: data.sort,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Remove Ollama Model
     * Remove a model from Ollama.
     * Admin only endpoint for security.
     * @param data The data for the request.
     * @param data.modelName
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static removeOllamaModel(data: RemoveOllamaModelData): CancelablePromise<RemoveOllamaModelResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/utils/ollama/remove-model',
            query: {
                model_name: data.modelName
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Geocode Location
     * @param data The data for the request.
     * @param data.location
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static geocodeLocation(data: GeocodeLocationData): CancelablePromise<GeocodeLocationResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/geocode_location',
            query: {
                location: data.location
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Country Data
     * @param data The data for the request.
     * @param data.country
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getCountryData(data: GetCountryDataData): CancelablePromise<GetCountryDataResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/get_country_data',
            query: {
                country: data.country
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class UtilsService {
    /**
     * Test Email
     * Test emails.
     * @param data The data for the request.
     * @param data.emailTo
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static testEmail(data: TestEmailData): CancelablePromise<TestEmailResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/utils/test-email/',
            query: {
                email_to: data.emailTo
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Healthz
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static healthz(): CancelablePromise<HealthzResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/healthz'
        });
    }
    
    /**
     * Readyz
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static readyz(): CancelablePromise<ReadyzResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/healthz/readiness'
        });
    }
    
    /**
     * Liveness
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static liveness(): CancelablePromise<LivenessResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/healthz/liveness'
        });
    }
    
    /**
     * Get Available Rss Countries
     * Get list of available countries for RSS feed discovery from awesome-rss-feeds repository.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getAvailableRssCountries(): CancelablePromise<GetAvailableRssCountriesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/rss-countries'
        });
    }
    
    /**
     * Discover Rss Feeds
     * Discover RSS feeds from the awesome-rss-feeds repository.
     *
     * Args:
     * country: Country name (e.g., "Australia", "United States") - if None, returns all countries
     * category: Category filter (e.g., "News", "Technology") - if None, returns all categories
     * limit: Maximum number of feeds to return
     * @param data The data for the request.
     * @param data.country
     * @param data.category
     * @param data.limit
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static discoverRssFeeds(data: DiscoverRssFeedsData = {}): CancelablePromise<DiscoverRssFeedsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/discover-rss-feeds',
            query: {
                country: data.country,
                category: data.category,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Extract Pdf Text
     * Extract text from PDF without authentication
     * @param data The data for the request.
     * @param data.formData
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static extractPdfText(data: ExtractPdfTextData): CancelablePromise<ExtractPdfTextResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/utils/extract-pdf-text',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Extract Pdf Metadata
     * Extract metadata from PDF including title, author, etc.
     * @param data The data for the request.
     * @param data.formData
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static extractPdfMetadata(data: ExtractPdfMetadataData): CancelablePromise<ExtractPdfMetadataResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/utils/extract-pdf-metadata',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Scrape Article
     * Scrape article content from a URL using the configured scraping provider.
     *
     * Args:
     * url: The URL of the article to scrape
     *
     * Returns:
     * The scraped article content
     * @param data The data for the request.
     * @param data.url
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static scrapeArticle(data: ScrapeArticleData): CancelablePromise<ScrapeArticleResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/scrape_article',
            query: {
                url: data.url
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Analyze Source
     * Analyze a news source to discover RSS feeds, categories, and recent articles.
     *
     * Args:
     * base_url: The base URL of the news source to analyze
     *
     * Returns:
     * Source analysis results including RSS feeds, categories, and articles
     * @param data The data for the request.
     * @param data.baseUrl
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static analyzeSource(data: AnalyzeSourceData): CancelablePromise<AnalyzeSourceResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/analyze_source',
            query: {
                base_url: data.baseUrl
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Discover Rss Feeds
     * Discover RSS feeds from a news source.
     *
     * Args:
     * base_url: The base URL of the news source
     *
     * Returns:
     * List of discovered RSS feed URLs
     * @param data The data for the request.
     * @param data.baseUrl
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static discoverRssFeeds1(data: DiscoverRssFeeds1Data): CancelablePromise<DiscoverRssFeeds1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/discover_rss_feeds',
            query: {
                base_url: data.baseUrl
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Browse Rss Feed
     * Browse RSS feed items without ingesting them.
     *
     * Args:
     * feed_url: The RSS feed URL to browse
     * limit: Maximum number of items to return (default 20)
     *
     * Returns:
     * RSS feed metadata and recent items
     * @param data The data for the request.
     * @param data.feedUrl
     * @param data.limit
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static browseRssFeed(data: BrowseRssFeedData): CancelablePromise<BrowseRssFeedResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/browse_rss_feed',
            query: {
                feed_url: data.feedUrl,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Providers
     * Returns a dynamic list of available classification providers and their models.
     * Discovers models from all configured providers (Ollama, OpenAI, Gemini).
     * @returns ProviderListResponse Successful Response
     * @throws ApiError
     */
    public static getProviders(): CancelablePromise<GetProvidersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/providers'
        });
    }
    
    /**
     * Pull Ollama Model
     * Pull a model from Ollama registry.
     * Admin only endpoint for security.
     * @param data The data for the request.
     * @param data.modelName
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static pullOllamaModel(data: PullOllamaModelData): CancelablePromise<PullOllamaModelResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/utils/ollama/pull-model',
            query: {
                model_name: data.modelName
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Ollama Available Models
     * Fetch models from the *plain* Ollama Library page and return normalized JSON.
     * Only calls https://ollama.com/library (follows redirect from /library/).
     * @param data The data for the request.
     * @param data.sort
     * @param data.limit
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getOllamaAvailableModels(data: GetOllamaAvailableModelsData = {}): CancelablePromise<GetOllamaAvailableModelsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/ollama/available-models',
            query: {
                sort: data.sort,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Remove Ollama Model
     * Remove a model from Ollama.
     * Admin only endpoint for security.
     * @param data The data for the request.
     * @param data.modelName
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static removeOllamaModel(data: RemoveOllamaModelData): CancelablePromise<RemoveOllamaModelResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/utils/ollama/remove-model',
            query: {
                model_name: data.modelName
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Geocode Location
     * @param data The data for the request.
     * @param data.location
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static geocodeLocation(data: GeocodeLocationData): CancelablePromise<GeocodeLocationResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/geocode_location',
            query: {
                location: data.location
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Country Data
     * @param data The data for the request.
     * @param data.country
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getCountryData(data: GetCountryDataData): CancelablePromise<GetCountryDataResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/get_country_data',
            query: {
                country: data.country
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}