// This file is auto-generated by @hey-api/openapi-ts

/**
 * Request to add a message to an existing conversation.
 */
export type AddMessageToConversationRequest = {
    message: ChatConversationMessageCreate;
};

export type AnalysisAdapterRead = {
    name: string;
    description?: (string | null);
    input_schema_definition?: ({
    [key: string]: unknown;
} | null);
    output_schema_definition?: ({
    [key: string]: unknown;
} | null);
    version?: string;
    module_path?: (string | null);
    adapter_type: string;
    is_public?: boolean;
    id: number;
    is_active: boolean;
    creator_user_id?: (number | null);
    created_at: string;
    updated_at: string;
};

export type AnnotationCreate = {
    value: {
        [key: string]: unknown;
    };
    status?: ResultStatus;
    event_timestamp?: (string | null);
    region?: ({
    [key: string]: unknown;
} | null);
    links?: (Array<{
    [key: string]: unknown;
}> | null);
    asset_id: number;
    schema_id: number;
    run_id: number;
};

export type AnnotationRead = {
    value: {
        [key: string]: unknown;
    };
    status?: ResultStatus;
    event_timestamp?: (string | null);
    region?: ({
    [key: string]: unknown;
} | null);
    links?: (Array<{
    [key: string]: unknown;
}> | null);
    id: number;
    uuid: string;
    asset_id: number;
    schema_id: number;
    run_id: number;
    infospace_id: number;
    user_id: number;
    timestamp: string;
    created_at: string;
    updated_at: string;
};

/**
 * Request payload for retrying a single annotation with optional custom prompt.
 */
export type AnnotationRetryRequest = {
    /**
     * Optional additional guidance or prompt override for this specific retry
     */
    custom_prompt?: (string | null);
};

export type AnnotationRunCreate = {
    name: string;
    description?: (string | null);
    configuration?: {
        [key: string]: unknown;
    };
    include_parent_context?: boolean;
    context_window?: number;
    views_config?: (Array<{
    [key: string]: unknown;
}> | null);
    schema_ids: Array<number>;
    target_asset_ids?: (Array<number> | null);
    target_bundle_id?: (number | null);
};

/**
 * Preview model for shared annotation runs.
 */
export type AnnotationRunPreview = {
    id: number;
    uuid: string;
    name: string;
    description?: (string | null);
    status: RunStatus;
    created_at: string;
    updated_at: string;
    completed_at?: (string | null);
    views_config?: (Array<{
    [key: string]: unknown;
}> | null);
    configuration?: {
        [key: string]: unknown;
    };
    annotation_count?: number;
    target_schemas?: Array<{
        [key: string]: unknown;
    }>;
    annotations?: Array<{
        [key: string]: unknown;
    }>;
};

export type AnnotationRunRead = {
    name: string;
    description?: (string | null);
    configuration?: {
        [key: string]: unknown;
    };
    include_parent_context?: boolean;
    context_window?: number;
    views_config?: (Array<{
    [key: string]: unknown;
}> | null);
    id: number;
    uuid: string;
    infospace_id: number;
    user_id: number;
    status: RunStatus;
    created_at: string;
    updated_at: string;
    started_at: (string | null);
    completed_at: (string | null);
    error_message: (string | null);
    annotation_count?: (number | null);
    schema_ids?: (Array<number> | null);
};

export type AnnotationRunsOut = {
    data: Array<AnnotationRunRead>;
    count: number;
};

export type AnnotationRunUpdate = {
    name?: (string | null);
    description?: (string | null);
    configuration?: ({
    [key: string]: unknown;
} | null);
    include_parent_context?: (boolean | null);
    context_window?: (number | null);
    views_config?: (Array<{
    [key: string]: unknown;
}> | null);
};

export type AnnotationSchemaCreate = {
    name: string;
    description?: (string | null);
    output_contract: {
        [key: string]: unknown;
    };
    instructions?: (string | null);
    version?: string;
    field_specific_justification_configs?: ({
    [key: string]: FieldJustificationConfig;
} | null);
};

export type AnnotationSchemaRead = {
    name: string;
    description?: (string | null);
    output_contract: {
        [key: string]: unknown;
    };
    instructions?: (string | null);
    version?: string;
    id: number;
    uuid: string;
    infospace_id: number;
    user_id: number;
    created_at: string;
    updated_at: string;
    field_specific_justification_configs?: ({
    [key: string]: FieldJustificationConfig;
} | null);
    annotation_count?: (number | null);
    is_active: boolean;
};

export type AnnotationSchemasOut = {
    data: Array<AnnotationSchemaRead>;
    count: number;
};

export type AnnotationSchemaUpdate = {
    name?: (string | null);
    description?: (string | null);
    output_contract?: ({
    [key: string]: unknown;
} | null);
    instructions?: (string | null);
    version?: (string | null);
    field_specific_justification_configs?: ({
    [key: string]: FieldJustificationConfig;
} | null);
    is_active?: (boolean | null);
};

export type AnnotationsOut = {
    data: Array<AnnotationRead>;
    count: number;
};

export type AnnotationUpdate = {
    value?: ({
    [key: string]: unknown;
} | null);
    status?: (ResultStatus | null);
    event_timestamp?: (string | null);
    region?: ({
    [key: string]: unknown;
} | null);
    links?: (Array<{
    [key: string]: unknown;
}> | null);
};

export type ArticleComposition = {
    title: string;
    content: string;
    summary?: (string | null);
    embedded_assets?: (Array<{
    [key: string]: unknown;
}> | null);
    referenced_bundles?: (Array<number> | null);
    metadata?: ({
    [key: string]: unknown;
} | null);
    event_timestamp?: (string | null);
};

export type AssetChunkRead = {
    asset_id: number;
    chunk_index: number;
    text_content: string;
    chunk_metadata?: ({
    [key: string]: unknown;
} | null);
    id: number;
    created_at: string;
};

export type AssetCreate = {
    title?: (string | null);
    kind: AssetKind;
    stub?: boolean;
    user_id?: (number | null);
    infospace_id?: (number | null);
    parent_asset_id?: (number | null);
    part_index?: (number | null);
    text_content?: (string | null);
    blob_path?: (string | null);
    cells?: ({
    [key: string]: unknown;
} | null);
    source_identifier?: (string | null);
    source_metadata?: ({
    [key: string]: unknown;
} | null);
    event_timestamp?: (string | null);
    processing_status?: (ProcessingStatus | null);
};

export type AssetKind = 'pdf' | 'web' | 'image' | 'video' | 'audio' | 'text' | 'csv' | 'csv_row' | 'mbox' | 'email' | 'pdf_page' | 'text_chunk' | 'image_region' | 'video_scene' | 'audio_segment' | 'article' | 'rss_feed' | 'file';

/**
 * A lightweight public representation of an Asset.
 */
export type AssetPreview = {
    id: number;
    title: string;
    kind: AssetKind;
    created_at: string;
    updated_at: string;
    text_content?: (string | null);
    blob_path?: (string | null);
    source_metadata?: ({
    [key: string]: unknown;
} | null);
    children?: Array<AssetPreview>;
    /**
     * Helper to know if this asset might have children (e.g., PDF, CSV).
     */
    readonly is_container: boolean;
};

export type AssetRead = {
    title: string;
    kind: AssetKind;
    stub?: boolean;
    id: number;
    uuid: string;
    parent_asset_id: (number | null);
    part_index: (number | null);
    infospace_id: number;
    source_id: (number | null);
    created_at: string;
    text_content?: (string | null);
    blob_path?: (string | null);
    source_identifier?: (string | null);
    source_metadata?: ({
    [key: string]: unknown;
} | null);
    content_hash?: (string | null);
    fragments?: ({
    [key: string]: unknown;
} | null);
    user_id?: (number | null);
    updated_at: string;
    event_timestamp?: (string | null);
    processing_status?: ProcessingStatus;
    processing_error?: (string | null);
    /**
     * True if this asset can have child assets.
     */
    readonly is_container: boolean;
};

export type AssetsOut = {
    data: Array<AssetRead>;
    count: number;
};

export type AssetTransferRequest = {
    asset_ids: Array<number>;
    source_infospace_id: number;
    target_infospace_id: number;
    copy?: boolean;
};

export type AssetUpdate = {
    title?: (string | null);
    kind?: (AssetKind | null);
    stub?: (boolean | null);
    text_content?: (string | null);
    blob_path?: (string | null);
    source_identifier?: (string | null);
    source_metadata?: ({
    [key: string]: unknown;
} | null);
    event_timestamp?: (string | null);
};

/**
 * Response listing available embedding models.
 */
export type AvailableModelsResponse = {
    models: Array<EmbeddingModelInfo>;
};

export type BackupRestoreRequest = {
    backup_id: number;
    target_infospace_name?: (string | null);
    conflict_strategy?: string;
};

export type BackupShareRequest = {
    backup_id: number;
    is_shareable?: boolean;
    expiration_hours?: (number | null);
};

export type Body_assets_add_files_to_bundle_background = {
    files: Array<Blob | File>;
    options?: string;
};

export type Body_assets_create_assets_background_bulk = {
    files: Array<Blob | File>;
    options?: string;
};

export type Body_assets_update_asset_content = {
    file: Blob | File;
};

export type Body_assets_upload_file = {
    file: Blob | File;
    title?: (string | null);
    process_immediately?: boolean;
};

export type Body_datasets_import_dataset = {
    /**
     * Dataset Package file (.zip)
     */
    file: Blob | File;
};

export type Body_filestorage_file_upload = {
    /**
     * File to upload
     */
    file: Blob | File;
};

export type Body_filters_test_filter = {
    filter_config: {
        [key: string]: unknown;
    };
    test_data: Array<{
        [key: string]: unknown;
    }>;
};

export type Body_Infospaces_import_infospace = {
    /**
     * Infospace package file (.zip)
     */
    file: Blob | File;
};

export type Body_login_login_access_token = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type Body_sharing_export_resource = {
    resource_type: ResourceType;
    resource_id: number;
};

export type Body_sharing_import_resource = {
    file: Blob | File;
};

export type Body_sso_complete_discourse_sso = {
    sso: string;
    sig: string;
};

export type Body_users_upload_profile_picture = {
    file: Blob | File;
};

export type Body_utils_extract_pdf_metadata = {
    file: Blob | File;
};

export type Body_utils_extract_pdf_text = {
    file: Blob | File;
};

export type BulkDeleteBundlesRequest = {
    bundle_ids: Array<number>;
};

export type BulkDeleteRequest = {
    asset_ids: Array<number>;
};

/**
 * Bulk ingestion of search results with their pre-fetched content
 */
export type BulkSearchResultIngestion = {
    results: Array<SearchResultItem>;
    bundle_id?: (number | null);
};

export type BulkUrlIngestion = {
    urls: Array<string>;
    base_title?: (string | null);
    scrape_immediately?: boolean;
    bundle_id?: (number | null);
};

export type BundleCreate = {
    name: string;
    description?: (string | null);
    tags?: (Array<string> | null);
    asset_ids?: Array<number>;
    purpose?: (string | null);
    bundle_metadata?: ({
    [key: string]: unknown;
} | null);
    parent_bundle_id?: (number | null);
};

export type BundleHierarchy = {
    id: number;
    name: string;
    description?: (string | null);
    asset_count?: (number | null);
    child_bundle_count?: (number | null);
    parent_bundle_id?: (number | null);
    children?: Array<BundleHierarchy>;
};

export type BundleMoveRequest = {
    parent_bundle_id?: (number | null);
};

/**
 * A lightweight public representation of a Bundle.
 */
export type BundlePreview = {
    id: number;
    name: string;
    description?: (string | null);
    created_at: string;
    updated_at: string;
    assets: Array<AssetPreview>;
};

export type BundleRead = {
    name: string;
    description?: (string | null);
    tags?: (Array<string> | null);
    id: number;
    infospace_id: number;
    created_at: string;
    updated_at: string;
    asset_count: number;
    uuid: string;
    user_id: number;
    purpose?: (string | null);
    bundle_metadata?: ({
    [key: string]: unknown;
} | null);
    parent_bundle_id?: (number | null);
    child_bundle_count?: (number | null);
};

export type BundleUpdate = {
    name?: (string | null);
    description?: (string | null);
    tags?: (Array<string> | null);
    purpose?: (string | null);
    bundle_metadata?: ({
    [key: string]: unknown;
} | null);
    parent_bundle_id?: (number | null);
};

/**
 * Schema for creating a new chat conversation.
 */
export type ChatConversationCreate = {
    title: string;
    description?: (string | null);
    model_name?: (string | null);
    temperature?: (number | null);
    conversation_metadata?: ({
    [key: string]: unknown;
} | null);
    infospace_id: number;
    messages?: (Array<ChatConversationMessageCreate> | null);
};

/**
 * Schema for creating a new chat message.
 */
export type ChatConversationMessageCreate = {
    role: string;
    content: string;
    message_metadata?: ({
    [key: string]: unknown;
} | null);
    tool_calls?: (Array<{
    [key: string]: unknown;
}> | null);
    tool_executions?: (Array<{
    [key: string]: unknown;
}> | null);
    thinking_trace?: (string | null);
    model_used?: (string | null);
    usage?: ({
    [key: string]: unknown;
} | null);
};

/**
 * Schema for reading a chat message.
 */
export type ChatConversationMessageRead = {
    role: string;
    content: string;
    message_metadata?: ({
    [key: string]: unknown;
} | null);
    tool_calls?: (Array<{
    [key: string]: unknown;
}> | null);
    tool_executions?: (Array<{
    [key: string]: unknown;
}> | null);
    thinking_trace?: (string | null);
    model_used?: (string | null);
    usage?: ({
    [key: string]: unknown;
} | null);
    id: number;
    conversation_id: number;
    created_at: string;
};

/**
 * Schema for reading a chat conversation.
 */
export type ChatConversationRead = {
    title: string;
    description?: (string | null);
    model_name?: (string | null);
    temperature?: (number | null);
    conversation_metadata?: ({
    [key: string]: unknown;
} | null);
    id: number;
    uuid: string;
    infospace_id: number;
    user_id: number;
    is_archived: boolean;
    is_pinned: boolean;
    created_at: string;
    updated_at: string;
    last_message_at: (string | null);
    message_count?: (number | null);
};

/**
 * Paginated list of chat conversations.
 */
export type ChatConversationsOut = {
    data: Array<ChatConversationRead>;
    count: number;
};

/**
 * Schema for updating a chat conversation.
 */
export type ChatConversationUpdate = {
    title?: (string | null);
    description?: (string | null);
    model_name?: (string | null);
    temperature?: (number | null);
    conversation_metadata?: ({
    [key: string]: unknown;
} | null);
    is_archived?: (boolean | null);
    is_pinned?: (boolean | null);
};

/**
 * Schema for chat conversation with full message history.
 */
export type ChatConversationWithMessages = {
    title: string;
    description?: (string | null);
    model_name?: (string | null);
    temperature?: (number | null);
    conversation_metadata?: ({
    [key: string]: unknown;
} | null);
    id: number;
    uuid: string;
    infospace_id: number;
    user_id: number;
    is_archived: boolean;
    is_pinned: boolean;
    created_at: string;
    updated_at: string;
    last_message_at: (string | null);
    message_count?: (number | null);
    messages: Array<ChatConversationMessageRead>;
};

/**
 * Individual message in a conversation.
 */
export type ChatMessage = {
    role: string;
    content: string;
};

/**
 * Request for intelligence analysis chat.
 */
export type ChatRequest = {
    messages: Array<ChatMessage>;
    model_name: string;
    infospace_id: number;
    stream?: boolean;
    temperature?: (number | null);
    max_tokens?: (number | null);
    thinking_enabled?: boolean;
    api_keys?: ({
    [key: string]: string;
} | null);
    conversation_id?: (number | null);
    auto_save?: boolean;
    display_content?: (string | null);
    context_assets?: (Array<{
    [key: string]: unknown;
}> | null);
    context_depth?: (string | null);
};

/**
 * Response from intelligence analysis chat.
 */
export type ChatResponse = {
    content: string;
    model_used: string;
    usage?: ({
    [key: string]: unknown;
} | null);
    tool_calls?: (Array<{
    [key: string]: unknown;
}> | null);
    tool_executions?: (Array<{
    [key: string]: unknown;
}> | null);
    thinking_trace?: (string | null);
    finish_reason?: (string | null);
};

export type ChunkAssetRequest = {
    strategy?: string;
    chunk_size?: number;
    chunk_overlap?: number;
    overwrite_existing?: boolean;
};

export type ChunkAssetsRequest = {
    asset_ids?: (Array<number> | null);
    asset_kinds?: (Array<string> | null);
    infospace_id?: (number | null);
    strategy?: string;
    chunk_size?: number;
    chunk_overlap?: number;
    overwrite_existing?: boolean;
};

export type ChunkingResultResponse = {
    message: string;
    asset_id: number;
    chunks_created: number;
    strategy_used: string;
    strategy_params: {
        [key: string]: unknown;
    };
};

export type ChunkingStatsResponse = {
    total_chunks: number;
    total_characters?: (number | null);
    average_chunk_size?: (number | null);
    assets_with_chunks?: (number | null);
    strategies_used?: ({
    [key: string]: number;
} | null);
};

export type CreatePackageFromRunRequest = {
    name: string;
    description?: (string | null);
};

export type DatasetCreate = {
    name: string;
    description?: (string | null);
    asset_ids?: Array<number>;
};

export type DatasetPackageEntitySummary = {
    entity_uuid?: (string | null);
    name?: (string | null);
    description?: (string | null);
};

export type DatasetPackageFileManifestItem = {
    filename: string;
    original_collection_uuid?: (string | null);
    original_collection_id?: (number | null);
    type?: (string | null);
    linked_asset_uuid?: (string | null);
};

export type DatasetPackageSummary = {
    package_metadata: {
        [key: string]: unknown;
    };
    dataset_details: DatasetPackageEntitySummary;
    record_count?: number;
    annotation_results_count?: number;
    included_schemas?: Array<DatasetPackageEntitySummary>;
    included_runs?: Array<DatasetPackageEntitySummary>;
    linked_collections_summary?: Array<DatasetPackageEntitySummary>;
    source_files_manifest?: Array<DatasetPackageFileManifestItem>;
};

export type DatasetRead = {
    name: string;
    description?: (string | null);
    id: number;
    infospace_id: number;
    asset_ids?: (Array<number> | null);
    created_at: string;
    entity_uuid: string;
    user_id: number;
    updated_at: string;
};

export type DatasetsOut = {
    data: Array<DatasetRead>;
    count: number;
};

export type DatasetUpdate = {
    name?: (string | null);
    description?: (string | null);
    asset_ids?: (Array<number> | null);
};

/**
 * Request for creating assets directly from search result data
 */
export type DirectAssetCreationRequest = {
    search_results: Array<{
        [key: string]: unknown;
    }>;
    infospace_id: number;
    bundle_id?: (number | null);
    search_metadata?: ({
    [key: string]: unknown;
} | null);
};

/**
 * Request for discovering embedding models with runtime API keys.
 */
export type DiscoverModelsRequest = {
    /**
     * Runtime API keys for providers
     */
    api_keys?: ({
    [key: string]: string;
} | null);
};

/**
 * Information about an embedding model.
 */
export type EmbeddingModelInfo = {
    name: string;
    provider: string;
    dimension: number;
    description?: (string | null);
    max_sequence_length?: (number | null);
};

/**
 * Response with embedding statistics.
 */
export type EmbeddingStatsResponse = {
    total_assets: number;
    total_chunks: number;
    embedded_chunks: number;
    coverage_percentage: number;
    models_used: {
        [key: string]: unknown;
    };
};

export type ExportBatchRequest = {
    resource_type: ResourceType;
    resource_ids: Array<number>;
};

export type ExportMixedBatchRequest = {
    asset_ids?: Array<number>;
    bundle_ids?: Array<number>;
};

export type ExternalSearchRequest = {
    query: string;
    provider?: string;
    limit?: number;
    infospace_id: number;
    scrape_content?: boolean;
    create_assets?: boolean;
    bundle_id?: (number | null);
    include_domains?: (Array<string> | null);
    exclude_domains?: (Array<string> | null);
    api_key?: (string | null);
    search_depth?: (string | null);
    include_images?: (boolean | null);
    include_answer?: (boolean | null);
    topic?: (string | null);
    chunks_per_source?: (number | null);
    days?: (number | null);
    time_range?: (string | null);
    country?: (string | null);
};

export type FieldJustificationConfig = {
    enabled: boolean;
    custom_prompt?: (string | null);
};

export type FileUploadResponse = {
    /**
     * Original uploaded filename
     */
    filename: string;
    /**
     * Object name in storage
     */
    object_name: string;
};

/**
 * Request to generate embeddings for a single asset.
 */
export type GenerateAssetEmbeddingsRequest = {
    /**
     * Regenerate existing embeddings
     */
    overwrite?: boolean;
    /**
     * Process in background
     */
    async_processing?: boolean;
};

/**
 * Request to generate embeddings for an infospace.
 */
export type GenerateEmbeddingsRequest = {
    /**
     * Regenerate existing embeddings
     */
    overwrite?: boolean;
    /**
     * Filter by asset types
     */
    asset_kinds?: (Array<string> | null);
    /**
     * Process in background
     */
    async_processing?: boolean;
    /**
     * Runtime API keys for cloud providers
     */
    api_keys?: ({
    [key: string]: string;
} | null);
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type ImportFromTokenRequest = {
    target_infospace_id: number;
};

export type InfospaceBackupCreate = {
    name: string;
    description?: (string | null);
    expires_at?: (string | null);
    backup_type?: (string | null);
    include_sources?: boolean;
    include_schemas?: boolean;
    include_runs?: boolean;
    include_datasets?: boolean;
    include_annotations?: boolean;
};

export type InfospaceBackupRead = {
    name: string;
    description?: (string | null);
    expires_at?: (string | null);
    id: number;
    uuid: string;
    infospace_id: number;
    user_id: number;
    backup_type: string;
    storage_path: string;
    file_size_bytes?: (number | null);
    content_hash?: (string | null);
    included_sources?: number;
    included_assets?: number;
    included_schemas?: number;
    included_runs?: number;
    included_datasets?: number;
    status: string;
    error_message?: (string | null);
    created_at: string;
    completed_at?: (string | null);
    is_shareable?: boolean;
    share_token?: (string | null);
    /**
     * Check if backup has expired.
     */
    readonly is_expired: boolean;
    /**
     * Check if backup is ready for use.
     */
    readonly is_ready: boolean;
    /**
     * Generate download URL if backup is shareable.
     */
    readonly download_url: (string | null);
};

export type InfospaceBackupsOut = {
    data: Array<InfospaceBackupRead>;
    count: number;
};

export type InfospaceBackupUpdate = {
    name?: (string | null);
    description?: (string | null);
    is_shareable?: (boolean | null);
    expires_at?: (string | null);
};

export type InfospaceCreate = {
    name: string;
    description?: (string | null);
    icon?: (string | null);
    owner_id: number;
    vector_backend?: (string | null);
    embedding_model?: (string | null);
    embedding_dim?: (number | null);
    chunk_size?: (number | null);
    chunk_overlap?: (number | null);
    chunk_strategy?: (string | null);
};

export type InfospaceRead = {
    name: string;
    description?: (string | null);
    icon?: (string | null);
    id: number;
    owner_id: number;
    created_at: string;
    vector_backend?: (string | null);
    embedding_model?: (string | null);
    embedding_dim?: (number | null);
    chunk_size?: (number | null);
    chunk_overlap?: (number | null);
    chunk_strategy?: (string | null);
};

export type InfospacesOut = {
    data: Array<InfospaceRead>;
    count: number;
};

export type InfospaceUpdate = {
    name?: (string | null);
    description?: (string | null);
    vector_backend?: (string | null);
    embedding_model?: (string | null);
    embedding_dim?: (number | null);
    chunk_size?: (number | null);
    chunk_overlap?: (number | null);
    chunk_strategy?: (string | null);
    icon?: (string | null);
};

export type IntelligencePipelineCreate = {
    name: string;
    description?: (string | null);
    source_bundle_ids: Array<number>;
    steps: Array<PipelineStepCreate>;
};

export type IntelligencePipelineRead = {
    name: string;
    description?: (string | null);
    source_bundle_ids: Array<number>;
    id: number;
    uuid: string;
    infospace_id: number;
    user_id: number;
    linked_task_id: (number | null);
    steps: Array<PipelineStepRead>;
};

export type IntelligencePipelineUpdate = {
    name?: (string | null);
    description?: (string | null);
    source_bundle_ids?: (Array<number> | null);
    steps?: (Array<PipelineStepCreate> | null);
};

export type Message = {
    message: string;
};

/**
 * Information about a language model.
 */
export type ModelInfo = {
    name: string;
    provider: string;
    description?: (string | null);
    supports_structured_output?: boolean;
    supports_tools?: boolean;
    supports_streaming?: boolean;
    supports_thinking?: boolean;
    supports_multimodal?: boolean;
    max_tokens?: (number | null);
    context_length?: (number | null);
};

/**
 * Response listing available models.
 */
export type ModelListResponse = {
    models: Array<ModelInfo>;
    providers: Array<string>;
};

export type MonitorCreate = {
    name: string;
    description?: (string | null);
    schedule: string;
    target_bundle_ids: Array<number>;
    target_schema_ids: Array<number>;
    run_config_override?: ({
    [key: string]: unknown;
} | null);
};

export type MonitorRead = {
    name: string;
    description?: (string | null);
    schedule: string;
    target_bundle_ids: Array<number>;
    target_schema_ids: Array<number>;
    run_config_override?: ({
    [key: string]: unknown;
} | null);
    id: number;
    uuid: string;
    infospace_id: number;
    user_id: number;
    linked_task_id: number;
    status: string;
    last_checked_at?: (string | null);
};

export type MonitorUpdate = {
    name?: (string | null);
    description?: (string | null);
    schedule?: (string | null);
    target_bundle_ids?: (Array<number> | null);
    target_schema_ids?: (Array<number> | null);
    run_config_override?: ({
    [key: string]: unknown;
} | null);
    status?: (string | null);
};

export type NewPassword = {
    token: string;
    new_password: string;
};

export type PackageRead = {
    name: string;
    description?: (string | null);
    id: number;
    infospace_id: number;
    created_at: string;
};

export type Paginated = {
    data: Array<unknown>;
    count: number;
};

export type PermissionLevel = 'read_only' | 'edit' | 'full_access';

export type PipelineExecutionRead = {
    id: number;
    pipeline_id: number;
    status: string;
    trigger_type: string;
    started_at: string;
    completed_at: (string | null);
    triggering_asset_ids: (Array<number> | null);
};

export type PipelineStepCreate = {
    name: string;
    step_order: number;
    /**
     * Type of step: ANNOTATE, FILTER, ANALYZE, BUNDLE
     */
    step_type: string;
    /**
     * Configuration for the step
     */
    configuration: {
        [key: string]: unknown;
    };
    /**
     * Source of input for this step
     */
    input_source: {
        [key: string]: unknown;
    };
};

export type PipelineStepRead = {
    name: string;
    step_order: number;
    /**
     * Type of step: ANNOTATE, FILTER, ANALYZE, BUNDLE
     */
    step_type: string;
    /**
     * Configuration for the step
     */
    configuration: {
        [key: string]: unknown;
    };
    /**
     * Source of input for this step
     */
    input_source: {
        [key: string]: unknown;
    };
    id: number;
    pipeline_id: number;
};

/**
 * Status for asset processing (creating child assets).
 */
export type ProcessingStatus = 'ready' | 'pending' | 'processing' | 'failed';

export type PromoteFragmentRequest = {
    fragment_key: string;
    fragment_value: unknown;
    source_run_id?: (number | null);
};

export type ProviderInfo = {
    provider_name: string;
    models: Array<ProviderModel>;
};

export type ProviderListResponse = {
    providers: Array<ProviderInfo>;
};

export type ProviderModel = {
    name: string;
    description?: (string | null);
};

export type QueryType = {
    type: string;
};

export type RegistrationStats = {
    total_users: number;
    users_created_today: number;
    users_created_this_week: number;
    users_created_this_month: number;
    open_registration_enabled: boolean;
    last_registration: (string | null);
};

export type ReprocessOptions = {
    delimiter?: (string | null);
    encoding?: (string | null);
    skip_rows?: (number | null);
    max_rows?: (number | null);
    timeout?: (number | null);
};

/**
 * Request object for search synthesizer
 */
export type Request = {
    query: string;
    query_type: QueryType;
};

export type ResourceType = 'source' | 'bundle' | 'asset' | 'schema' | 'infospace' | 'run' | 'package' | 'dataset' | 'mixed';

export type ResultStatus = 'success' | 'failed';

export type RSSDiscoveryRequest = {
    country: string;
    category_filter?: (string | null);
    max_feeds?: number;
    max_items_per_feed?: number;
    bundle_id?: (number | null);
    options?: ({
    [key: string]: unknown;
} | null);
};

export type RssSourceCreateRequest = {
    feed_url: string;
    source_name?: (string | null);
    auto_monitor?: boolean;
    monitoring_schedule?: (string | null);
    target_bundle_id?: (number | null);
    target_bundle_name?: (string | null);
};

export type RunStatus = 'pending' | 'running' | 'completed' | 'failed' | 'completed_with_errors';

export type SearchAndIngestResponse = {
    query: string;
    provider: string;
    results_found: number;
    results?: (Array<{
    [key: string]: unknown;
}> | null);
    assets_created?: number;
    asset_ids?: Array<number>;
    status: string;
    message: string;
};

export type SearchRequest = {
    query: string;
    limit?: number;
    provider?: string;
    args?: Array<string>;
    kwargs?: {
        [key: string]: unknown;
    };
};

/**
 * Single search result with pre-fetched content
 */
export type SearchResultItem = {
    title: string;
    url: string;
    content: string;
    score?: (number | null);
    provider?: (string | null);
    source_metadata?: ({
    [key: string]: unknown;
} | null);
};

export type SearchResultOut = {
    title: string;
    url: string;
    content: string;
    score?: (number | null);
    raw?: ({
    [key: string]: unknown;
} | null);
};

export type SearchResultsOut = {
    provider: string;
    results: Array<SearchResultOut>;
};

export type SearchType = 'text' | 'semantic';

/**
 * Request for creating assets from specific search result URLs
 */
export type SelectiveAssetCreationRequest = {
    urls: Array<string>;
    infospace_id: number;
    bundle_id?: (number | null);
    scrape_content?: boolean;
    search_metadata?: ({
    [key: string]: unknown;
} | null);
};

/**
 * Request for semantic search.
 */
export type SemanticSearchRequest = {
    /**
     * Search query text
     */
    query: string;
    /**
     * Maximum results
     */
    limit?: number;
    /**
     * Filter by asset types
     */
    asset_kinds?: (Array<string> | null);
    /**
     * Filter from date
     */
    date_from?: (string | null);
    /**
     * Filter to date
     */
    date_to?: (string | null);
    /**
     * Filter by bundle
     */
    bundle_id?: (number | null);
    /**
     * Maximum distance
     */
    distance_threshold?: (number | null);
    /**
     * Distance function: cosine, l2, inner_product
     */
    distance_function?: string;
    /**
     * Runtime API keys for cloud providers
     */
    api_keys?: ({
    [key: string]: string;
} | null);
};

/**
 * Response from semantic search.
 */
export type SemanticSearchResponse = {
    query: string;
    results: Array<{
        [key: string]: unknown;
    }>;
    total_found: number;
    infospace_id: number;
};

export type ShareableLinkCreate = {
    name?: (string | null);
    permission_level?: PermissionLevel;
    is_public?: boolean;
    expiration_date?: (string | null);
    max_uses?: (number | null);
    resource_type: ResourceType;
    resource_id: number;
};

export type ShareableLinkRead = {
    name?: (string | null);
    permission_level?: PermissionLevel;
    is_public?: boolean;
    expiration_date?: (string | null);
    max_uses?: (number | null);
    id: number;
    token: string;
    user_id: number;
    resource_type: ResourceType;
    resource_id: number;
    use_count: number;
    created_at: string;
    infospace_id?: (number | null);
    readonly share_url: string;
};

export type ShareableLinkStats = {
    total_links: number;
    active_links: number;
    expired_links: number;
    links_by_resource_type: {
        [key: string]: number;
    };
    most_shared_resources: Array<{
        [key: string]: unknown;
    }>;
    most_used_links: Array<{
        [key: string]: unknown;
    }>;
};

export type ShareableLinkUpdate = {
    name?: (string | null);
    permission_level?: (PermissionLevel | null);
    is_public?: (boolean | null);
    expiration_date?: (string | null);
    max_uses?: (number | null);
};

/**
 * The complete public-facing model for a shared resource view.
 */
export type SharedResourcePreview = {
    resource_type: ResourceType;
    name: string;
    description?: (string | null);
    content: (AssetPreview | BundlePreview | AnnotationRunPreview);
};

export type SourceCreateRequest = {
    name: string;
    kind: string;
    details?: {
        [key: string]: unknown;
    };
    enable_monitoring?: boolean;
    schedule?: (string | null);
    target_bundle_id?: (number | null);
    target_bundle_name?: (string | null);
};

export type SourceRead = {
    name: string;
    kind: string;
    details?: {
        [key: string]: unknown;
    };
    id: number;
    uuid: string;
    infospace_id: number;
    user_id: number;
    status: string;
    created_at: string;
    updated_at: string;
    error_message: (string | null);
    source_metadata?: ({
    [key: string]: unknown;
} | null);
    monitoring_tasks?: Array<TaskRead>;
    asset_count?: (number | null);
    /**
     * True if the source has any enabled monitoring tasks.
     */
    readonly is_monitored: boolean;
};

export type SourcesOut = {
    data: Array<SourceRead>;
    count: number;
};

export type SourceTransferRequest = {
    source_ids: Array<number>;
    target_infospace_id: number;
    target_user_id: number;
};

export type SourceTransferResponse = {
    message: string;
    source_id: number;
    infospace_id: number;
};

export type SourceUpdate = {
    name?: (string | null);
    kind?: (string | null);
    details?: ({
    [key: string]: unknown;
} | null);
};

export type TaskCreate = {
    name: string;
    type: TaskType;
    schedule: string;
    configuration?: {
        [key: string]: unknown;
    };
    source_id?: (number | null);
};

export type TaskRead = {
    name: string;
    type: TaskType;
    schedule: string;
    configuration?: {
        [key: string]: unknown;
    };
    id: number;
    infospace_id: number;
    status: TaskStatus;
    is_enabled: boolean;
    last_run_at: (string | null);
    consecutive_failure_count: number;
};

export type TasksOut = {
    data: Array<TaskRead>;
    count: number;
};

export type TaskStatus = 'active' | 'paused' | 'error';

export type TaskType = 'ingest' | 'annotate' | 'pipeline' | 'monitor';

export type TaskUpdate = {
    name?: (string | null);
    type?: (TaskType | null);
    schedule?: (string | null);
    configuration?: ({
    [key: string]: unknown;
} | null);
    status?: (TaskStatus | null);
    is_enabled?: (boolean | null);
};

export type Token = {
    access_token: string;
    token_type?: string;
};

/**
 * Request to execute a tool call.
 */
export type ToolCallRequest = {
    tool_name: string;
    arguments: {
        [key: string]: unknown;
    };
    infospace_id: number;
};

/**
 * Response containing children of a node.
 */
export type TreeChildrenResponse = {
    parent_id: string;
    children: Array<TreeNode>;
    total_children: number;
    has_more: boolean;
};

export type TreeDeleteRequest = {
    node_ids: Array<string>;
};

/**
 * Minimal representation of a tree node for efficient tree rendering.
 */
export type TreeNode = {
    id: string;
    type: TreeNodeType;
    name: string;
    kind?: (AssetKind | null);
    is_container?: (boolean | null);
    children_count?: (number | null);
    has_children?: boolean;
    parent_id?: (string | null);
    updated_at: string;
    created_at?: (string | null);
    asset_count?: (number | null);
    child_bundle_count?: (number | null);
    processing_status?: (ProcessingStatus | null);
    stub?: (boolean | null);
};

/**
 * Type of node in the file tree.
 */
export type TreeNodeType = 'bundle' | 'asset';

/**
 * Response containing tree structure.
 */
export type TreeResponse = {
    nodes: Array<TreeNode>;
    total_bundles: number;
    total_assets: number;
    total_nodes: number;
};

export type UpdatePassword = {
    current_password: string;
    new_password: string;
};

export type UserBackupCreate = {
    name: string;
    description?: (string | null);
    backup_type?: string;
    target_user_id: number;
    expires_at?: (string | null);
};

export type UserBackupRead = {
    name: string;
    description?: (string | null);
    backup_type: string;
    id: number;
    uuid: string;
    target_user_id: number;
    created_by_user_id: number;
    storage_path: string;
    file_size_bytes?: (number | null);
    content_hash?: (string | null);
    included_infospaces?: number;
    included_assets?: number;
    included_schemas?: number;
    included_runs?: number;
    included_annotations?: number;
    included_datasets?: number;
    status: string;
    error_message?: (string | null);
    created_at: string;
    completed_at?: (string | null);
    is_shareable?: boolean;
    share_token?: (string | null);
    is_expired: boolean;
    is_ready: boolean;
    /**
     * Generate download URL if shareable.
     */
    readonly download_url: (string | null);
};

export type UserBackupRestoreRequest = {
    backup_id: number;
    target_user_email?: (string | null);
    conflict_strategy?: string;
};

export type UserBackupShareRequest = {
    backup_id: number;
    is_shareable?: boolean;
    expiration_hours?: (number | null);
};

export type UserBackupsOut = {
    data: Array<UserBackupRead>;
    count: number;
};

export type UserBackupUpdate = {
    name?: (string | null);
    description?: (string | null);
    is_shareable?: (boolean | null);
};

export type UserCreate = {
    email: string;
    full_name?: (string | null);
    tier?: UserTier;
    profile_picture_url?: (string | null);
    bio?: (string | null);
    description?: (string | null);
    password: string;
    is_superuser?: boolean;
    is_active?: boolean;
    send_welcome_email?: boolean;
};

export type UserCreateOpen = {
    email: string;
    password: string;
    full_name?: (string | null);
    profile_picture_url?: (string | null);
    bio?: (string | null);
    description?: (string | null);
};

export type UserOut = {
    email: string;
    full_name?: (string | null);
    tier?: UserTier;
    profile_picture_url?: (string | null);
    bio?: (string | null);
    description?: (string | null);
    id: number;
    is_active?: boolean;
    is_superuser?: boolean;
    created_at: string;
    updated_at: string;
};

/**
 * User profile statistics.
 */
export type UserProfileStats = {
    user_id: number;
    infospaces_count: number;
    assets_count: number;
    annotations_count: number;
    member_since: string;
};

/**
 * Dedicated schema for profile-only updates (no email/password).
 */
export type UserProfileUpdate = {
    full_name?: (string | null);
    profile_picture_url?: (string | null);
    /**
     * Short bio (max 500 characters)
     */
    bio?: (string | null);
    /**
     * Longer description (max 2000 characters)
     */
    description?: (string | null);
};

/**
 * Public user profile (no sensitive information).
 */
export type UserPublicProfile = {
    id: number;
    full_name?: (string | null);
    profile_picture_url?: (string | null);
    bio?: (string | null);
    description?: (string | null);
    created_at: string;
};

export type UsersOut = {
    data: Array<UserOut>;
    count: number;
};

export type UserTier = 'tier_0' | 'free' | 'pro' | 'tier_1' | 'enterprise';

export type UserUpdate = {
    full_name?: (string | null);
    email?: (string | null);
    password?: (string | null);
    is_active?: (boolean | null);
    tier?: (UserTier | null);
    profile_picture_url?: (string | null);
    bio?: (string | null);
    description?: (string | null);
};

export type UserUpdateMe = {
    full_name?: (string | null);
    email?: (string | null);
    profile_picture_url?: (string | null);
    /**
     * Short bio (max 500 characters)
     */
    bio?: (string | null);
    /**
     * Longer description (max 2000 characters)
     */
    description?: (string | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type GetRegistrationStatsResponse = (RegistrationStats);

export type ListAnalysisAdaptersResponse = (Array<AnalysisAdapterRead>);

export type ExecuteAnalysisAdapterData = {
    /**
     * The registered name of the adapter
     */
    adapterName: string;
    requestBody: {
        [key: string]: unknown;
    };
};

export type ExecuteAnalysisAdapterResponse = ({
    [key: string]: unknown;
});

export type PromoteFragmentData = {
    assetId: number;
    infospaceId: number;
    requestBody: PromoteFragmentRequest;
};

export type PromoteFragmentResponse = (AnnotationRead);

export type CreateRunData = {
    infospaceId: number;
    requestBody: AnnotationRunCreate;
};

export type CreateRunResponse = (AnnotationRunRead);

export type ListRunsData = {
    /**
     * Include counts of annotations and assets
     */
    includeCounts?: boolean;
    infospaceId: number;
    limit?: number;
    skip?: number;
};

export type ListRunsResponse = (AnnotationRunsOut);

export type CreateRun1Data = {
    infospaceId: number;
    requestBody: AnnotationRunCreate;
};

export type CreateRun1Response = (AnnotationRunRead);

export type ListRuns1Data = {
    /**
     * Include counts of annotations and assets
     */
    includeCounts?: boolean;
    infospaceId: number;
    limit?: number;
    skip?: number;
};

export type ListRuns1Response = (AnnotationRunsOut);

export type GetRunData = {
    /**
     * Include counts of annotations and assets
     */
    includeCounts?: boolean;
    infospaceId: number;
    runId: number;
};

export type GetRunResponse = (AnnotationRunRead);

export type UpdateRunData = {
    infospaceId: number;
    requestBody: AnnotationRunUpdate;
    runId: number;
};

export type UpdateRunResponse = (AnnotationRunRead);

export type DeleteRunData = {
    infospaceId: number;
    runId: number;
};

export type DeleteRunResponse = (void);

export type RetryFailedAnnotationsData = {
    infospaceId: number;
    runId: number;
};

export type RetryFailedAnnotationsResponse = (Message);

export type CreatePackageFromRunEndpointData = {
    infospaceId: number;
    requestBody: CreatePackageFromRunRequest;
    runId: number;
};

export type CreatePackageFromRunEndpointResponse = (PackageRead);

export type CreateAnnotationData = {
    infospaceId: number;
    requestBody: AnnotationCreate;
};

export type CreateAnnotationResponse = (AnnotationRead);

export type CreateAnnotation1Data = {
    infospaceId: number;
    requestBody: AnnotationCreate;
};

export type CreateAnnotation1Response = (AnnotationRead);

export type ListAnnotationsData = {
    infospaceId: number;
    limit?: number;
    schemaId?: (number | null);
    skip?: number;
    sourceId?: (number | null);
};

export type ListAnnotationsResponse = (AnnotationsOut);

export type ListAnnotations1Data = {
    infospaceId: number;
    limit?: number;
    schemaId?: (number | null);
    skip?: number;
    sourceId?: (number | null);
};

export type ListAnnotations1Response = (AnnotationsOut);

export type CreateAnnotation2Data = {
    infospaceId: number;
    requestBody: AnnotationCreate;
};

export type CreateAnnotation2Response = (AnnotationRead);

export type CreateAnnotation3Data = {
    infospaceId: number;
    requestBody: AnnotationCreate;
};

export type CreateAnnotation3Response = (AnnotationRead);

export type ListAnnotations2Data = {
    infospaceId: number;
    limit?: number;
    schemaId?: (number | null);
    skip?: number;
    sourceId?: (number | null);
};

export type ListAnnotations2Response = (AnnotationsOut);

export type ListAnnotations3Data = {
    infospaceId: number;
    limit?: number;
    schemaId?: (number | null);
    skip?: number;
    sourceId?: (number | null);
};

export type ListAnnotations3Response = (AnnotationsOut);

export type GetAnnotationData = {
    annotationId: number;
    infospaceId: number;
};

export type GetAnnotationResponse = (AnnotationRead);

export type GetAnnotation1Data = {
    annotationId: number;
    infospaceId: number;
};

export type GetAnnotation1Response = (AnnotationRead);

export type UpdateAnnotationData = {
    annotationId: number;
    infospaceId: number;
    requestBody: AnnotationUpdate;
};

export type UpdateAnnotationResponse = (AnnotationRead);

export type UpdateAnnotation1Data = {
    annotationId: number;
    infospaceId: number;
    requestBody: AnnotationUpdate;
};

export type UpdateAnnotation1Response = (AnnotationRead);

export type DeleteAnnotationData = {
    annotationId: number;
    infospaceId: number;
};

export type DeleteAnnotationResponse = (void);

export type DeleteAnnotation1Data = {
    annotationId: number;
    infospaceId: number;
};

export type DeleteAnnotation1Response = (void);

export type CreateBatchAnnotationsData = {
    infospaceId: number;
    requestBody: Array<AnnotationCreate>;
};

export type CreateBatchAnnotationsResponse = (Message);

export type CreateBatchAnnotations1Data = {
    infospaceId: number;
    requestBody: Array<AnnotationCreate>;
};

export type CreateBatchAnnotations1Response = (Message);

export type GetRunResultsData = {
    infospaceId: number;
    limit?: number;
    runId: number;
    skip?: number;
};

export type GetRunResultsResponse = (Array<AnnotationRead>);

export type GetRunResults1Data = {
    infospaceId: number;
    limit?: number;
    runId: number;
    skip?: number;
};

export type GetRunResults1Response = (Array<AnnotationRead>);

export type RetrySingleAnnotationData = {
    annotationId: number;
    infospaceId: number;
    requestBody: AnnotationRetryRequest;
};

export type RetrySingleAnnotationResponse = (AnnotationRead);

export type RetrySingleAnnotation1Data = {
    annotationId: number;
    infospaceId: number;
    requestBody: AnnotationRetryRequest;
};

export type RetrySingleAnnotation1Response = (AnnotationRead);

export type CreateAnnotationSchemaData = {
    /**
     * The ID of the infospace
     */
    infospaceId: number;
    requestBody: AnnotationSchemaCreate;
};

export type CreateAnnotationSchemaResponse = (AnnotationSchemaRead);

export type ListAnnotationSchemasData = {
    /**
     * Include archived (inactive) schemas
     */
    includeArchived?: boolean;
    /**
     * Include counts of annotations using this schema
     */
    includeCounts?: boolean;
    /**
     * The ID of the infospace
     */
    infospaceId: number;
    limit?: number;
    skip?: number;
};

export type ListAnnotationSchemasResponse = (AnnotationSchemasOut);

export type CreateAnnotationSchema1Data = {
    /**
     * The ID of the infospace
     */
    infospaceId: number;
    requestBody: AnnotationSchemaCreate;
};

export type CreateAnnotationSchema1Response = (AnnotationSchemaRead);

export type ListAnnotationSchemas1Data = {
    /**
     * Include archived (inactive) schemas
     */
    includeArchived?: boolean;
    /**
     * Include counts of annotations using this schema
     */
    includeCounts?: boolean;
    /**
     * The ID of the infospace
     */
    infospaceId: number;
    limit?: number;
    skip?: number;
};

export type ListAnnotationSchemas1Response = (AnnotationSchemasOut);

export type GetAnnotationSchemaData = {
    /**
     * Include counts of annotations using this schema
     */
    includeCounts?: boolean;
    /**
     * The ID of the infospace
     */
    infospaceId: number;
    schemaId: number;
};

export type GetAnnotationSchemaResponse = (AnnotationSchemaRead);

export type UpdateAnnotationSchemaData = {
    /**
     * The ID of the infospace
     */
    infospaceId: number;
    requestBody: AnnotationSchemaUpdate;
    schemaId: number;
};

export type UpdateAnnotationSchemaResponse = (AnnotationSchemaRead);

export type DeleteAnnotationSchemaData = {
    /**
     * The ID of the infospace
     */
    infospaceId: number;
    schemaId: number;
};

export type DeleteAnnotationSchemaResponse = (AnnotationSchemaRead);

export type RestoreAnnotationSchemaData = {
    infospaceId: number;
    schemaId: number;
};

export type RestoreAnnotationSchemaResponse = (AnnotationSchemaRead);

export type ReadyzResponse = (unknown);

export type LivenessResponse = (unknown);

export type HealthzResponse = (unknown);

export type CreateAssetData = {
    infospaceId: number;
    requestBody: AssetCreate;
};

export type CreateAssetResponse = (AssetRead);

export type CreateAsset1Data = {
    infospaceId: number;
    requestBody: AssetCreate;
};

export type CreateAsset1Response = (AssetRead);

export type ListAssetsData = {
    infospaceId: number;
    limit?: number;
    parentAssetId?: (number | null);
    skip?: number;
};

export type ListAssetsResponse = (AssetsOut);

export type ListAssets1Data = {
    infospaceId: number;
    limit?: number;
    parentAssetId?: (number | null);
    skip?: number;
};

export type ListAssets1Response = (AssetsOut);

export type CreateAsset2Data = {
    infospaceId: number;
    requestBody: AssetCreate;
};

export type CreateAsset2Response = (AssetRead);

export type CreateAsset3Data = {
    infospaceId: number;
    requestBody: AssetCreate;
};

export type CreateAsset3Response = (AssetRead);

export type ListAssets2Data = {
    infospaceId: number;
    limit?: number;
    parentAssetId?: (number | null);
    skip?: number;
};

export type ListAssets2Response = (AssetsOut);

export type ListAssets3Data = {
    infospaceId: number;
    limit?: number;
    parentAssetId?: (number | null);
    skip?: number;
};

export type ListAssets3Response = (AssetsOut);

export type UploadFileData = {
    formData: Body_assets_upload_file;
    infospaceId: number;
};

export type UploadFileResponse = (AssetRead);

export type UploadFile1Data = {
    formData: Body_assets_upload_file;
    infospaceId: number;
};

export type UploadFile1Response = (AssetRead);

export type IngestUrlData = {
    infospaceId: number;
    scrapeImmediately?: boolean;
    title?: (string | null);
    url: string;
};

export type IngestUrlResponse = (AssetRead);

export type IngestUrl1Data = {
    infospaceId: number;
    scrapeImmediately?: boolean;
    title?: (string | null);
    url: string;
};

export type IngestUrl1Response = (AssetRead);

export type IngestTextData = {
    eventTimestamp?: (string | null);
    infospaceId: number;
    textContent: string;
    title?: (string | null);
};

export type IngestTextResponse = (AssetRead);

export type IngestText1Data = {
    eventTimestamp?: (string | null);
    infospaceId: number;
    textContent: string;
    title?: (string | null);
};

export type IngestText1Response = (AssetRead);

export type ComposeArticleData = {
    infospaceId: number;
    requestBody: ArticleComposition;
};

export type ComposeArticleResponse = (AssetRead);

export type ComposeArticle1Data = {
    infospaceId: number;
    requestBody: ArticleComposition;
};

export type ComposeArticle1Response = (AssetRead);

export type BulkIngestUrlsData = {
    infospaceId: number;
    requestBody: BulkUrlIngestion;
};

export type BulkIngestUrlsResponse = (Array<AssetRead>);

export type BulkIngestUrls1Data = {
    infospaceId: number;
    requestBody: BulkUrlIngestion;
};

export type BulkIngestUrls1Response = (Array<AssetRead>);

export type IngestSearchResultsData = {
    infospaceId: number;
    requestBody: BulkSearchResultIngestion;
};

export type IngestSearchResultsResponse = (Array<AssetRead>);

export type IngestSearchResults1Data = {
    infospaceId: number;
    requestBody: BulkSearchResultIngestion;
};

export type IngestSearchResults1Response = (Array<AssetRead>);

export type ReprocessAssetData = {
    assetId: number;
    infospaceId: number;
    requestBody: ReprocessOptions;
};

export type ReprocessAssetResponse = (Message);

export type ReprocessAsset1Data = {
    assetId: number;
    infospaceId: number;
    requestBody: ReprocessOptions;
};

export type ReprocessAsset1Response = (Message);

export type UpdateAssetContentData = {
    assetId: number;
    formData: Body_assets_update_asset_content;
    infospaceId: number;
};

export type UpdateAssetContentResponse = (Message);

export type UpdateAssetContent1Data = {
    assetId: number;
    formData: Body_assets_update_asset_content;
    infospaceId: number;
};

export type UpdateAssetContent1Response = (Message);

export type DiscoverRssFeedsData = {
    category?: (string | null);
    country?: (string | null);
    infospaceId: number;
    limit?: number;
};

export type DiscoverRssFeedsResponse = (unknown);

export type DiscoverRssFeeds1Data = {
    category?: (string | null);
    country?: (string | null);
    infospaceId: number;
    limit?: number;
};

export type DiscoverRssFeeds1Response = (unknown);

export type PreviewRssFeedData = {
    feedUrl: string;
    infospaceId: number;
    maxItems?: number;
};

export type PreviewRssFeedResponse = (unknown);

export type PreviewRssFeed1Data = {
    feedUrl: string;
    infospaceId: number;
    maxItems?: number;
};

export type PreviewRssFeed1Response = (unknown);

export type IngestSelectedArticlesData = {
    bundleId?: (number | null);
    feedUrl: string;
    infospaceId: number;
    requestBody: Array<{
        [key: string]: unknown;
    }>;
};

export type IngestSelectedArticlesResponse = (unknown);

export type IngestSelectedArticles1Data = {
    bundleId?: (number | null);
    feedUrl: string;
    infospaceId: number;
    requestBody: Array<{
        [key: string]: unknown;
    }>;
};

export type IngestSelectedArticles1Response = (unknown);

export type GetAssetData = {
    assetId: number;
    infospaceId: number;
};

export type GetAssetResponse = (AssetRead);

export type GetAsset1Data = {
    assetId: number;
    infospaceId: number;
};

export type GetAsset1Response = (AssetRead);

export type UpdateAssetData = {
    assetId: number;
    infospaceId: number;
    requestBody: AssetUpdate;
};

export type UpdateAssetResponse = (AssetRead);

export type UpdateAsset1Data = {
    assetId: number;
    infospaceId: number;
    requestBody: AssetUpdate;
};

export type UpdateAsset1Response = (AssetRead);

export type DeleteAssetData = {
    assetId: number;
    infospaceId: number;
};

export type DeleteAssetResponse = (Message);

export type DeleteAsset1Data = {
    assetId: number;
    infospaceId: number;
};

export type DeleteAsset1Response = (Message);

export type GetAssetChildrenData = {
    assetId: number;
    infospaceId: number;
    limit?: number;
    skip?: number;
};

export type GetAssetChildrenResponse = (Array<AssetRead>);

export type GetAssetChildren1Data = {
    assetId: number;
    infospaceId: number;
    limit?: number;
    skip?: number;
};

export type GetAssetChildren1Response = (Array<AssetRead>);

export type BulkDeleteAssetsData = {
    infospaceId: number;
    requestBody: BulkDeleteRequest;
};

export type BulkDeleteAssetsResponse = (Message);

export type BulkDeleteAssets1Data = {
    infospaceId: number;
    requestBody: BulkDeleteRequest;
};

export type BulkDeleteAssets1Response = (Message);

export type TransferAssetsData = {
    requestBody: AssetTransferRequest;
};

export type TransferAssetsResponse = (Array<AssetRead>);

export type TransferAssets1Data = {
    requestBody: AssetTransferRequest;
};

export type TransferAssets1Response = (Array<AssetRead>);

export type GetSupportedContentTypesResponse = ({
    [key: string]: Array<string>;
});

export type GetSupportedContentTypes1Response = ({
    [key: string]: Array<string>;
});

export type CreateAssetsBackgroundBulkData = {
    formData: Body_assets_create_assets_background_bulk;
    infospaceId: number;
};

export type CreateAssetsBackgroundBulkResponse = ({
    [key: string]: unknown;
});

export type CreateAssetsBackgroundBulk1Data = {
    formData: Body_assets_create_assets_background_bulk;
    infospaceId: number;
};

export type CreateAssetsBackgroundBulk1Response = ({
    [key: string]: unknown;
});

export type CreateAssetsBackgroundUrlsData = {
    infospaceId: number;
    requestBody: BulkUrlIngestion;
};

export type CreateAssetsBackgroundUrlsResponse = ({
    [key: string]: unknown;
});

export type CreateAssetsBackgroundUrls1Data = {
    infospaceId: number;
    requestBody: BulkUrlIngestion;
};

export type CreateAssetsBackgroundUrls1Response = ({
    [key: string]: unknown;
});

export type AddFilesToBundleBackgroundData = {
    bundleId: number;
    formData: Body_assets_add_files_to_bundle_background;
    infospaceId: number;
};

export type AddFilesToBundleBackgroundResponse = ({
    [key: string]: unknown;
});

export type AddFilesToBundleBackground1Data = {
    bundleId: number;
    formData: Body_assets_add_files_to_bundle_background;
    infospaceId: number;
};

export type AddFilesToBundleBackground1Response = ({
    [key: string]: unknown;
});

export type GetTaskStatusData = {
    taskId: string;
};

export type GetTaskStatusResponse = ({
    [key: string]: unknown;
});

export type GetTaskStatus1Data = {
    taskId: string;
};

export type GetTaskStatus1Response = ({
    [key: string]: unknown;
});

export type IngestRssFeedsFromAwesomeData = {
    infospaceId: number;
    requestBody: RSSDiscoveryRequest;
};

export type IngestRssFeedsFromAwesomeResponse = (Array<AssetRead>);

export type IngestRssFeedsFromAwesome1Data = {
    infospaceId: number;
    requestBody: RSSDiscoveryRequest;
};

export type IngestRssFeedsFromAwesome1Response = (Array<AssetRead>);

export type CreateBackupData = {
    infospaceId: number;
    requestBody: InfospaceBackupCreate;
};

export type CreateBackupResponse = (InfospaceBackupRead);

export type ListBackupsData = {
    infospaceId: number;
    limit?: number;
    skip?: number;
};

export type ListBackupsResponse = (InfospaceBackupsOut);

export type ListAllUserBackupsData = {
    limit?: number;
    skip?: number;
};

export type ListAllUserBackupsResponse = (InfospaceBackupsOut);

export type GetBackupData = {
    backupId: number;
};

export type GetBackupResponse = (InfospaceBackupRead);

export type UpdateBackupData = {
    backupId: number;
    requestBody: InfospaceBackupUpdate;
};

export type UpdateBackupResponse = (InfospaceBackupRead);

export type DeleteBackupData = {
    backupId: number;
};

export type DeleteBackupResponse = (Message);

export type RestoreBackupData = {
    backupId: number;
    requestBody: BackupRestoreRequest;
};

export type RestoreBackupResponse = (InfospaceRead);

export type CreateBackupShareLinkData = {
    backupId: number;
    requestBody: BackupShareRequest;
};

export type CreateBackupShareLinkResponse = ({
    [key: string]: unknown;
});

export type DownloadSharedBackupData = {
    shareToken: string;
};

export type DownloadSharedBackupResponse = (unknown);

export type CleanupExpiredBackupsResponse = (Message);

export type GetInfospacesBackupOverviewData = {
    limit?: number;
    /**
     * Search infospace names or user emails
     */
    search?: (string | null);
    skip?: number;
    /**
     * Filter by specific user ID
     */
    userId?: (number | null);
};

export type GetInfospacesBackupOverviewResponse = ({
    [key: string]: unknown;
});

export type TriggerBackupAllInfospacesData = {
    backupType?: string;
};

export type TriggerBackupAllInfospacesResponse = (Message);

export type TriggerBackupSpecificInfospacesData = {
    backupType?: string;
    requestBody: Array<number>;
};

export type TriggerBackupSpecificInfospacesResponse = (Message);

export type CreateBundleData = {
    infospaceId: number;
    requestBody: BundleCreate;
};

export type CreateBundleResponse = (BundleRead);

export type GetBundlesData = {
    infospaceId: number;
    limit?: number;
    skip?: number;
};

export type GetBundlesResponse = (Array<BundleRead>);

export type GetBundleData = {
    bundleId: number;
};

export type GetBundleResponse = (BundleRead);

export type UpdateBundleData = {
    bundleId: number;
    requestBody: BundleUpdate;
};

export type UpdateBundleResponse = (BundleRead);

export type DeleteBundleData = {
    bundleId: number;
};

export type DeleteBundleResponse = (void);

export type BulkDeleteBundlesData = {
    requestBody: BulkDeleteBundlesRequest;
};

export type BulkDeleteBundlesResponse = (Message);

export type AddAssetToBundleData = {
    assetId: number;
    bundleId: number;
};

export type AddAssetToBundleResponse = (BundleRead);

export type RemoveAssetFromBundleData = {
    assetId: number;
    bundleId: number;
};

export type RemoveAssetFromBundleResponse = (BundleRead);

export type GetAssetsInBundleData = {
    bundleId: number;
    infospaceId: number;
    limit?: number;
    skip?: number;
};

export type GetAssetsInBundleResponse = (Array<AssetRead>);

export type TransferBundleData = {
    bundleId: number;
    copy?: boolean;
    targetInfospaceId: number;
};

export type TransferBundleResponse = (BundleRead);

export type MoveBundleToParentData = {
    bundleId: number;
    requestBody: BundleMoveRequest;
};

export type MoveBundleToParentResponse = (BundleRead);

export type GetBundleHierarchyData = {
    bundleId: number;
    maxDepth?: number;
};

export type GetBundleHierarchyResponse = (BundleHierarchy);

export type GetRootBundlesData = {
    infospaceId: number;
};

export type GetRootBundlesResponse = (Array<BundleRead>);

export type GetBulkBundleAssetsData = {
    /**
     * Comma-separated list of bundle IDs
     */
    bundleIds: string;
    infospaceId: number;
    limit?: number;
    skip?: number;
};

export type GetBulkBundleAssetsResponse = ({
    [key: string]: unknown;
});

export type ListConversationsData = {
    includeArchived?: boolean;
    infospaceId?: (number | null);
    limit?: number;
    pinnedOnly?: boolean;
    skip?: number;
};

export type ListConversationsResponse = (ChatConversationsOut);

export type CreateConversationData = {
    requestBody: ChatConversationCreate;
};

export type CreateConversationResponse = (ChatConversationRead);

export type GetConversationData = {
    conversationId: number;
};

export type GetConversationResponse = (ChatConversationWithMessages);

export type UpdateConversationData = {
    conversationId: number;
    requestBody: ChatConversationUpdate;
};

export type UpdateConversationResponse = (ChatConversationRead);

export type DeleteConversationData = {
    conversationId: number;
};

export type DeleteConversationResponse = (Message);

export type AddMessageToConversationData = {
    conversationId: number;
    requestBody: AddMessageToConversationRequest;
};

export type AddMessageToConversationResponse = (ChatConversationMessageRead);

export type GetConversationMessagesData = {
    conversationId: number;
    limit?: number;
    skip?: number;
};

export type GetConversationMessagesResponse = (Array<ChatConversationMessageRead>);

export type ChunkSingleAssetData = {
    assetId: number;
    requestBody: ChunkAssetRequest;
};

export type ChunkSingleAssetResponse = (ChunkingResultResponse);

export type ChunkMultipleAssetsData = {
    requestBody: ChunkAssetsRequest;
};

export type ChunkMultipleAssetsResponse = ({
    [key: string]: unknown;
});

export type GetAssetChunksData = {
    assetId: number;
};

export type GetAssetChunksResponse = (Array<AssetChunkRead>);

export type RemoveAssetChunksData = {
    assetId: number;
};

export type RemoveAssetChunksResponse = (unknown);

export type GetChunkingStatisticsData = {
    /**
     * Filter by specific asset
     */
    assetId?: (number | null);
    /**
     * Filter by infospace
     */
    infospaceId?: (number | null);
};

export type GetChunkingStatisticsResponse = (ChunkingStatsResponse);

export type CreateDatasetData = {
    infospaceId: number;
    requestBody: DatasetCreate;
};

export type CreateDatasetResponse = (DatasetRead);

export type ListDatasetsData = {
    infospaceId: number;
    limit?: number;
    skip?: number;
};

export type ListDatasetsResponse = (DatasetsOut);

export type CreateDataset1Data = {
    infospaceId: number;
    requestBody: DatasetCreate;
};

export type CreateDataset1Response = (DatasetRead);

export type ListDatasets1Data = {
    infospaceId: number;
    limit?: number;
    skip?: number;
};

export type ListDatasets1Response = (DatasetsOut);

export type GetDatasetData = {
    datasetId: number;
    infospaceId: number;
};

export type GetDatasetResponse = (DatasetRead);

export type UpdateDatasetData = {
    datasetId: number;
    infospaceId: number;
    requestBody: DatasetUpdate;
};

export type UpdateDatasetResponse = (DatasetRead);

export type DeleteDatasetData = {
    datasetId: number;
    infospaceId: number;
};

export type DeleteDatasetResponse = (Message);

export type ExportDatasetData = {
    datasetId: number;
    /**
     * Include full text content of data records
     */
    includeContent?: boolean;
    /**
     * Include associated classification results
     */
    includeResults?: boolean;
    /**
     * Include original source files (PDFs, CSVs, etc.)
     */
    includeSourceFiles?: boolean;
    infospaceId: number;
};

export type ExportDatasetResponse = (unknown);

export type ImportDatasetData = {
    /**
     * How to handle conflicts
     */
    conflictStrategy?: string;
    formData: Body_datasets_import_dataset;
    infospaceId: number;
};

export type ImportDatasetResponse = (DatasetRead);

export type ImportDatasetFromTokenData = {
    /**
     * How to handle conflicts
     */
    conflictStrategy?: string;
    /**
     * Include full text content if available
     */
    includeContent?: boolean;
    /**
     * Include classification results if available
     */
    includeResults?: boolean;
    infospaceId: number;
    /**
     * Share token for the dataset
     */
    shareToken: string;
};

export type ImportDatasetFromTokenResponse = (DatasetRead);

export type GenerateInfospaceEmbeddingsData = {
    infospaceId: number;
    requestBody: GenerateEmbeddingsRequest;
};

export type GenerateInfospaceEmbeddingsResponse = (Message);

export type GenerateAssetEmbeddingsData = {
    assetId: number;
    requestBody: GenerateAssetEmbeddingsRequest;
};

export type GenerateAssetEmbeddingsResponse = (Message);

export type GetEmbeddingStatsData = {
    infospaceId: number;
};

export type GetEmbeddingStatsResponse = (EmbeddingStatsResponse);

export type SemanticSearchData = {
    infospaceId: number;
    requestBody: SemanticSearchRequest;
};

export type SemanticSearchResponse2 = (SemanticSearchResponse);

export type ClearInfospaceEmbeddingsData = {
    infospaceId: number;
};

export type ClearInfospaceEmbeddingsResponse = (Message);

export type DiscoverEmbeddingModelsData = {
    requestBody: DiscoverModelsRequest;
};

export type DiscoverEmbeddingModelsResponse = (AvailableModelsResponse);

export type ListAvailableEmbeddingModelsResponse = (AvailableModelsResponse);

export type GetLocationArticlesData = {
    limit?: number;
    location: string;
    searchQuery?: (string | null);
    searchType?: SearchType;
    skip?: number;
};

export type GetLocationArticlesResponse = (unknown);

export type GeojsonViewResponse = (unknown);

export type GetEntityArticlesData = {
    entityName: string;
    limit?: number;
    skip?: number;
};

export type GetEntityArticlesResponse = (unknown);

export type GetLeaderInfoData = {
    state: string;
};

export type GetLeaderInfoResponse = (unknown);

export type GetLegislationDataData = {
    state: string;
};

export type GetLegislationDataResponse = (unknown);

export type GetEconDataData = {
    indicators?: Array<string>;
    state: string;
};

export type GetEconDataResponse = (unknown);

export type UpdateLeadersResponse = (unknown);

export type GetTavilyDataResponse = (unknown);

export type GetEntityScoreOverTimeData = {
    entity: string;
    scoreType: string;
    timeframeFrom: string;
    timeframeTo: string;
};

export type GetEntityScoreOverTimeResponse = (unknown);

export type GetTopEntitiesByScoreData = {
    /**
     * Number of top entities to retrieve
     */
    limit?: number;
    /**
     * Type of score to rank entities by
     */
    scoreType: string;
    /**
     * Start date in ISO format
     */
    timeframeFrom: string;
    /**
     * End date in ISO format
     */
    timeframeTo: string;
};

export type GetTopEntitiesByScoreResponse = (unknown);

export type FileUploadData = {
    formData: Body_filestorage_file_upload;
};

export type FileUploadResponse2 = (FileUploadResponse);

export type FileDownloadData = {
    filePath: string;
};

export type FileDownloadResponse = (unknown);

export type ListFilesData = {
    maxKeys?: number;
    prefix?: (string | null);
};

export type ListFilesResponse = (unknown);

export type DeleteFileData = {
    objectName: string;
};

export type DeleteFileResponse = (unknown);

export type StreamFileData = {
    filePath: string;
};

export type StreamFileResponse = (unknown);

export type SaveFilterData = {
    filterName: string;
    requestBody: {
        [key: string]: unknown;
    };
};

export type SaveFilterResponse = (Message);

export type ListFiltersResponse = (Array<string>);

export type GetFilterData = {
    filterName: string;
};

export type GetFilterResponse = ({
    [key: string]: unknown;
});

export type DeleteFilterData = {
    filterName: string;
};

export type DeleteFilterResponse = (Message);

export type TestFilterData = {
    requestBody: Body_filters_test_filter;
};

export type TestFilterResponse = ({
    [key: string]: unknown;
});

export type GetBasicFilterExamplesResponse = ({
    [key: string]: unknown;
});

export type GetAdvancedFilterExamplesResponse = ({
    [key: string]: unknown;
});

export type CreateThresholdFilterData = {
    field: string;
    operator?: string;
    threshold: number;
};

export type CreateThresholdFilterResponse = ({
    [key: string]: unknown;
});

export type CreateRangeFilterData = {
    field: string;
    maxValue: number;
    minValue: number;
};

export type CreateRangeFilterResponse = ({
    [key: string]: unknown;
});

export type CreateKeywordFilterData = {
    field: string;
    matchAny?: boolean;
    requestBody: Array<string>;
};

export type CreateKeywordFilterResponse = ({
    [key: string]: unknown;
});

export type CreateInfospaceData = {
    requestBody: InfospaceCreate;
};

export type CreateInfospaceResponse = (InfospaceRead);

export type ListInfospacesData = {
    limit?: number;
    skip?: number;
};

export type ListInfospacesResponse = (InfospacesOut);

export type CreateInfospace1Data = {
    requestBody: InfospaceCreate;
};

export type CreateInfospace1Response = (InfospaceRead);

export type ListInfospaces1Data = {
    limit?: number;
    skip?: number;
};

export type ListInfospaces1Response = (InfospacesOut);

export type GetInfospaceData = {
    infospaceId: number;
};

export type GetInfospaceResponse = (InfospaceRead);

export type UpdateInfospaceData = {
    infospaceId: number;
    requestBody: InfospaceUpdate;
};

export type UpdateInfospaceResponse = (InfospaceRead);

export type DeleteInfospaceData = {
    infospaceId: number;
};

export type DeleteInfospaceResponse = (void);

export type GetInfospaceStatsData = {
    infospaceId: number;
};

export type GetInfospaceStatsResponse = ({
    [key: string]: unknown;
});

export type ExportInfospaceData = {
    /**
     * Include asset chunks (text segments)
     */
    includeChunks?: boolean;
    /**
     * Include datasets
     */
    includeDatasets?: boolean;
    /**
     * Include vector embeddings (can be large)
     */
    includeEmbeddings?: boolean;
    /**
     * Include annotation runs
     */
    includeRuns?: boolean;
    /**
     * Include annotation schemas
     */
    includeSchemas?: boolean;
    /**
     * Include sources and their assets
     */
    includeSources?: boolean;
    infospaceId: number;
};

export type ExportInfospaceResponse = (unknown);

export type ImportInfospaceData = {
    formData: Body_Infospaces_import_infospace;
};

export type ImportInfospaceResponse = (InfospaceRead);

export type IntelligenceChatData = {
    requestBody: ChatRequest;
};

export type IntelligenceChatResponse = (ChatResponse);

export type ExecuteToolCallData = {
    requestBody: ToolCallRequest;
};

export type ExecuteToolCallResponse = (unknown);

export type ListAvailableModelsData = {
    capability?: (string | null);
};

export type ListAvailableModelsResponse = (ModelListResponse);

export type ListUniversalToolsData = {
    infospaceId?: number;
};

export type ListUniversalToolsResponse = (unknown);

export type GetInfospaceToolContextData = {
    infospaceId: number;
};

export type GetInfospaceToolContextResponse = (unknown);

export type GetLocationContentsData = {
    limit?: number;
    location: string;
    skip?: number;
};

export type GetLocationContentsResponse = (unknown);

export type GetLocationEntitiesContentsData = {
    limit?: number;
    location: string;
    skip?: number;
};

export type GetLocationEntitiesContentsResponse = (unknown);

export type LocationFromQueryData = {
    query: string;
};

export type LocationFromQueryResponse = (unknown);

export type GeojsonEventsViewData = {
    eventType: string;
};

export type GeojsonEventsViewResponse = (unknown);

export type DashboardViewResponse = (string);

export type GetLocationEntitiesData = {
    limit?: number;
    locationName: string;
    minRelevance?: number;
    skip?: number;
};

export type GetLocationEntitiesResponse = (unknown);

export type GetCoordinatesData = {
    language?: string;
    location: string;
};

export type GetCoordinatesResponse = (unknown);

export type GetGeojsonForArticleIdsData = {
    requestBody: Array<string>;
};

export type GetGeojsonForArticleIdsResponse = (unknown);

export type GetLocationMetadataData = {
    location: string;
};

export type GetLocationMetadataResponse = (unknown);

export type ChannelRouteData = {
    path: string;
    requestBody: Request;
    serviceName: string;
};

export type ChannelRouteResponse = (unknown);

export type LoginAccessTokenData = {
    formData: Body_login_login_access_token;
};

export type LoginAccessTokenResponse = (Token);

export type TestTokenResponse = (UserOut);

export type RecoverPasswordData = {
    email: string;
};

export type RecoverPasswordResponse = (Message);

export type ResetPasswordData = {
    requestBody: NewPassword;
};

export type ResetPasswordResponse = (Message);

export type RecoverPasswordHtmlContentData = {
    email: string;
};

export type RecoverPasswordHtmlContentResponse = (string);

export type CreateMonitorData = {
    infospaceId: number;
    requestBody: MonitorCreate;
};

export type CreateMonitorResponse = (MonitorRead);

export type ListMonitorsData = {
    infospaceId: number;
    limit?: number;
    skip?: number;
};

export type ListMonitorsResponse = (Array<MonitorRead>);

export type GetMonitorData = {
    monitorId: number;
};

export type GetMonitorResponse = (MonitorRead);

export type UpdateMonitorData = {
    monitorId: number;
    requestBody: MonitorUpdate;
};

export type UpdateMonitorResponse = (MonitorRead);

export type DeleteMonitorData = {
    monitorId: number;
};

export type DeleteMonitorResponse = (void);

export type ExecuteMonitorManuallyData = {
    monitorId: number;
};

export type ExecuteMonitorManuallyResponse = (Message);

export type CreatePipelineData = {
    infospaceId: number;
    requestBody: IntelligencePipelineCreate;
};

export type CreatePipelineResponse = (IntelligencePipelineRead);

export type ListPipelinesData = {
    infospaceId: number;
};

export type ListPipelinesResponse = (Array<IntelligencePipelineRead>);

export type GetPipelineData = {
    pipelineId: number;
};

export type GetPipelineResponse = (IntelligencePipelineRead);

export type UpdatePipelineData = {
    pipelineId: number;
    requestBody: IntelligencePipelineUpdate;
};

export type UpdatePipelineResponse = (IntelligencePipelineRead);

export type DeletePipelineData = {
    pipelineId: number;
};

export type DeletePipelineResponse = (void);

export type ExecutePipelineData = {
    pipelineId: number;
    requestBody: Array<number>;
};

export type ExecutePipelineResponse = (PipelineExecutionRead);

export type SearchContentData = {
    args: unknown;
    kwargs: unknown;
    requestBody: SearchRequest;
};

export type SearchContentResponse = (SearchResultsOut);

export type SearchContent1Data = {
    args: unknown;
    kwargs: unknown;
    requestBody: SearchRequest;
};

export type SearchContent1Response = (SearchResultsOut);

export type SearchAndIngestData = {
    requestBody: ExternalSearchRequest;
};

export type SearchAndIngestResponse2 = (SearchAndIngestResponse);

export type CreateAssetsFromUrlsData = {
    requestBody: SelectiveAssetCreationRequest;
};

export type CreateAssetsFromUrlsResponse = (SearchAndIngestResponse);

export type CreateAssetsFromResultsData = {
    requestBody: DirectAssetCreationRequest;
};

export type CreateAssetsFromResultsResponse = (SearchAndIngestResponse);

export type CreateShareableLinkData = {
    infospaceId: number;
    requestBody: ShareableLinkCreate;
};

export type CreateShareableLinkResponse = (ShareableLinkRead);

export type GetShareableLinksData = {
    infospaceId: number;
    resourceId?: (number | null);
    resourceType?: (ResourceType | null);
};

export type GetShareableLinksResponse = (Paginated);

export type GetShareableLinkByTokenData = {
    token: string;
};

export type GetShareableLinkByTokenResponse = (ShareableLinkRead);

export type UpdateShareableLinkData = {
    linkId: number;
    requestBody: ShareableLinkUpdate;
};

export type UpdateShareableLinkResponse = (ShareableLinkRead);

export type DeleteShareableLinkData = {
    linkId: number;
};

export type DeleteShareableLinkResponse = (void);

export type AccessSharedResourceData = {
    token: string;
};

export type AccessSharedResourceResponse = ({
    [key: string]: unknown;
});

export type ViewSharedResourceData = {
    token: string;
};

export type ViewSharedResourceResponse = (SharedResourcePreview);

export type GetSharingStatsData = {
    infospaceId: number;
};

export type GetSharingStatsResponse = (ShareableLinkStats);

export type ExportResourceData = {
    formData: Body_sharing_export_resource;
    infospaceId: number;
};

export type ExportResourceResponse = (unknown);

export type ImportResourceData = {
    formData: Body_sharing_import_resource;
    targetInfospaceId: number;
};

export type ImportResourceResponse = (unknown);

export type ExportResourcesBatchData = {
    infospaceId: number;
    requestBody: ExportBatchRequest;
};

export type ExportResourcesBatchResponse = (Blob | File);

export type ExportMixedBatchData = {
    infospaceId: number;
    requestBody: ExportMixedBatchRequest;
};

export type ExportMixedBatchResponse = (unknown);

export type StreamSharedAssetFileData = {
    assetId: number;
    token: string;
};

export type StreamSharedAssetFileResponse = (unknown);

export type DownloadSharedBundleData = {
    token: string;
};

export type DownloadSharedBundleResponse = (unknown);

export type DownloadSharedAssetFileData = {
    assetId: number;
    token: string;
};

export type DownloadSharedAssetFileResponse = (unknown);

export type ViewDatasetPackageSummaryData = {
    token: string;
};

export type ViewDatasetPackageSummaryResponse = (DatasetPackageSummary);

export type ImportResourceFromTokenData = {
    requestBody: ImportFromTokenRequest;
    token: string;
};

export type ImportResourceFromTokenResponse = (unknown);

export type CreateSourceData = {
    infospaceId: number;
    requestBody: SourceCreateRequest;
};

export type CreateSourceResponse = (SourceRead);

export type ListSourcesData = {
    /**
     * Include counts of assets
     */
    includeCounts?: boolean;
    infospaceId: number;
    limit?: number;
    skip?: number;
};

export type ListSourcesResponse = (SourcesOut);

export type CreateSource1Data = {
    infospaceId: number;
    requestBody: SourceCreateRequest;
};

export type CreateSource1Response = (SourceRead);

export type ListSources1Data = {
    /**
     * Include counts of assets
     */
    includeCounts?: boolean;
    infospaceId: number;
    limit?: number;
    skip?: number;
};

export type ListSources1Response = (SourcesOut);

export type GetSourceData = {
    /**
     * Include counts of assets
     */
    includeCounts?: boolean;
    infospaceId: number;
    sourceId: number;
};

export type GetSourceResponse = (SourceRead);

export type UpdateSourceData = {
    infospaceId: number;
    requestBody: SourceUpdate;
    sourceId: number;
};

export type UpdateSourceResponse = (SourceRead);

export type DeleteSourceData = {
    infospaceId: number;
    sourceId: number;
};

export type DeleteSourceResponse = (void);

export type TriggerSourceProcessingData = {
    infospaceId: number;
    sourceId: number;
};

export type TriggerSourceProcessingResponse = ({
    [key: string]: unknown;
});

export type TransferSourcesData = {
    requestBody: SourceTransferRequest;
};

export type TransferSourcesResponse = (SourceTransferResponse);

export type CreateRssSourceData = {
    infospaceId: number;
    requestBody: RssSourceCreateRequest;
};

export type CreateRssSourceResponse = (SourceRead);

export type InitiateDiscourseLoginResponse = (unknown);

export type InitiateDiscourseLogin1Response = (unknown);

export type HandleDiscourseSsoData = {
    /**
     * Signature from Discourse
     */
    sig?: string;
    /**
     * SSO payload from Discourse
     */
    sso: string;
};

export type HandleDiscourseSsoResponse = (unknown);

export type HandleDiscourseSso1Data = {
    /**
     * Signature from Discourse
     */
    sig?: string;
    /**
     * SSO payload from Discourse
     */
    sso: string;
};

export type HandleDiscourseSso1Response = (unknown);

export type HandleDiscourseLogoutResponse = (Message);

export type HandleDiscourseLogout1Response = (Message);

export type GetDiscourseSsoInfoResponse = (unknown);

export type GetDiscourseSsoInfo1Response = (unknown);

export type SyncUserToDiscourseData = {
    userId?: number;
};

export type SyncUserToDiscourseResponse = (Message);

export type SyncUserToDiscourse1Data = {
    userId?: number;
};

export type SyncUserToDiscourse1Response = (Message);

export type CompleteDiscourseSsoData = {
    formData: Body_sso_complete_discourse_sso;
};

export type CompleteDiscourseSsoResponse = ({
    [key: string]: string;
});

export type CompleteDiscourseSso1Data = {
    formData: Body_sso_complete_discourse_sso;
};

export type CompleteDiscourseSso1Response = ({
    [key: string]: string;
});

export type CreateTaskData = {
    args: unknown;
    infospaceId: number;
    kwargs: unknown;
    requestBody: TaskCreate;
};

export type CreateTaskResponse = (TaskRead);

export type CreateTask1Data = {
    args: unknown;
    infospaceId: number;
    kwargs: unknown;
    requestBody: TaskCreate;
};

export type CreateTask1Response = (TaskRead);

export type ListTasksData = {
    args: unknown;
    infospaceId: number;
    /**
     * Filter by is_enabled flag
     */
    isEnabled?: (boolean | null);
    kwargs: unknown;
    limit?: number;
    skip?: number;
    /**
     * Filter by task status
     */
    status?: (TaskStatus | null);
    /**
     * Filter by task type
     */
    type?: (TaskType | null);
};

export type ListTasksResponse = (TasksOut);

export type ListTasks1Data = {
    args: unknown;
    infospaceId: number;
    /**
     * Filter by is_enabled flag
     */
    isEnabled?: (boolean | null);
    kwargs: unknown;
    limit?: number;
    skip?: number;
    /**
     * Filter by task status
     */
    status?: (TaskStatus | null);
    /**
     * Filter by task type
     */
    type?: (TaskType | null);
};

export type ListTasks1Response = (TasksOut);

export type CreateTask2Data = {
    args: unknown;
    infospaceId: number;
    kwargs: unknown;
    requestBody: TaskCreate;
};

export type CreateTask2Response = (TaskRead);

export type CreateTask3Data = {
    args: unknown;
    infospaceId: number;
    kwargs: unknown;
    requestBody: TaskCreate;
};

export type CreateTask3Response = (TaskRead);

export type ListTasks2Data = {
    args: unknown;
    infospaceId: number;
    /**
     * Filter by is_enabled flag
     */
    isEnabled?: (boolean | null);
    kwargs: unknown;
    limit?: number;
    skip?: number;
    /**
     * Filter by task status
     */
    status?: (TaskStatus | null);
    /**
     * Filter by task type
     */
    type?: (TaskType | null);
};

export type ListTasks2Response = (TasksOut);

export type ListTasks3Data = {
    args: unknown;
    infospaceId: number;
    /**
     * Filter by is_enabled flag
     */
    isEnabled?: (boolean | null);
    kwargs: unknown;
    limit?: number;
    skip?: number;
    /**
     * Filter by task status
     */
    status?: (TaskStatus | null);
    /**
     * Filter by task type
     */
    type?: (TaskType | null);
};

export type ListTasks3Response = (TasksOut);

export type GetTaskData = {
    args: unknown;
    infospaceId: number;
    kwargs: unknown;
    taskId: number;
};

export type GetTaskResponse = (TaskRead);

export type GetTask1Data = {
    args: unknown;
    infospaceId: number;
    kwargs: unknown;
    taskId: number;
};

export type GetTask1Response = (TaskRead);

export type UpdateTaskData = {
    args: unknown;
    infospaceId: number;
    kwargs: unknown;
    requestBody: TaskUpdate;
    taskId: number;
};

export type UpdateTaskResponse = (TaskRead);

export type UpdateTask1Data = {
    args: unknown;
    infospaceId: number;
    kwargs: unknown;
    requestBody: TaskUpdate;
    taskId: number;
};

export type UpdateTask1Response = (TaskRead);

export type DeleteTaskData = {
    args: unknown;
    infospaceId: number;
    kwargs: unknown;
    taskId: number;
};

export type DeleteTaskResponse = (void);

export type DeleteTask1Data = {
    args: unknown;
    infospaceId: number;
    kwargs: unknown;
    taskId: number;
};

export type DeleteTask1Response = (void);

export type ExecuteTaskManuallyData = {
    args: unknown;
    infospaceId: number;
    kwargs: unknown;
    taskId: number;
};

export type ExecuteTaskManuallyResponse = ({
    [key: string]: unknown;
});

export type ExecuteTaskManually1Data = {
    args: unknown;
    infospaceId: number;
    kwargs: unknown;
    taskId: number;
};

export type ExecuteTaskManually1Response = ({
    [key: string]: unknown;
});

export type GetInfospaceTreeData = {
    infospaceId: number;
};

export type GetInfospaceTreeResponse = (TreeResponse);

export type GetTreeChildrenData = {
    infospaceId: number;
    limit?: number;
    /**
     * Parent node ID (format: 'bundle-123' or 'asset-456')
     */
    parentId: string;
    skip?: number;
};

export type GetTreeChildrenResponse = (TreeChildrenResponse);

export type DeleteTreeNodesData = {
    infospaceId: number;
    requestBody: TreeDeleteRequest;
};

export type DeleteTreeNodesResponse = (Message);

export type CreateUserBackupData = {
    requestBody: UserBackupCreate;
};

export type CreateUserBackupResponse = (UserBackupRead);

export type ListUserBackupsData = {
    limit?: number;
    skip?: number;
    /**
     * Filter by specific target user
     */
    targetUserId?: (number | null);
};

export type ListUserBackupsResponse = (UserBackupsOut);

export type GetUserBackupData = {
    backupId: number;
};

export type GetUserBackupResponse = (UserBackupRead);

export type UpdateUserBackupData = {
    backupId: number;
    requestBody: UserBackupUpdate;
};

export type UpdateUserBackupResponse = (UserBackupRead);

export type DeleteUserBackupData = {
    backupId: number;
};

export type DeleteUserBackupResponse = (Message);

export type RestoreUserBackupData = {
    backupId: number;
    requestBody: UserBackupRestoreRequest;
};

export type RestoreUserBackupResponse = (UserOut);

export type CreateUserBackupShareLinkData = {
    backupId: number;
    requestBody: UserBackupShareRequest;
};

export type CreateUserBackupShareLinkResponse = ({
    [key: string]: unknown;
});

export type DownloadSharedUserBackupData = {
    shareToken: string;
};

export type DownloadSharedUserBackupResponse = (unknown);

export type CleanupExpiredUserBackupsResponse = (Message);

export type GetUsersBackupOverviewData = {
    limit?: number;
    /**
     * Search user emails or names
     */
    search?: (string | null);
    skip?: number;
};

export type GetUsersBackupOverviewResponse = ({
    [key: string]: unknown;
});

export type TriggerBackupAllUsersData = {
    backupType?: string;
};

export type TriggerBackupAllUsersResponse = (Message);

export type TriggerBackupSpecificUsersData = {
    backupType?: string;
    requestBody: Array<number>;
};

export type TriggerBackupSpecificUsersResponse = (Message);

export type ReadUsersData = {
    limit?: number;
    skip?: number;
};

export type ReadUsersResponse = (UsersOut);

export type CreateUserData = {
    requestBody: UserCreate;
};

export type CreateUserResponse = (UserOut);

export type ReadUsers1Data = {
    limit?: number;
    skip?: number;
};

export type ReadUsers1Response = (UsersOut);

export type CreateUser1Data = {
    requestBody: UserCreate;
};

export type CreateUser1Response = (UserOut);

export type ReadUserMeResponse = (UserOut);

export type UpdateUserMeData = {
    requestBody: UserUpdateMe;
};

export type UpdateUserMeResponse = (UserOut);

export type UpdatePasswordMeData = {
    requestBody: UpdatePassword;
};

export type UpdatePasswordMeResponse = (Message);

export type UploadProfilePictureData = {
    formData: Body_users_upload_profile_picture;
};

export type UploadProfilePictureResponse = (UserOut);

export type GetUserPublicProfileData = {
    userId: number;
};

export type GetUserPublicProfileResponse = (UserPublicProfile);

export type GetProfilePictureData = {
    filename: string;
    userId: number;
};

export type GetProfilePictureResponse = (unknown);

export type ListUserProfilesData = {
    limit?: number;
    search?: string;
    skip?: number;
};

export type ListUserProfilesResponse = (Array<UserPublicProfile>);

export type GetUserProfileStatsData = {
    userId: number;
};

export type GetUserProfileStatsResponse = (UserProfileStats);

export type UpdateUserProfileData = {
    requestBody: UserProfileUpdate;
};

export type UpdateUserProfileResponse = (UserOut);

export type CreateUserOpenData = {
    requestBody: UserCreateOpen;
};

export type CreateUserOpenResponse = (UserOut);

export type ReadUserByIdData = {
    userId: number;
};

export type ReadUserByIdResponse = (UserOut);

export type UpdateUserData = {
    requestBody: UserUpdate;
    userId: number;
};

export type UpdateUserResponse = (UserOut);

export type DeleteUserData = {
    userId: number;
};

export type DeleteUserResponse = (Message);

export type VerifyEmailData = {
    token: string;
};

export type VerifyEmailResponse = (Message);

export type ResendVerificationData = {
    email: string;
};

export type ResendVerificationResponse = (Message);

export type TestEmailData = {
    emailTo: string;
};

export type TestEmailResponse = (Message);

export type GetAvailableRssCountriesResponse = (unknown);

export type ExtractPdfTextData = {
    formData: Body_utils_extract_pdf_text;
};

export type ExtractPdfTextResponse = (unknown);

export type ExtractPdfMetadataData = {
    formData: Body_utils_extract_pdf_metadata;
};

export type ExtractPdfMetadataResponse = (unknown);

export type ScrapeArticleData = {
    url: string;
};

export type ScrapeArticleResponse = (unknown);

export type AnalyzeSourceData = {
    baseUrl: string;
};

export type AnalyzeSourceResponse = (unknown);

export type BrowseRssFeedData = {
    feedUrl: string;
    limit?: number;
};

export type BrowseRssFeedResponse = (unknown);

export type GetProvidersResponse = (ProviderListResponse);

export type PullOllamaModelData = {
    modelName: string;
};

export type PullOllamaModelResponse = (Message);

export type GetOllamaAvailableModelsData = {
    limit?: number;
    sort?: string;
};

export type GetOllamaAvailableModelsResponse = ({
    [key: string]: unknown;
});

export type RemoveOllamaModelData = {
    modelName: string;
};

export type RemoveOllamaModelResponse = (Message);

export type GeocodeLocationData = {
    location: string;
};

export type GeocodeLocationResponse = (unknown);

export type GetCountryDataData = {
    country: unknown;
};

export type GetCountryDataResponse = (unknown);