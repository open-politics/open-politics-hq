replicaCount: 1

email: "admin@example.com"

# Namespace for the deployment
namespace: hq

image:
  backend:
    repository: openpoliticsproject/backend
    tag: "latest"
    pullPolicy: Always
  frontend: 
    repository: openpoliticsproject/frontend
    tag: "latest"
    pullPolicy: Always
  celery-worker:
    repository: openpoliticsproject/backend
    tag: "latest"
    pullPolicy: Always
  postgres:
    image: pgvector/pgvector
    tag: "pg17"
    pullPolicy: IfNotPresent
    nodes: 1
  redis:
    image: redis
    tag: "alpine"
    pullPolicy: IfNotPresent
  minio:
    image: minio/minio
    tag: "latest"
    pullPolicy: IfNotPresent
    nodes: 1
  peliasPlaceholder:
    image: pelias/placeholder
    tag: "latest"
    pullPolicy: IfNotPresent
    nodes: 1

# Image pull secrets (if using private registry)
# imagePullSecrets:
#   - name: regcred

service:
  type: ClusterIP
  port: 80


ingress:
  enabled: true
  className: traefik
  annotations:
    # Traefik built-in ACME SSL (no cert-manager needed!)
    traefik.ingress.kubernetes.io/router.tls: "true"
    traefik.ingress.kubernetes.io/router.tls.certresolver: "letsencrypt"
    traefik.ingress.kubernetes.io/router.entrypoints: "web,websecure"
    # Explicit domain specification for Traefik v3+
    traefik.ingress.kubernetes.io/router.tls.domains.0.main: "your-domain.com"
    traefik.ingress.kubernetes.io/router.tls.domains.0.sans: "www.your-domain.com"
    # Traefik handles HTTPâ†’HTTPS redirect via boot.sh HelmChartConfig
    # Session affinity
    traefik.ingress.kubernetes.io/service.sticky.cookie: "true"
    traefik.ingress.kubernetes.io/service.sticky.cookie.name: "hq-session"
  host: your-domain.com
  path: /
  tls:
    # Let Traefik ACME manage TLS; leave secretName unset
    secretName: ""

postgres:
  postgresqlDatabase: opp_app_users
  postgresqlUser: postgres
  postgresqlPassword: "924qmgzbq"
  service:
    port: 5432
  # Persistent storage for Postgres
  persistence:
    enabled: true
    storageClass: "local-path"
    size: 20Gi
    accessMode: ReadWriteOnce

redis:
  service:
    port: 6379
  # Persistent storage for Redis
  persistence:
    enabled: true
    storageClass: "local-path"
    size: 8Gi
    accessMode: ReadWriteOnce

configmaps:
  stack:
    name: stack-config
  redis:
    name: redis-config

env:
  config:
    DOMAIN: "your-domain.com"
    ENVIRONMENT: "production"
    FRONTEND_PORT: "3000"
    BACKEND_PORT: "8022"
    REDIS_PORT: "6379"
    PROJECT_NAME: "HQ Application"
    STACK_NAME: "hq-prod-stack"
    BACKEND_CORS_ORIGINS: "http://localhost,http://localhost:5173,https://localhost,https://localhost:3000,http://localhost.tiangolo.com,http://your-domain.com,https://your-domain.com,https://your-domain.com:80,https://your-domain.com:443"
    MINIO_ENDPOINT: "nbg1.your-objectstorage.com"
    MINIO_HOST: "minio"
    MINIO_PORT: "9000"
    MINIO_SECURE: "true"
  secrets:
    SECRET_KEY: ""
    FIRST_SUPERUSER: "admin@example.com"
    FIRST_SUPERUSER_PASSWORD: ""
    USERS_OPEN_REGISTRATION: "True"
    OPOL_API_KEY: ""
    OPOL_MODE: "remote"
    LOCAL_LLM: "False"
    LOCAL_LLM_MODEL: "llama3.2:latest"
    POSTGRES_SERVER: "postgres"
    POSTGRES_DB: "opp_app_users_prod"
    POSTGRES_USER: "postgres"
    POSTGRES_PORT: "5432"
    POSTGRES_PASSWORD: "xxx"
    POSTGRES_SSL_MODE: ""
    GOOGLE_API_KEY: "xxx"
    USE_LOCAL_REDIS: "True"
    LOCAL_REDIS_URL: "redis://redis:6379"
    UPSTASH_REDIS_REST_URL: "https://api.upstash.com/v2/redis/namespaces/default/streams"
    UPSTASH_REDIS_REST_TOKEN: "xxx"
    CELERY_BROKER_URL: "redis://redis:6379/0"
    CELERY_RESULT_BACKEND: "redis://redis:6379/0"
    DISCOURSE_CONNECT_ENABLED: "True"
    DISCOURSE_CONNECT_SECRET: "xxx"
    DISCOURSE_CONNECT_URL: "https://forum.any.domain.org"
    MAPBOX_ACCESS_TOKEN: "xxx"
    MINIO_ROOT_USER: "xxx"
    MINIO_ROOT_PASSWORD: "xxx"
    MINIO_BUCKET_NAME: "hq-user-storage-prod"
    MINIO_REGION: "eu-central"
    MINIO_ACCESS_KEY: "xxx"
    MINIO_SECRET_KEY: "xxx"
    MINIO_USE_SSL: "true"
    MINIO_SITE_NAME: "any"
    MINIO_SITE_REGION: "any"
    SEARXNG_API_URL: "http://searxng:8080"
    SEARCH_API: "tavily"
    SEARXNG_PORT: "8080"
    SEARXNG_BIND_ADDRESS: "0.0.0.0"
    SEARXNG_IMAGE_PROXY: "true"
    SEARXNG_LIMITER: "false"
    SEARXNG_DEFAULT_DEPTH: "basic"
    SEARXNG_MAX_RESULTS: "50"
    SEARXNG_ENGINES: "google,bing,duckduckgo,wikipedia"
    SEARXNG_TIME_RANGE: "None"
    SEARXNG_SAFESEARCH: "0"
    SMTP_HOST: "smtp.protonmail.ch"
    SMTP_PORT: "587"
    SMTP_TLS: "true"
    SMTP_USER: "admin@example.com"
    SMTP_PASSWORD: "changeThis"
    EMAILS_FROM_EMAIL: "admin@example.com"
    SMTP_SSL: "false"
    EMAILS_FROM_NAME: "HQ Application"
    REQUIRE_EMAIL_VERIFICATION: "true"
    SENTRY_DSN: ""
    OPENAI_API_KEY: "xxx"
    TAVILY_API_KEY: "xxx"
    WIPE_DB: "False"

# MinIO Configuration (local deployment)
minio:
  service:
    type: ClusterIP
    port: 9000
    nodePort: null
  consoleService:
    type: ClusterIP
    port: 9001
    nodePort: null
  persistence:
    enabled: true
    storageClass: "local-path"
    size: 50Gi
    accessMode: ReadWriteOnce
  command:
    - /bin/bash
    - -c
  args:
    - minio server /data --console-address :9001

# Resource limits and requests
resources:
  backend:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi
  frontend:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 256Mi
  celery:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi
  postgres:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi
  redis:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 512Mi


peliasPlaceholder:
  service:
    type: ClusterIP
    port: 8721
  persistence:
    enabled: true
    storageClass: "local-path"
    size: 10Gi
    accessMode: ReadWriteOnce

# Node affinity (optional - spread across nodes)
nodeAffinity:
  enabled: true

# Pod disruption budgets
podDisruptionBudget:
  enabled: true
  minAvailable: 1
