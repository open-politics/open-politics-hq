#!/bin/bash

# Check the status of Open Politics HQ deployment
# This script provides a comprehensive overview of the cluster and application status

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"

cd "$PROJECT_DIR"

echo "📊 Open Politics HQ - Status Report"
echo "=================================="
echo ""

# Check kubectl connection
if ! kubectl get nodes &> /dev/null; then
    echo "❌ Cannot connect to Kubernetes cluster."
    echo "   Please run ./scripts/connect.sh first."
    exit 1
fi

# Cluster nodes
echo "🖥️  Cluster Nodes:"
kubectl get nodes -o wide
echo ""

# Infrastructure status
echo "🏗️  Infrastructure Resources:"
if [ -f "terraform.tfstate" ]; then
    echo "   Master IP:  $(terraform output -raw master_ip 2>/dev/null || echo 'N/A')"
    echo "   Worker IPs: $(terraform output -json worker_ips 2>/dev/null | jq -r '.[]' | tr '\n' ' ' || echo 'N/A')"
    echo "   Network ID: $(terraform output -raw network_id 2>/dev/null || echo 'N/A')"
else
    echo "   ❌ No Terraform state found"
fi
echo ""

# Namespaces
echo "📁 Namespaces:"
kubectl get namespaces | grep -E "(kube-system|hq)"
echo ""

# Traefik status (k3s native)
echo "🚀 Traefik Ingress Controller (k3s native):"
kubectl get pods -n kube-system | grep traefik
echo ""
echo "🌐 Traefik Services:"
kubectl get services -n kube-system | grep traefik
PROXY_IP=$(kubectl get svc traefik -n kube-system -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
if [ -n "$PROXY_IP" ]; then
    echo "   LoadBalancer IP: $PROXY_IP"
else
    echo "   ⚠️  LoadBalancer IP not assigned yet"
fi
echo ""

# Traefik ACME certificates (built-in)
echo "🔒 ACME Certificates (Traefik built-in):"
kubectl get secrets -n kube-system | grep "acme" || echo "   No ACME secrets yet (certificates will be created on first request)"
echo ""

# Application status
echo "🚀 HQ Application:"
kubectl get pods -n hq
echo ""

echo "📊 Application Services:"
kubectl get services -n hq
echo ""

echo "🔐 TLS Secrets (auto-generated by Traefik):"
kubectl get secrets -n hq | grep "tls" || echo "   TLS secrets will be auto-created by Traefik ACME"
echo ""

echo "💾 Persistent Volumes:"
kubectl get pv,pvc -n hq 2>/dev/null || echo "   No persistent volumes found"
echo ""

# Ingress status
echo "🌐 Ingress:"
kubectl get ingress -n hq
echo ""

# Check if application is responding
if [ -n "$PROXY_IP" ]; then
    echo "🧪 Application Health Check:"
    if curl -s --connect-timeout 5 "http://$PROXY_IP" > /dev/null; then
        echo "   ✅ HTTP endpoint is responding"
    else
        echo "   ❌ HTTP endpoint is not responding"
    fi
    
    if curl -s --connect-timeout 5 -k "https://$PROXY_IP" > /dev/null; then
        echo "   ✅ HTTPS endpoint is responding"
    else
        echo "   ❌ HTTPS endpoint is not responding"
    fi
    echo ""
fi

# Resource usage
echo "📈 Resource Usage:"
echo "   Nodes:"
kubectl top nodes 2>/dev/null || echo "   ❌ Metrics not available (metrics-server not installed)"
echo "   Pods (hq namespace):"
kubectl top pods -n hq 2>/dev/null || echo "   ❌ Metrics not available (metrics-server not installed)"
echo ""

# Recent events
echo "📋 Recent Events (last 10):"
kubectl get events --sort-by=.metadata.creationTimestamp -n hq | tail -10
echo ""

echo "✅ Status report complete!"
echo ""

# DNS Setup Instructions
if [ -n "$PROXY_IP" ]; then
    echo "🌐 DNS SETUP REQUIRED - Point your domain to the LoadBalancer:"
    echo "=============================================================="
    echo ""
    echo "📋 LoadBalancer IP: $PROXY_IP"
    echo ""
    echo "🔧 DNS Records to Create:"
    echo "   Type: A"
    echo "   Name: @"
    echo "   Value: $PROXY_IP"
    echo "   TTL: 300"
    echo ""
    echo "   Type: A" 
    echo "   Name: www"
    echo "   Value: $PROXY_IP"
    echo "   TTL: 300"
    echo ""
    echo "📝 After DNS setup:"
    echo "   • Wait 5-15 minutes for DNS propagation"
    echo "   • SSL certificate will auto-issue via Let's Encrypt"
    echo "   • Check certificate: kubectl get certificates -n hq"
    echo ""
fi

if [ -n "$PROXY_IP" ]; then
    echo ""
    echo "🌐 DNS SETUP REQUIRED - Point your domain to Traefik LoadBalancer IP:"
    echo "======================================================================"
    echo ""
    echo "   ✅ Traefik LoadBalancer IP: $PROXY_IP"
    echo ""
    echo "   📝 DNS Records to Create:"
    echo "   -------------------------"
    echo "   A     your-domain.com          → $PROXY_IP"
    echo "   A     www.your-domain.com      → $PROXY_IP"
    echo ""
    echo "   📋 Test when DNS propagates:"
    echo "   ----------------------------"
    echo "   curl -H \"Host: your-domain.com\" http://$PROXY_IP"
    echo "   curl -H \"Host: www.your-domain.com\" http://$PROXY_IP"
    echo ""
fi

echo "🔗 Quick access:"
if [ -n "$PROXY_IP" ]; then
    echo "   Direct IP:  http://$PROXY_IP"
    echo "   Production: https://your-domain.com (after DNS setup)"
fi
MASTER_IP=$(terraform output -raw master_ip 2>/dev/null || echo "")
if [ -n "$MASTER_IP" ]; then
    # Auto-detect SSH key
    SSH_KEY=""
    if [ -f ~/.ssh/open_politics_admin ]; then
        SSH_KEY="-i ~/.ssh/open_politics_admin"
    elif [ -f ~/.ssh/open_politics_prod ]; then
        SSH_KEY="-i ~/.ssh/open_politics_prod"
    elif [ -f ~/.ssh/id_rsa ]; then
        SSH_KEY="-i ~/.ssh/id_rsa"
    elif [ -f ~/.ssh/id_ed25519 ]; then
        SSH_KEY="-i ~/.ssh/id_ed25519"
    fi
    echo "   SSH: ssh $SSH_KEY cluster@$MASTER_IP"
fi
