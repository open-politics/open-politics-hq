"""initial migration

Revision ID: febc300779f9
Revises: a8cd2fdb4169
Create Date: 2025-04-27 11:10:37.027166

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes


# revision identifiers, used by Alembic.
revision = 'febc300779f9'
down_revision = 'a8cd2fdb4169'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute('CREATE SCHEMA IF NOT EXISTS celery_schema')
    op.create_table('user',
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('full_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('hashed_password', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)
    op.create_table('item',
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('searchhistory',
    sa.Column('query', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('shareable_links',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('permission_level', sa.Enum('READ_ONLY', 'EDIT', 'FULL_ACCESS', name='permissionlevel'), nullable=True),
    sa.Column('is_public', sa.Boolean(), nullable=False),
    sa.Column('requires_login', sa.Boolean(), nullable=False),
    sa.Column('expiration_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('max_uses', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('token', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('resource_type', sa.Enum('DATA_SOURCE', 'SCHEMA', 'WORKSPACE', 'CLASSIFICATION_JOB', 'DATASET', name='resourcetype'), nullable=True),
    sa.Column('resource_id', sa.Integer(), nullable=False),
    sa.Column('use_count', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_shareable_links_token'), 'shareable_links', ['token'], unique=True)
    op.create_index(op.f('ix_shareable_links_user_id'), 'shareable_links', ['user_id'], unique=False)
    op.create_table('workspace',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('icon', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id_ownership', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id_ownership'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('classificationjob',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('configuration', sa.JSON(), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'RUNNING', 'PAUSED', 'COMPLETED', 'COMPLETED_WITH_ERRORS', 'FAILED', name='classificationjobstatus'), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('entity_uuid', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('imported_from_uuid', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('workspace_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['workspace_id'], ['workspace.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_classificationjob_entity_uuid'), 'classificationjob', ['entity_uuid'], unique=True)
    op.create_index(op.f('ix_classificationjob_imported_from_uuid'), 'classificationjob', ['imported_from_uuid'], unique=False)
    op.create_table('classificationscheme',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('model_instructions', sa.Text(), nullable=True),
    sa.Column('validation_rules', sa.JSON(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('entity_uuid', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('imported_from_uuid', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('workspace_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['workspace_id'], ['workspace.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_classificationscheme_entity_uuid'), 'classificationscheme', ['entity_uuid'], unique=True)
    op.create_index(op.f('ix_classificationscheme_imported_from_uuid'), 'classificationscheme', ['imported_from_uuid'], unique=False)
    op.create_table('dataset',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('custom_metadata', sa.JSON(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('entity_uuid', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('imported_from_uuid', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('workspace_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('datarecord_ids', sa.ARRAY(sa.Integer()), nullable=True),
    sa.Column('source_job_ids', sa.ARRAY(sa.Integer()), nullable=True),
    sa.Column('source_scheme_ids', sa.ARRAY(sa.Integer()), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['workspace_id'], ['workspace.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_dataset_entity_uuid'), 'dataset', ['entity_uuid'], unique=True)
    op.create_index(op.f('ix_dataset_imported_from_uuid'), 'dataset', ['imported_from_uuid'], unique=False)
    op.create_table('datasource',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('type', sa.Enum('CSV', 'PDF', 'BULK_PDF', 'URL', 'URL_LIST', 'TEXT_BLOCK', name='datasourcetype'), nullable=True),
    sa.Column('origin_details', sa.JSON(), nullable=True),
    sa.Column('source_metadata', sa.JSON(), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'PROCESSING', 'COMPLETE', 'FAILED', name='datasourcestatus'), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('entity_uuid', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('imported_from_uuid', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('workspace_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('data_record_count', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['workspace_id'], ['workspace.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_datasource_entity_uuid'), 'datasource', ['entity_uuid'], unique=True)
    op.create_index(op.f('ix_datasource_imported_from_uuid'), 'datasource', ['imported_from_uuid'], unique=False)
    op.create_table('classificationfield',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('scheme_id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('type', sa.Enum('INT', 'STR', 'LIST_STR', 'LIST_DICT', name='fieldtype'), nullable=True),
    sa.Column('scale_min', sa.Integer(), nullable=True),
    sa.Column('scale_max', sa.Integer(), nullable=True),
    sa.Column('is_set_of_labels', sa.Boolean(), nullable=True),
    sa.Column('labels', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('dict_keys', sa.JSON(), nullable=True),
    sa.Column('is_time_axis_hint', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['scheme_id'], ['classificationscheme.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('classificationjobdatasourcelink',
    sa.Column('job_id', sa.Integer(), nullable=False),
    sa.Column('datasource_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['datasource_id'], ['datasource.id'], ),
    sa.ForeignKeyConstraint(['job_id'], ['classificationjob.id'], ),
    sa.PrimaryKeyConstraint('job_id', 'datasource_id')
    )
    op.create_table('classificationjobschemelink',
    sa.Column('job_id', sa.Integer(), nullable=False),
    sa.Column('scheme_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['job_id'], ['classificationjob.id'], ),
    sa.ForeignKeyConstraint(['scheme_id'], ['classificationscheme.id'], ),
    sa.PrimaryKeyConstraint('job_id', 'scheme_id')
    )
    op.create_table('datarecord',
    sa.Column('text_content', sa.Text(), nullable=True),
    sa.Column('source_metadata', sa.JSON(), nullable=True),
    sa.Column('event_timestamp', sa.DateTime(timezone=True), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('entity_uuid', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('imported_from_uuid', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('datasource_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('url_hash', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('content_hash', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['datasource_id'], ['datasource.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_datarecord_content_hash'), 'datarecord', ['content_hash'], unique=False)
    op.create_index(op.f('ix_datarecord_entity_uuid'), 'datarecord', ['entity_uuid'], unique=True)
    op.create_index(op.f('ix_datarecord_imported_from_uuid'), 'datarecord', ['imported_from_uuid'], unique=False)
    op.create_index(op.f('ix_datarecord_url_hash'), 'datarecord', ['url_hash'], unique=False)
    op.create_table('recurringtask',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('type', sa.Enum('INGEST', 'CLASSIFY', name='recurringtasktype'), nullable=True),
    sa.Column('schedule', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('configuration', sa.JSON(), nullable=True),
    sa.Column('status', sa.Enum('ACTIVE', 'PAUSED', 'ERROR', name='recurringtaskstatus'), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('workspace_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('last_run_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_successful_run_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_run_status', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('last_run_message', sa.Text(), nullable=True),
    sa.Column('last_job_id', sa.Integer(), nullable=True),
    sa.Column('consecutive_failure_count', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['last_job_id'], ['classificationjob.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['workspace_id'], ['workspace.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('classificationresult',
    sa.Column('datarecord_id', sa.Integer(), nullable=False),
    sa.Column('scheme_id', sa.Integer(), nullable=False),
    sa.Column('job_id', sa.Integer(), nullable=False),
    sa.Column('value', sa.JSON(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['datarecord_id'], ['datarecord.id'], ),
    sa.ForeignKeyConstraint(['job_id'], ['classificationjob.id'], ),
    sa.ForeignKeyConstraint(['scheme_id'], ['classificationscheme.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('datarecord_id', 'scheme_id', 'job_id', name='uq_datarecord_scheme_job')
    )
    op.create_table('celery_clockedschedule',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('clocked_time', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='celery_schema',
    sqlite_autoincrement=True
    )
    op.create_table('celery_crontabschedule',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('minute', sa.String(length=240), nullable=False, comment='Cron Minutes to Run. Use "*" for "all". (Example: "0,30")'),
    sa.Column('hour', sa.String(length=96), nullable=False, comment='Cron Hours to Run. Use "*" for "all". (Example: "8,20")'),
    sa.Column('day_of_week', sa.String(length=64), nullable=False, comment='Cron Days Of The Week to Run. Use "*" for "all", Sunday is 0 or 7, Monday is 1. (Example: "0,5")'),
    sa.Column('day_of_month', sa.String(length=124), nullable=False, comment='Cron Days Of The Month to Run. Use "*" for "all". (Example: "1,15")'),
    sa.Column('month_of_year', sa.String(length=64), nullable=False, comment='Cron Months (1-12) Of The Year to Run. Use "*" for "all". (Example: "1,12")'),
    sa.Column('timezone', sa.String(length=64), nullable=False, comment='Timezone to Run the Cron Schedule on. Default is UTC.'),
    sa.PrimaryKeyConstraint('id'),
    schema='celery_schema',
    sqlite_autoincrement=True
    )
    op.create_table('celery_intervalschedule',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('every', sa.Integer(), nullable=False, comment='Number of interval periods to wait before running the task again'),
    sa.Column('period', sa.Enum('days', 'hours', 'minutes', 'seconds', 'microseconds', name='period'), nullable=False, comment='The type of period between task runs (Example: days)'),
    sa.CheckConstraint('every >= 1'),
    sa.PrimaryKeyConstraint('id'),
    schema='celery_schema',
    sqlite_autoincrement=True
    )
    op.create_table('celery_periodictask',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False, comment='Short Description For This Task'),
    sa.Column('task', sa.String(length=255), nullable=False, comment='The Name of the Celery Task that Should be Run.  (Example: "proj.tasks.import_contacts")'),
    sa.Column('args', sa.Text(), nullable=False, comment='JSON encoded positional arguments (Example: ["arg1", "arg2"])'),
    sa.Column('kwargs', sa.Text(), nullable=False, comment='JSON encoded keyword arguments (Example: {"argument": "value"})'),
    sa.Column('queue', sa.String(length=255), nullable=True, comment='Queue defined in CELERY_TASK_QUEUES. Leave None for default queuing.'),
    sa.Column('exchange', sa.String(length=255), nullable=True, comment='Override Exchange for low-level AMQP routing'),
    sa.Column('routing_key', sa.String(length=255), nullable=True, comment='Override Routing Key for low-level AMQP routing'),
    sa.Column('headers', sa.Text(), nullable=True, comment='JSON encoded message headers for the AMQP message.'),
    sa.Column('priority', sa.Integer(), nullable=True, comment='Priority Number between 0 and 255. Supported by: RabbitMQ, Redis (priority reversed, 0 is highest).'),
    sa.Column('expires', sa.DateTime(timezone=True), nullable=True, comment='Datetime after which the schedule will no longer trigger the task to run'),
    sa.Column('expire_seconds', sa.Integer(), nullable=True, comment='Timedelta with seconds which the schedule will no longer trigger the task to run'),
    sa.Column('one_off', sa.Boolean(), nullable=False, comment='If True, the schedule will only run the task a single time'),
    sa.Column('start_time', sa.DateTime(timezone=True), nullable=True, comment='Datetime when the schedule should begin triggering the task to run'),
    sa.Column('enabled', sa.Boolean(), nullable=False, comment='Set to False to disable the schedule'),
    sa.Column('last_run_at', sa.DateTime(timezone=True), nullable=True, comment='Datetime that the schedule last triggered the task to run. '),
    sa.Column('total_run_count', sa.Integer(), nullable=False, comment='Running count of how many times the schedule has triggered the task'),
    sa.Column('date_changed', sa.DateTime(timezone=True), nullable=True, comment='Datetime that this PeriodicTask was last modified'),
    sa.Column('description', sa.Text(), nullable=True, comment='Detailed description about the details of this Periodic Task'),
    sa.Column('discriminator', sa.String(length=20), nullable=False, comment='Lower case name of the schedule class. '),
    sa.Column('schedule_id', sa.Integer(), nullable=False, comment='ID of the schedule model object. '),
    sa.CheckConstraint('priority BETWEEN 0 AND 255'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    schema='celery_schema',
    sqlite_autoincrement=True
    )
    op.create_table('celery_periodictaskchanged',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('last_update', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='celery_schema',
    sqlite_autoincrement=False
    )
    op.create_table('celery_solarschedule',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('event', sa.Enum('dawn_astronomical', 'dawn_nautical', 'dawn_civil', 'sunrise', 'solar_noon', 'sunset', 'dusk_civil', 'dusk_nautical', 'dusk_astronomical', name='solarevent'), nullable=False, comment='The type of solar event when the job should run'),
    sa.Column('latitude', sa.Numeric(precision=9, scale=6, decimal_return_scale=6, asdecimal=False), nullable=False, comment='Run the task when the event happens at this latitude'),
    sa.Column('longitude', sa.Numeric(precision=9, scale=6, decimal_return_scale=6, asdecimal=False), nullable=False, comment='Run the task when the event happens at this longitude'),
    sa.CheckConstraint('latitude BETWEEN -90 AND 90'),
    sa.CheckConstraint('longitude BETWEEN -180 AND 180'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('event', 'latitude', 'longitude'),
    schema='celery_schema',
    sqlite_autoincrement=True
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('celery_solarschedule', schema='celery_schema')
    op.drop_table('celery_periodictaskchanged', schema='celery_schema')
    op.drop_table('celery_periodictask', schema='celery_schema')
    op.drop_table('celery_intervalschedule', schema='celery_schema')
    op.drop_table('celery_crontabschedule', schema='celery_schema')
    op.drop_table('celery_clockedschedule', schema='celery_schema')
    op.drop_table('classificationresult')
    op.drop_table('recurringtask')
    op.drop_index(op.f('ix_datarecord_url_hash'), table_name='datarecord')
    op.drop_index(op.f('ix_datarecord_imported_from_uuid'), table_name='datarecord')
    op.drop_index(op.f('ix_datarecord_entity_uuid'), table_name='datarecord')
    op.drop_index(op.f('ix_datarecord_content_hash'), table_name='datarecord')
    op.drop_table('datarecord')
    op.drop_table('classificationjobschemelink')
    op.drop_table('classificationjobdatasourcelink')
    op.drop_table('classificationfield')
    op.drop_index(op.f('ix_datasource_imported_from_uuid'), table_name='datasource')
    op.drop_index(op.f('ix_datasource_entity_uuid'), table_name='datasource')
    op.drop_table('datasource')
    op.drop_index(op.f('ix_dataset_imported_from_uuid'), table_name='dataset')
    op.drop_index(op.f('ix_dataset_entity_uuid'), table_name='dataset')
    op.drop_table('dataset')
    op.drop_index(op.f('ix_classificationscheme_imported_from_uuid'), table_name='classificationscheme')
    op.drop_index(op.f('ix_classificationscheme_entity_uuid'), table_name='classificationscheme')
    op.drop_table('classificationscheme')
    op.drop_index(op.f('ix_classificationjob_imported_from_uuid'), table_name='classificationjob')
    op.drop_index(op.f('ix_classificationjob_entity_uuid'), table_name='classificationjob')
    op.drop_table('classificationjob')
    op.drop_table('workspace')
    op.drop_index(op.f('ix_shareable_links_user_id'), table_name='shareable_links')
    op.drop_index(op.f('ix_shareable_links_token'), table_name='shareable_links')
    op.drop_table('shareable_links')
    op.drop_table('searchhistory')
    op.drop_table('item')
    op.drop_index(op.f('ix_user_email'), table_name='user')
    op.drop_table('user')
    # ### end Alembic commands ###
