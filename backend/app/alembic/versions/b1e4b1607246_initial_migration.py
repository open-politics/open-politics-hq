"""Initial migration

Revision ID: b1e4b1607246
Revises: 
Create Date: 2025-08-31 15:24:57.115105

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes
import pgvector
from pgvector.sqlalchemy import Vector
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'b1e4b1607246'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    op.execute("CREATE EXTENSION IF NOT EXISTS vector;")
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute('CREATE SCHEMA IF NOT EXISTS celery_schema')
    op.create_table('embeddingmodel',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('provider', sa.Enum('OLLAMA', 'JINA', 'OPENAI', 'HUGGINGFACE', name='embeddingprovider'), nullable=False),
    sa.Column('dimension', sa.Integer(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('config', sa.JSON(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('max_sequence_length', sa.Integer(), nullable=True),
    sa.Column('embedding_time_ms', sa.Float(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'provider')
    )
    op.create_index(op.f('ix_embeddingmodel_name'), 'embeddingmodel', ['name'], unique=False)
    op.create_index('ix_embeddingmodel_provider_active', 'embeddingmodel', ['provider', 'is_active'], unique=False)
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('hashed_password', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('full_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('profile_picture_url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('bio', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('email_verified', sa.Boolean(), nullable=False),
    sa.Column('email_verification_token', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('email_verification_sent_at', sa.DateTime(), nullable=True),
    sa.Column('email_verification_expires_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)
    op.create_index(op.f('ix_user_email_verification_token'), 'user', ['email_verification_token'], unique=False)
    op.create_table('analysisadapter',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('input_schema_definition', sa.JSON(), nullable=True),
    sa.Column('output_schema_definition', sa.JSON(), nullable=True),
    sa.Column('version', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('module_path', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('adapter_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_public', sa.Boolean(), nullable=False),
    sa.Column('creator_user_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['creator_user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'version')
    )
    op.create_index(op.f('ix_analysisadapter_is_active'), 'analysisadapter', ['is_active'], unique=False)
    op.create_index(op.f('ix_analysisadapter_name'), 'analysisadapter', ['name'], unique=False)
    op.create_table('infospace',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('icon', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('vector_backend', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('embedding_model', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('embedding_dim', sa.Integer(), nullable=True),
    sa.Column('chunk_size', sa.Integer(), nullable=True),
    sa.Column('chunk_overlap', sa.Integer(), nullable=True),
    sa.Column('chunk_strategy', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_infospace_uuid'), 'infospace', ['uuid'], unique=True)
    op.create_table('searchhistory',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('query', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('filters', sa.JSON(), nullable=True),
    sa.Column('result_count', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('userbackup',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('backup_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('target_user_id', sa.Integer(), nullable=False),
    sa.Column('created_by_user_id', sa.Integer(), nullable=False),
    sa.Column('storage_path', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('file_size_bytes', sa.Integer(), nullable=True),
    sa.Column('content_hash', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('included_infospaces', sa.Integer(), nullable=False),
    sa.Column('included_assets', sa.Integer(), nullable=False),
    sa.Column('included_schemas', sa.Integer(), nullable=False),
    sa.Column('included_runs', sa.Integer(), nullable=False),
    sa.Column('included_annotations', sa.Integer(), nullable=False),
    sa.Column('included_datasets', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'RUNNING', 'COMPLETED', 'FAILED', name='backupstatus'), nullable=False),
    sa.Column('error_message', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('is_shareable', sa.Boolean(), nullable=False),
    sa.Column('share_token', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['target_user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_userbackup_share_token'), 'userbackup', ['share_token'], unique=False)
    op.create_index('ix_userbackup_target_created', 'userbackup', ['target_user_id', 'created_by_user_id'], unique=False)
    op.create_index(op.f('ix_userbackup_uuid'), 'userbackup', ['uuid'], unique=True)
    op.create_table('annotationschema',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('output_contract', sa.JSON(), nullable=True),
    sa.Column('instructions', sa.Text(), nullable=True),
    sa.Column('version', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('field_specific_justification_configs', sa.JSON(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('infospace_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['infospace_id'], ['infospace.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_annotationschema_is_active'), 'annotationschema', ['is_active'], unique=False)
    op.create_index(op.f('ix_annotationschema_uuid'), 'annotationschema', ['uuid'], unique=True)
    op.create_index('ix_unique_active_schema_name_version', 'annotationschema', ['infospace_id', 'name', 'version'], unique=True, postgresql_where=sa.text('is_active = true'))
    op.create_table('bundle',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('purpose', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('bundle_metadata', sa.JSON(), nullable=True),
    sa.Column('asset_count', sa.Integer(), nullable=True),
    sa.Column('version', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('infospace_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['infospace_id'], ['infospace.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('infospace_id', 'name', 'version')
    )
    op.create_index(op.f('ix_bundle_uuid'), 'bundle', ['uuid'], unique=True)
    op.create_table('dataset',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('entity_uuid', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('infospace_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('asset_ids', sa.JSON(), nullable=True),
    sa.Column('datarecord_ids', sa.JSON(), nullable=True),
    sa.Column('source_job_ids', sa.JSON(), nullable=True),
    sa.Column('source_scheme_ids', sa.JSON(), nullable=True),
    sa.Column('custom_metadata', sa.JSON(), nullable=True),
    sa.Column('imported_from_uuid', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['infospace_id'], ['infospace.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_dataset_entity_uuid'), 'dataset', ['entity_uuid'], unique=True)
    op.create_index(op.f('ix_dataset_imported_from_uuid'), 'dataset', ['imported_from_uuid'], unique=False)
    op.create_table('infospacebackup',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.Column('infospace_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('backup_type', sa.Enum('MANUAL', 'AUTO', 'SYSTEM', name='backuptype'), nullable=False),
    sa.Column('storage_path', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('file_size_bytes', sa.Integer(), nullable=True),
    sa.Column('content_hash', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('included_sources', sa.Integer(), nullable=False),
    sa.Column('included_assets', sa.Integer(), nullable=False),
    sa.Column('included_schemas', sa.Integer(), nullable=False),
    sa.Column('included_runs', sa.Integer(), nullable=False),
    sa.Column('included_datasets', sa.Integer(), nullable=False),
    sa.Column('included_annotations', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'RUNNING', 'COMPLETED', 'FAILED', name='backupstatus'), nullable=False),
    sa.Column('error_message', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('is_shareable', sa.Boolean(), nullable=False),
    sa.Column('share_token', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['infospace_id'], ['infospace.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_infospacebackup_infospace_user', 'infospacebackup', ['infospace_id', 'user_id'], unique=False)
    op.create_index(op.f('ix_infospacebackup_share_token'), 'infospacebackup', ['share_token'], unique=False)
    op.create_index(op.f('ix_infospacebackup_uuid'), 'infospacebackup', ['uuid'], unique=True)
    op.create_table('package',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('infospace_id', sa.Integer(), nullable=False),
    sa.Column('manifest', sa.JSON(), nullable=True),
    sa.Column('asset_ids', sa.JSON(), nullable=True),
    sa.Column('schema_ids', sa.JSON(), nullable=True),
    sa.Column('run_ids', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['infospace_id'], ['infospace.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('shareablelink',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('token', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('permission_level', sa.Enum('READ_ONLY', 'EDIT', 'FULL_ACCESS', name='permissionlevel'), nullable=False),
    sa.Column('is_public', sa.Boolean(), nullable=False),
    sa.Column('expiration_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('max_uses', sa.Integer(), nullable=True),
    sa.Column('use_count', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('resource_type', sa.Enum('SOURCE', 'BUNDLE', 'ASSET', 'SCHEMA', 'INFOSPACE', 'RUN', 'PACKAGE', 'DATASET', 'MIXED', name='resourcetype'), nullable=False),
    sa.Column('resource_id', sa.Integer(), nullable=False),
    sa.Column('infospace_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['infospace_id'], ['infospace.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_shareablelink_token'), 'shareablelink', ['token'], unique=True)
    op.create_table('source',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('kind', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('details', sa.JSON(), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'PROCESSING', 'COMPLETE', 'FAILED', name='sourcestatus'), nullable=False),
    sa.Column('source_metadata', sa.JSON(), nullable=True),
    sa.Column('error_message', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('infospace_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('imported_from_uuid', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['infospace_id'], ['infospace.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_source_imported_from_uuid'), 'source', ['imported_from_uuid'], unique=False)
    op.create_index(op.f('ix_source_uuid'), 'source', ['uuid'], unique=True)
    op.create_table('task',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('type', sa.Enum('INGEST', 'ANNOTATE', 'MONITOR', 'PIPELINE', name='tasktype'), nullable=False),
    sa.Column('schedule', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('configuration', sa.JSON(), nullable=True),
    sa.Column('status', sa.Enum('ACTIVE', 'PAUSED', 'ERROR', name='taskstatus'), nullable=False),
    sa.Column('is_enabled', sa.Boolean(), nullable=False),
    sa.Column('infospace_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('last_run_at', sa.DateTime(), nullable=True),
    sa.Column('last_successful_run_at', sa.DateTime(), nullable=True),
    sa.Column('last_run_status', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('last_run_message', sa.Text(), nullable=True),
    sa.Column('consecutive_failure_count', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['infospace_id'], ['infospace.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('asset',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('kind', sa.Enum('PDF', 'WEB', 'IMAGE', 'VIDEO', 'AUDIO', 'TEXT', 'CSV', 'CSV_ROW', 'MBOX', 'EMAIL', 'PDF_PAGE', 'TEXT_CHUNK', 'IMAGE_REGION', 'VIDEO_SCENE', 'AUDIO_SEGMENT', 'ARTICLE', 'FILE', name='assetkind'), nullable=False),
    sa.Column('text_content', sa.Text(), nullable=True),
    sa.Column('blob_path', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('source_identifier', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('source_metadata', sa.JSON(), nullable=True),
    sa.Column('content_hash', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('fragments', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('processing_status', sa.Enum('READY', 'PENDING', 'PROCESSING', 'FAILED', name='processingstatus'), nullable=False),
    sa.Column('processing_error', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('infospace_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('source_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('event_timestamp', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('parent_asset_id', sa.Integer(), nullable=True),
    sa.Column('part_index', sa.Integer(), nullable=True),
    sa.Column('previous_asset_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['infospace_id'], ['infospace.id'], ),
    sa.ForeignKeyConstraint(['parent_asset_id'], ['asset.id'], ),
    sa.ForeignKeyConstraint(['previous_asset_id'], ['asset.id'], ),
    sa.ForeignKeyConstraint(['source_id'], ['source.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_asset_content_hash'), 'asset', ['content_hash'], unique=False)
    op.create_index('ix_asset_fragments', 'asset', ['fragments'], unique=False, postgresql_using='gin', postgresql_ops={'fragments': 'jsonb_path_ops'})
    op.create_index(op.f('ix_asset_part_index'), 'asset', ['part_index'], unique=False)
    op.create_index(op.f('ix_asset_previous_asset_id'), 'asset', ['previous_asset_id'], unique=False)
    op.create_index(op.f('ix_asset_source_identifier'), 'asset', ['source_identifier'], unique=False)
    op.create_index(op.f('ix_asset_uuid'), 'asset', ['uuid'], unique=True)
    op.create_table('intelligencepipeline',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('infospace_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('source_bundle_ids', sa.JSON(), nullable=True),
    sa.Column('linked_task_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['infospace_id'], ['infospace.id'], ),
    sa.ForeignKeyConstraint(['linked_task_id'], ['task.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_intelligencepipeline_uuid'), 'intelligencepipeline', ['uuid'], unique=True)
    op.create_table('monitor',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('infospace_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('linked_task_id', sa.Integer(), nullable=False),
    sa.Column('run_config_override', sa.JSON(), nullable=True),
    sa.Column('views_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('aggregation_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('last_checked_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['infospace_id'], ['infospace.id'], ),
    sa.ForeignKeyConstraint(['linked_task_id'], ['task.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('linked_task_id')
    )
    op.create_index(op.f('ix_monitor_uuid'), 'monitor', ['uuid'], unique=True)
    op.create_table('annotationrun',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('configuration', sa.JSON(), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'RUNNING', 'COMPLETED', 'FAILED', 'COMPLETED_WITH_ERRORS', name='runstatus'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('include_parent_context', sa.Boolean(), nullable=False),
    sa.Column('context_window', sa.Integer(), nullable=False),
    sa.Column('views_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('infospace_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('imported_from_uuid', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('monitor_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['infospace_id'], ['infospace.id'], ),
    sa.ForeignKeyConstraint(['monitor_id'], ['monitor.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_annotationrun_imported_from_uuid'), 'annotationrun', ['imported_from_uuid'], unique=False)
    op.create_index(op.f('ix_annotationrun_uuid'), 'annotationrun', ['uuid'], unique=True)
    op.create_table('assetbundlelink',
    sa.Column('asset_id', sa.Integer(), nullable=False),
    sa.Column('bundle_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['asset_id'], ['asset.id'], ),
    sa.ForeignKeyConstraint(['bundle_id'], ['bundle.id'], ),
    sa.PrimaryKeyConstraint('asset_id', 'bundle_id')
    )
    op.create_table('assetchunk',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('asset_id', sa.Integer(), nullable=False),
    sa.Column('chunk_index', sa.Integer(), nullable=False),
    sa.Column('text_content', sa.Text(), nullable=True),
    sa.Column('blob_reference', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('embedding_model_id', sa.Integer(), nullable=True),
    sa.Column('embedding_json', sa.JSON(), nullable=True),
    sa.Column('embedding_legacy', pgvector.sqlalchemy.vector.VECTOR(dim=1024), nullable=True),
    sa.Column('chunk_metadata', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['asset_id'], ['asset.id'], ),
    sa.ForeignKeyConstraint(['embedding_model_id'], ['embeddingmodel.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('asset_id', 'chunk_index')
    )
    op.create_index('ix_assetchunk_embedding_legacy', 'assetchunk', ['embedding_legacy'], unique=False, postgresql_using='ivfflat', postgresql_with={'lists': 100})
    op.create_index('ix_assetchunk_embedding_model', 'assetchunk', ['embedding_model_id'], unique=False)
    op.create_table('monitoraggregate',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('monitor_id', sa.Integer(), nullable=False),
    sa.Column('field_path', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('value_kind', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('sketch_kind', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('payload', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['monitor_id'], ['monitor.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_monitoraggregate_monitor_field', 'monitoraggregate', ['monitor_id', 'field_path'], unique=False)
    op.create_index('ix_monitoraggregate_payload', 'monitoraggregate', ['payload'], unique=False, postgresql_using='gin', postgresql_ops={'payload': 'jsonb_path_ops'})
    op.create_table('monitorbundlelink',
    sa.Column('monitor_id', sa.Integer(), nullable=False),
    sa.Column('bundle_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['bundle_id'], ['bundle.id'], ),
    sa.ForeignKeyConstraint(['monitor_id'], ['monitor.id'], ),
    sa.PrimaryKeyConstraint('monitor_id', 'bundle_id')
    )
    op.create_table('monitorschemalink',
    sa.Column('monitor_id', sa.Integer(), nullable=False),
    sa.Column('schema_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['monitor_id'], ['monitor.id'], ),
    sa.ForeignKeyConstraint(['schema_id'], ['annotationschema.id'], ),
    sa.PrimaryKeyConstraint('monitor_id', 'schema_id')
    )
    op.create_table('pipelineexecution',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('pipeline_id', sa.Integer(), nullable=False),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('trigger_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('triggering_asset_ids', sa.JSON(), nullable=True),
    sa.Column('step_outputs', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=False),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['pipeline_id'], ['intelligencepipeline.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('pipelineprocessedasset',
    sa.Column('pipeline_id', sa.Integer(), nullable=False),
    sa.Column('input_bundle_id', sa.Integer(), nullable=False),
    sa.Column('asset_id', sa.Integer(), nullable=False),
    sa.Column('processed_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['asset_id'], ['asset.id'], ),
    sa.ForeignKeyConstraint(['input_bundle_id'], ['bundle.id'], ),
    sa.ForeignKeyConstraint(['pipeline_id'], ['intelligencepipeline.id'], ),
    sa.PrimaryKeyConstraint('pipeline_id', 'input_bundle_id', 'asset_id')
    )
    op.create_table('pipelinestep',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('pipeline_id', sa.Integer(), nullable=False),
    sa.Column('step_order', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('step_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('configuration', sa.JSON(), nullable=True),
    sa.Column('input_source', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['pipeline_id'], ['intelligencepipeline.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('annotation',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('asset_id', sa.Integer(), nullable=False),
    sa.Column('schema_id', sa.Integer(), nullable=False),
    sa.Column('run_id', sa.Integer(), nullable=False),
    sa.Column('infospace_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('value', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('status', sa.Enum('SUCCESS', 'FAILED', name='resultstatus'), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('event_timestamp', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('region', sa.JSON(), nullable=True),
    sa.Column('links', sa.JSON(), nullable=True),
    sa.Column('imported_from_uuid', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['asset_id'], ['asset.id'], ),
    sa.ForeignKeyConstraint(['infospace_id'], ['infospace.id'], ),
    sa.ForeignKeyConstraint(['run_id'], ['annotationrun.id'], ),
    sa.ForeignKeyConstraint(['schema_id'], ['annotationschema.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('asset_id', 'schema_id', 'run_id', 'uuid')
    )
    op.create_index(op.f('ix_annotation_imported_from_uuid'), 'annotation', ['imported_from_uuid'], unique=False)
    op.create_index(op.f('ix_annotation_uuid'), 'annotation', ['uuid'], unique=True)
    op.create_index('ix_annotation_value', 'annotation', ['value'], unique=False, postgresql_using='gin', postgresql_ops={'value': 'jsonb_path_ops'})
    op.create_table('runaggregate',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('run_id', sa.Integer(), nullable=False),
    sa.Column('field_path', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('value_kind', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('sketch_kind', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('payload', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['run_id'], ['annotationrun.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_runaggregate_payload', 'runaggregate', ['payload'], unique=False, postgresql_using='gin', postgresql_ops={'payload': 'jsonb_path_ops'})
    op.create_index('ix_runaggregate_run_field', 'runaggregate', ['run_id', 'field_path'], unique=False)
    op.create_table('runschemalink',
    sa.Column('run_id', sa.Integer(), nullable=False),
    sa.Column('schema_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['run_id'], ['annotationrun.id'], ),
    sa.ForeignKeyConstraint(['schema_id'], ['annotationschema.id'], ),
    sa.PrimaryKeyConstraint('run_id', 'schema_id')
    )
    op.create_table('justification',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('annotation_id', sa.Integer(), nullable=False),
    sa.Column('field_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('reasoning', sa.Text(), nullable=True),
    sa.Column('evidence_payload', sa.JSON(), nullable=True),
    sa.Column('model_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('score', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['annotation_id'], ['annotation.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_justification_annotation_field', 'justification', ['annotation_id', 'field_name'], unique=False)
    op.create_table('celery_clockedschedule',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('clocked_time', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='celery_schema',
    sqlite_autoincrement=True
    )
    op.create_table('celery_crontabschedule',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('minute', sa.String(length=240), nullable=False, comment='Cron Minutes to Run. Use "*" for "all". (Example: "0,30")'),
    sa.Column('hour', sa.String(length=96), nullable=False, comment='Cron Hours to Run. Use "*" for "all". (Example: "8,20")'),
    sa.Column('day_of_week', sa.String(length=64), nullable=False, comment='Cron Days Of The Week to Run. Use "*" for "all", Sunday is 0 or 7, Monday is 1. (Example: "0,5")'),
    sa.Column('day_of_month', sa.String(length=124), nullable=False, comment='Cron Days Of The Month to Run. Use "*" for "all". (Example: "1,15")'),
    sa.Column('month_of_year', sa.String(length=64), nullable=False, comment='Cron Months (1-12) Of The Year to Run. Use "*" for "all". (Example: "1,12")'),
    sa.Column('timezone', sa.String(length=64), nullable=False, comment='Timezone to Run the Cron Schedule on. Default is UTC.'),
    sa.PrimaryKeyConstraint('id'),
    schema='celery_schema',
    sqlite_autoincrement=True
    )
    op.create_table('celery_intervalschedule',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('every', sa.Integer(), nullable=False, comment='Number of interval periods to wait before running the task again'),
    sa.Column('period', sa.Enum('days', 'hours', 'minutes', 'seconds', 'microseconds', name='period'), nullable=False, comment='The type of period between task runs (Example: days)'),
    sa.CheckConstraint('every >= 1'),
    sa.PrimaryKeyConstraint('id'),
    schema='celery_schema',
    sqlite_autoincrement=True
    )
    op.create_table('celery_periodictask',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False, comment='Short Description For This Task'),
    sa.Column('task', sa.String(length=255), nullable=False, comment='The Name of the Celery Task that Should be Run.  (Example: "proj.tasks.import_contacts")'),
    sa.Column('args', sa.Text(), nullable=False, comment='JSON encoded positional arguments (Example: ["arg1", "arg2"])'),
    sa.Column('kwargs', sa.Text(), nullable=False, comment='JSON encoded keyword arguments (Example: {"argument": "value"})'),
    sa.Column('queue', sa.String(length=255), nullable=True, comment='Queue defined in CELERY_TASK_QUEUES. Leave None for default queuing.'),
    sa.Column('exchange', sa.String(length=255), nullable=True, comment='Override Exchange for low-level AMQP routing'),
    sa.Column('routing_key', sa.String(length=255), nullable=True, comment='Override Routing Key for low-level AMQP routing'),
    sa.Column('headers', sa.Text(), nullable=True, comment='JSON encoded message headers for the AMQP message.'),
    sa.Column('priority', sa.Integer(), nullable=True, comment='Priority Number between 0 and 255. Supported by: RabbitMQ, Redis (priority reversed, 0 is highest).'),
    sa.Column('expires', sa.DateTime(timezone=True), nullable=True, comment='Datetime after which the schedule will no longer trigger the task to run'),
    sa.Column('expire_seconds', sa.Integer(), nullable=True, comment='Timedelta with seconds which the schedule will no longer trigger the task to run'),
    sa.Column('one_off', sa.Boolean(), nullable=False, comment='If True, the schedule will only run the task a single time'),
    sa.Column('start_time', sa.DateTime(timezone=True), nullable=True, comment='Datetime when the schedule should begin triggering the task to run'),
    sa.Column('enabled', sa.Boolean(), nullable=False, comment='Set to False to disable the schedule'),
    sa.Column('last_run_at', sa.DateTime(timezone=True), nullable=True, comment='Datetime that the schedule last triggered the task to run. '),
    sa.Column('total_run_count', sa.Integer(), nullable=False, comment='Running count of how many times the schedule has triggered the task'),
    sa.Column('date_changed', sa.DateTime(timezone=True), nullable=True, comment='Datetime that this PeriodicTask was last modified'),
    sa.Column('description', sa.Text(), nullable=True, comment='Detailed description about the details of this Periodic Task'),
    sa.Column('discriminator', sa.String(length=20), nullable=False, comment='Lower case name of the schedule class. '),
    sa.Column('schedule_id', sa.Integer(), nullable=False, comment='ID of the schedule model object. '),
    sa.CheckConstraint('priority BETWEEN 0 AND 255'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    schema='celery_schema',
    sqlite_autoincrement=True
    )
    op.create_table('celery_periodictaskchanged',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('last_update', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='celery_schema',
    sqlite_autoincrement=False
    )
    op.create_table('celery_solarschedule',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('event', sa.Enum('dawn_astronomical', 'dawn_nautical', 'dawn_civil', 'sunrise', 'solar_noon', 'sunset', 'dusk_civil', 'dusk_nautical', 'dusk_astronomical', name='solarevent'), nullable=False, comment='The type of solar event when the job should run'),
    sa.Column('latitude', sa.Numeric(precision=9, scale=6, decimal_return_scale=6, asdecimal=False), nullable=False, comment='Run the task when the event happens at this latitude'),
    sa.Column('longitude', sa.Numeric(precision=9, scale=6, decimal_return_scale=6, asdecimal=False), nullable=False, comment='Run the task when the event happens at this longitude'),
    sa.CheckConstraint('latitude BETWEEN -90 AND 90'),
    sa.CheckConstraint('longitude BETWEEN -180 AND 180'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('event', 'latitude', 'longitude'),
    schema='celery_schema',
    sqlite_autoincrement=True
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('celery_solarschedule', schema='celery_schema')
    op.drop_table('celery_periodictaskchanged', schema='celery_schema')
    op.drop_table('celery_periodictask', schema='celery_schema')
    op.drop_table('celery_intervalschedule', schema='celery_schema')
    op.drop_table('celery_crontabschedule', schema='celery_schema')
    op.drop_table('celery_clockedschedule', schema='celery_schema')
    op.drop_index('ix_justification_annotation_field', table_name='justification')
    op.drop_table('justification')
    op.drop_table('runschemalink')
    op.drop_index('ix_runaggregate_run_field', table_name='runaggregate')
    op.drop_index('ix_runaggregate_payload', table_name='runaggregate', postgresql_using='gin', postgresql_ops={'payload': 'jsonb_path_ops'})
    op.drop_table('runaggregate')
    op.drop_index('ix_annotation_value', table_name='annotation', postgresql_using='gin', postgresql_ops={'value': 'jsonb_path_ops'})
    op.drop_index(op.f('ix_annotation_uuid'), table_name='annotation')
    op.drop_index(op.f('ix_annotation_imported_from_uuid'), table_name='annotation')
    op.drop_table('annotation')
    op.drop_table('pipelinestep')
    op.drop_table('pipelineprocessedasset')
    op.drop_table('pipelineexecution')
    op.drop_table('monitorschemalink')
    op.drop_table('monitorbundlelink')
    op.drop_index('ix_monitoraggregate_payload', table_name='monitoraggregate', postgresql_using='gin', postgresql_ops={'payload': 'jsonb_path_ops'})
    op.drop_index('ix_monitoraggregate_monitor_field', table_name='monitoraggregate')
    op.drop_table('monitoraggregate')
    op.drop_index('ix_assetchunk_embedding_model', table_name='assetchunk')
    op.drop_index('ix_assetchunk_embedding_legacy', table_name='assetchunk', postgresql_using='ivfflat', postgresql_with={'lists': 100})
    op.drop_table('assetchunk')
    op.drop_table('assetbundlelink')
    op.drop_index(op.f('ix_annotationrun_uuid'), table_name='annotationrun')
    op.drop_index(op.f('ix_annotationrun_imported_from_uuid'), table_name='annotationrun')
    op.drop_table('annotationrun')
    op.drop_index(op.f('ix_monitor_uuid'), table_name='monitor')
    op.drop_table('monitor')
    op.drop_index(op.f('ix_intelligencepipeline_uuid'), table_name='intelligencepipeline')
    op.drop_table('intelligencepipeline')
    op.drop_index(op.f('ix_asset_uuid'), table_name='asset')
    op.drop_index(op.f('ix_asset_source_identifier'), table_name='asset')
    op.drop_index(op.f('ix_asset_previous_asset_id'), table_name='asset')
    op.drop_index(op.f('ix_asset_part_index'), table_name='asset')
    op.drop_index('ix_asset_fragments', table_name='asset', postgresql_using='gin', postgresql_ops={'fragments': 'jsonb_path_ops'})
    op.drop_index(op.f('ix_asset_content_hash'), table_name='asset')
    op.drop_table('asset')
    op.drop_table('task')
    op.drop_index(op.f('ix_source_uuid'), table_name='source')
    op.drop_index(op.f('ix_source_imported_from_uuid'), table_name='source')
    op.drop_table('source')
    op.drop_index(op.f('ix_shareablelink_token'), table_name='shareablelink')
    op.drop_table('shareablelink')
    op.drop_table('package')
    op.drop_index(op.f('ix_infospacebackup_uuid'), table_name='infospacebackup')
    op.drop_index(op.f('ix_infospacebackup_share_token'), table_name='infospacebackup')
    op.drop_index('ix_infospacebackup_infospace_user', table_name='infospacebackup')
    op.drop_table('infospacebackup')
    op.drop_index(op.f('ix_dataset_imported_from_uuid'), table_name='dataset')
    op.drop_index(op.f('ix_dataset_entity_uuid'), table_name='dataset')
    op.drop_table('dataset')
    op.drop_index(op.f('ix_bundle_uuid'), table_name='bundle')
    op.drop_table('bundle')
    op.drop_index('ix_unique_active_schema_name_version', table_name='annotationschema', postgresql_where=sa.text('is_active = true'))
    op.drop_index(op.f('ix_annotationschema_uuid'), table_name='annotationschema')
    op.drop_index(op.f('ix_annotationschema_is_active'), table_name='annotationschema')
    op.drop_table('annotationschema')
    op.drop_index(op.f('ix_userbackup_uuid'), table_name='userbackup')
    op.drop_index('ix_userbackup_target_created', table_name='userbackup')
    op.drop_index(op.f('ix_userbackup_share_token'), table_name='userbackup')
    op.drop_table('userbackup')
    op.drop_table('searchhistory')
    op.drop_index(op.f('ix_infospace_uuid'), table_name='infospace')
    op.drop_table('infospace')
    op.drop_index(op.f('ix_analysisadapter_name'), table_name='analysisadapter')
    op.drop_index(op.f('ix_analysisadapter_is_active'), table_name='analysisadapter')
    op.drop_table('analysisadapter')
    op.drop_index(op.f('ix_user_email_verification_token'), table_name='user')
    op.drop_index(op.f('ix_user_email'), table_name='user')
    op.drop_table('user')
    op.drop_index('ix_embeddingmodel_provider_active', table_name='embeddingmodel')
    op.drop_index(op.f('ix_embeddingmodel_name'), table_name='embeddingmodel')
    op.drop_table('embeddingmodel')
    # ### end Alembic commands ###
